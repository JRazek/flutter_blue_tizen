// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flutterblue.proto

#include "flutterblue.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_flutterblue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AdvertisementData_flutterblue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flutterblue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdvertisementData_ManufacturerDataEntry_DoNotUse_flutterblue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flutterblue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdvertisementData_ServiceDataEntry_DoNotUse_flutterblue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flutterblue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BluetoothCharacteristic_flutterblue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flutterblue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BluetoothDescriptor_flutterblue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flutterblue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BluetoothDevice_flutterblue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flutterblue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BluetoothService_flutterblue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flutterblue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CharacteristicProperties_flutterblue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flutterblue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int32Value_flutterblue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flutterblue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadDescriptorRequest_flutterblue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flutterblue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteCharacteristicRequest_flutterblue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flutterblue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteDescriptorRequest_flutterblue_2eproto;
class Int32ValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Int32Value> _instance;
} _Int32Value_default_instance_;
class BluetoothStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BluetoothState> _instance;
} _BluetoothState_default_instance_;
class AdvertisementData_ManufacturerDataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdvertisementData_ManufacturerDataEntry_DoNotUse> _instance;
} _AdvertisementData_ManufacturerDataEntry_DoNotUse_default_instance_;
class AdvertisementData_ServiceDataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdvertisementData_ServiceDataEntry_DoNotUse> _instance;
} _AdvertisementData_ServiceDataEntry_DoNotUse_default_instance_;
class AdvertisementDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdvertisementData> _instance;
} _AdvertisementData_default_instance_;
class ScanSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScanSettings> _instance;
} _ScanSettings_default_instance_;
class ScanResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScanResult> _instance;
} _ScanResult_default_instance_;
class ConnectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectRequest> _instance;
} _ConnectRequest_default_instance_;
class BluetoothDeviceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BluetoothDevice> _instance;
} _BluetoothDevice_default_instance_;
class BluetoothServiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BluetoothService> _instance;
} _BluetoothService_default_instance_;
class BluetoothCharacteristicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BluetoothCharacteristic> _instance;
} _BluetoothCharacteristic_default_instance_;
class BluetoothDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BluetoothDescriptor> _instance;
} _BluetoothDescriptor_default_instance_;
class CharacteristicPropertiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CharacteristicProperties> _instance;
} _CharacteristicProperties_default_instance_;
class DiscoverServicesResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiscoverServicesResult> _instance;
} _DiscoverServicesResult_default_instance_;
class ReadCharacteristicRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadCharacteristicRequest> _instance;
} _ReadCharacteristicRequest_default_instance_;
class ReadCharacteristicResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadCharacteristicResponse> _instance;
} _ReadCharacteristicResponse_default_instance_;
class ReadDescriptorRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadDescriptorRequest> _instance;
} _ReadDescriptorRequest_default_instance_;
class ReadDescriptorResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadDescriptorResponse> _instance;
} _ReadDescriptorResponse_default_instance_;
class WriteCharacteristicRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteCharacteristicRequest> _instance;
} _WriteCharacteristicRequest_default_instance_;
class WriteCharacteristicResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteCharacteristicResponse> _instance;
} _WriteCharacteristicResponse_default_instance_;
class WriteDescriptorRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteDescriptorRequest> _instance;
} _WriteDescriptorRequest_default_instance_;
class WriteDescriptorResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteDescriptorResponse> _instance;
} _WriteDescriptorResponse_default_instance_;
class SetNotificationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetNotificationRequest> _instance;
} _SetNotificationRequest_default_instance_;
class SetNotificationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetNotificationResponse> _instance;
} _SetNotificationResponse_default_instance_;
class OnCharacteristicChangedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OnCharacteristicChanged> _instance;
} _OnCharacteristicChanged_default_instance_;
class DeviceStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceStateResponse> _instance;
} _DeviceStateResponse_default_instance_;
class ConnectedDevicesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectedDevicesResponse> _instance;
} _ConnectedDevicesResponse_default_instance_;
class MtuSizeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MtuSizeRequest> _instance;
} _MtuSizeRequest_default_instance_;
class MtuSizeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MtuSizeResponse> _instance;
} _MtuSizeResponse_default_instance_;
static void InitDefaultsscc_info_AdvertisementData_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AdvertisementData_default_instance_;
    new (ptr) ::AdvertisementData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AdvertisementData_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_AdvertisementData_flutterblue_2eproto}, {
      &scc_info_Int32Value_flutterblue_2eproto.base,
      &scc_info_AdvertisementData_ManufacturerDataEntry_DoNotUse_flutterblue_2eproto.base,
      &scc_info_AdvertisementData_ServiceDataEntry_DoNotUse_flutterblue_2eproto.base,}};

static void InitDefaultsscc_info_AdvertisementData_ManufacturerDataEntry_DoNotUse_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AdvertisementData_ManufacturerDataEntry_DoNotUse_default_instance_;
    new (ptr) ::AdvertisementData_ManufacturerDataEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdvertisementData_ManufacturerDataEntry_DoNotUse_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdvertisementData_ManufacturerDataEntry_DoNotUse_flutterblue_2eproto}, {}};

static void InitDefaultsscc_info_AdvertisementData_ServiceDataEntry_DoNotUse_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AdvertisementData_ServiceDataEntry_DoNotUse_default_instance_;
    new (ptr) ::AdvertisementData_ServiceDataEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdvertisementData_ServiceDataEntry_DoNotUse_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdvertisementData_ServiceDataEntry_DoNotUse_flutterblue_2eproto}, {}};

static void InitDefaultsscc_info_BluetoothCharacteristic_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BluetoothCharacteristic_default_instance_;
    new (ptr) ::BluetoothCharacteristic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BluetoothCharacteristic_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BluetoothCharacteristic_flutterblue_2eproto}, {
      &scc_info_BluetoothDescriptor_flutterblue_2eproto.base,
      &scc_info_CharacteristicProperties_flutterblue_2eproto.base,}};

static void InitDefaultsscc_info_BluetoothDescriptor_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BluetoothDescriptor_default_instance_;
    new (ptr) ::BluetoothDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BluetoothDescriptor_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BluetoothDescriptor_flutterblue_2eproto}, {}};

static void InitDefaultsscc_info_BluetoothDevice_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BluetoothDevice_default_instance_;
    new (ptr) ::BluetoothDevice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BluetoothDevice_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BluetoothDevice_flutterblue_2eproto}, {}};

static void InitDefaultsscc_info_BluetoothService_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BluetoothService_default_instance_;
    new (ptr) ::BluetoothService();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BluetoothService_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BluetoothService_flutterblue_2eproto}, {
      &scc_info_BluetoothCharacteristic_flutterblue_2eproto.base,}};

static void InitDefaultsscc_info_BluetoothState_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BluetoothState_default_instance_;
    new (ptr) ::BluetoothState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BluetoothState_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BluetoothState_flutterblue_2eproto}, {}};

static void InitDefaultsscc_info_CharacteristicProperties_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CharacteristicProperties_default_instance_;
    new (ptr) ::CharacteristicProperties();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CharacteristicProperties_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CharacteristicProperties_flutterblue_2eproto}, {}};

static void InitDefaultsscc_info_ConnectRequest_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConnectRequest_default_instance_;
    new (ptr) ::ConnectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectRequest_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConnectRequest_flutterblue_2eproto}, {}};

static void InitDefaultsscc_info_ConnectedDevicesResponse_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConnectedDevicesResponse_default_instance_;
    new (ptr) ::ConnectedDevicesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConnectedDevicesResponse_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConnectedDevicesResponse_flutterblue_2eproto}, {
      &scc_info_BluetoothDevice_flutterblue_2eproto.base,}};

static void InitDefaultsscc_info_DeviceStateResponse_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DeviceStateResponse_default_instance_;
    new (ptr) ::DeviceStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceStateResponse_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceStateResponse_flutterblue_2eproto}, {}};

static void InitDefaultsscc_info_DiscoverServicesResult_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DiscoverServicesResult_default_instance_;
    new (ptr) ::DiscoverServicesResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DiscoverServicesResult_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DiscoverServicesResult_flutterblue_2eproto}, {
      &scc_info_BluetoothService_flutterblue_2eproto.base,}};

static void InitDefaultsscc_info_Int32Value_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Int32Value_default_instance_;
    new (ptr) ::Int32Value();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int32Value_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Int32Value_flutterblue_2eproto}, {}};

static void InitDefaultsscc_info_MtuSizeRequest_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MtuSizeRequest_default_instance_;
    new (ptr) ::MtuSizeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MtuSizeRequest_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MtuSizeRequest_flutterblue_2eproto}, {}};

static void InitDefaultsscc_info_MtuSizeResponse_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MtuSizeResponse_default_instance_;
    new (ptr) ::MtuSizeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MtuSizeResponse_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MtuSizeResponse_flutterblue_2eproto}, {}};

static void InitDefaultsscc_info_OnCharacteristicChanged_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OnCharacteristicChanged_default_instance_;
    new (ptr) ::OnCharacteristicChanged();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OnCharacteristicChanged_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OnCharacteristicChanged_flutterblue_2eproto}, {
      &scc_info_BluetoothCharacteristic_flutterblue_2eproto.base,}};

static void InitDefaultsscc_info_ReadCharacteristicRequest_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ReadCharacteristicRequest_default_instance_;
    new (ptr) ::ReadCharacteristicRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadCharacteristicRequest_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadCharacteristicRequest_flutterblue_2eproto}, {}};

static void InitDefaultsscc_info_ReadCharacteristicResponse_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ReadCharacteristicResponse_default_instance_;
    new (ptr) ::ReadCharacteristicResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadCharacteristicResponse_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReadCharacteristicResponse_flutterblue_2eproto}, {
      &scc_info_BluetoothCharacteristic_flutterblue_2eproto.base,}};

static void InitDefaultsscc_info_ReadDescriptorRequest_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ReadDescriptorRequest_default_instance_;
    new (ptr) ::ReadDescriptorRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadDescriptorRequest_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadDescriptorRequest_flutterblue_2eproto}, {}};

static void InitDefaultsscc_info_ReadDescriptorResponse_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ReadDescriptorResponse_default_instance_;
    new (ptr) ::ReadDescriptorResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadDescriptorResponse_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReadDescriptorResponse_flutterblue_2eproto}, {
      &scc_info_ReadDescriptorRequest_flutterblue_2eproto.base,}};

static void InitDefaultsscc_info_ScanResult_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ScanResult_default_instance_;
    new (ptr) ::ScanResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ScanResult_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ScanResult_flutterblue_2eproto}, {
      &scc_info_BluetoothDevice_flutterblue_2eproto.base,
      &scc_info_AdvertisementData_flutterblue_2eproto.base,}};

static void InitDefaultsscc_info_ScanSettings_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ScanSettings_default_instance_;
    new (ptr) ::ScanSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScanSettings_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScanSettings_flutterblue_2eproto}, {}};

static void InitDefaultsscc_info_SetNotificationRequest_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SetNotificationRequest_default_instance_;
    new (ptr) ::SetNotificationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetNotificationRequest_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetNotificationRequest_flutterblue_2eproto}, {}};

static void InitDefaultsscc_info_SetNotificationResponse_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SetNotificationResponse_default_instance_;
    new (ptr) ::SetNotificationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetNotificationResponse_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetNotificationResponse_flutterblue_2eproto}, {
      &scc_info_BluetoothCharacteristic_flutterblue_2eproto.base,}};

static void InitDefaultsscc_info_WriteCharacteristicRequest_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WriteCharacteristicRequest_default_instance_;
    new (ptr) ::WriteCharacteristicRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteCharacteristicRequest_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WriteCharacteristicRequest_flutterblue_2eproto}, {}};

static void InitDefaultsscc_info_WriteCharacteristicResponse_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WriteCharacteristicResponse_default_instance_;
    new (ptr) ::WriteCharacteristicResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WriteCharacteristicResponse_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WriteCharacteristicResponse_flutterblue_2eproto}, {
      &scc_info_WriteCharacteristicRequest_flutterblue_2eproto.base,}};

static void InitDefaultsscc_info_WriteDescriptorRequest_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WriteDescriptorRequest_default_instance_;
    new (ptr) ::WriteDescriptorRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteDescriptorRequest_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WriteDescriptorRequest_flutterblue_2eproto}, {}};

static void InitDefaultsscc_info_WriteDescriptorResponse_flutterblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WriteDescriptorResponse_default_instance_;
    new (ptr) ::WriteDescriptorResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WriteDescriptorResponse_flutterblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WriteDescriptorResponse_flutterblue_2eproto}, {
      &scc_info_WriteDescriptorRequest_flutterblue_2eproto.base,}};

bool BluetoothState_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BluetoothState_State_strings[7] = {};

static const char BluetoothState_State_names[] =
  "OFF"
  "ON"
  "TURNING_OFF"
  "TURNING_ON"
  "UNAUTHORIZED"
  "UNAVAILABLE"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BluetoothState_State_entries[] = {
  { {BluetoothState_State_names + 0, 3}, 6 },
  { {BluetoothState_State_names + 3, 2}, 4 },
  { {BluetoothState_State_names + 5, 11}, 5 },
  { {BluetoothState_State_names + 16, 10}, 3 },
  { {BluetoothState_State_names + 26, 12}, 2 },
  { {BluetoothState_State_names + 38, 11}, 1 },
  { {BluetoothState_State_names + 49, 7}, 0 },
};

static const int BluetoothState_State_entries_by_number[] = {
  6, // 0 -> UNKNOWN
  5, // 1 -> UNAVAILABLE
  4, // 2 -> UNAUTHORIZED
  3, // 3 -> TURNING_ON
  1, // 4 -> ON
  2, // 5 -> TURNING_OFF
  0, // 6 -> OFF
};

const std::string& BluetoothState_State_Name(
    BluetoothState_State value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BluetoothState_State_entries,
          BluetoothState_State_entries_by_number,
          7, BluetoothState_State_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BluetoothState_State_entries,
      BluetoothState_State_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BluetoothState_State_strings[idx].get();
}
bool BluetoothState_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BluetoothState_State* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BluetoothState_State_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<BluetoothState_State>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BluetoothState_State BluetoothState::UNKNOWN;
constexpr BluetoothState_State BluetoothState::UNAVAILABLE;
constexpr BluetoothState_State BluetoothState::UNAUTHORIZED;
constexpr BluetoothState_State BluetoothState::TURNING_ON;
constexpr BluetoothState_State BluetoothState::ON;
constexpr BluetoothState_State BluetoothState::TURNING_OFF;
constexpr BluetoothState_State BluetoothState::OFF;
constexpr BluetoothState_State BluetoothState::State_MIN;
constexpr BluetoothState_State BluetoothState::State_MAX;
constexpr int BluetoothState::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool BluetoothDevice_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BluetoothDevice_Type_strings[4] = {};

static const char BluetoothDevice_Type_names[] =
  "CLASSIC"
  "DUAL"
  "LE"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BluetoothDevice_Type_entries[] = {
  { {BluetoothDevice_Type_names + 0, 7}, 1 },
  { {BluetoothDevice_Type_names + 7, 4}, 3 },
  { {BluetoothDevice_Type_names + 11, 2}, 2 },
  { {BluetoothDevice_Type_names + 13, 7}, 0 },
};

static const int BluetoothDevice_Type_entries_by_number[] = {
  3, // 0 -> UNKNOWN
  0, // 1 -> CLASSIC
  2, // 2 -> LE
  1, // 3 -> DUAL
};

const std::string& BluetoothDevice_Type_Name(
    BluetoothDevice_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BluetoothDevice_Type_entries,
          BluetoothDevice_Type_entries_by_number,
          4, BluetoothDevice_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BluetoothDevice_Type_entries,
      BluetoothDevice_Type_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BluetoothDevice_Type_strings[idx].get();
}
bool BluetoothDevice_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BluetoothDevice_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BluetoothDevice_Type_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<BluetoothDevice_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BluetoothDevice_Type BluetoothDevice::UNKNOWN;
constexpr BluetoothDevice_Type BluetoothDevice::CLASSIC;
constexpr BluetoothDevice_Type BluetoothDevice::LE;
constexpr BluetoothDevice_Type BluetoothDevice::DUAL;
constexpr BluetoothDevice_Type BluetoothDevice::Type_MIN;
constexpr BluetoothDevice_Type BluetoothDevice::Type_MAX;
constexpr int BluetoothDevice::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool WriteCharacteristicRequest_WriteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WriteCharacteristicRequest_WriteType_strings[2] = {};

static const char WriteCharacteristicRequest_WriteType_names[] =
  "WITHOUT_RESPONSE"
  "WITH_RESPONSE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WriteCharacteristicRequest_WriteType_entries[] = {
  { {WriteCharacteristicRequest_WriteType_names + 0, 16}, 1 },
  { {WriteCharacteristicRequest_WriteType_names + 16, 13}, 0 },
};

static const int WriteCharacteristicRequest_WriteType_entries_by_number[] = {
  1, // 0 -> WITH_RESPONSE
  0, // 1 -> WITHOUT_RESPONSE
};

const std::string& WriteCharacteristicRequest_WriteType_Name(
    WriteCharacteristicRequest_WriteType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WriteCharacteristicRequest_WriteType_entries,
          WriteCharacteristicRequest_WriteType_entries_by_number,
          2, WriteCharacteristicRequest_WriteType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WriteCharacteristicRequest_WriteType_entries,
      WriteCharacteristicRequest_WriteType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WriteCharacteristicRequest_WriteType_strings[idx].get();
}
bool WriteCharacteristicRequest_WriteType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WriteCharacteristicRequest_WriteType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WriteCharacteristicRequest_WriteType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<WriteCharacteristicRequest_WriteType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WriteCharacteristicRequest_WriteType WriteCharacteristicRequest::WITH_RESPONSE;
constexpr WriteCharacteristicRequest_WriteType WriteCharacteristicRequest::WITHOUT_RESPONSE;
constexpr WriteCharacteristicRequest_WriteType WriteCharacteristicRequest::WriteType_MIN;
constexpr WriteCharacteristicRequest_WriteType WriteCharacteristicRequest::WriteType_MAX;
constexpr int WriteCharacteristicRequest::WriteType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DeviceStateResponse_BluetoothDeviceState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceStateResponse_BluetoothDeviceState_strings[4] = {};

static const char DeviceStateResponse_BluetoothDeviceState_names[] =
  "CONNECTED"
  "CONNECTING"
  "DISCONNECTED"
  "DISCONNECTING";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceStateResponse_BluetoothDeviceState_entries[] = {
  { {DeviceStateResponse_BluetoothDeviceState_names + 0, 9}, 2 },
  { {DeviceStateResponse_BluetoothDeviceState_names + 9, 10}, 1 },
  { {DeviceStateResponse_BluetoothDeviceState_names + 19, 12}, 0 },
  { {DeviceStateResponse_BluetoothDeviceState_names + 31, 13}, 3 },
};

static const int DeviceStateResponse_BluetoothDeviceState_entries_by_number[] = {
  2, // 0 -> DISCONNECTED
  1, // 1 -> CONNECTING
  0, // 2 -> CONNECTED
  3, // 3 -> DISCONNECTING
};

const std::string& DeviceStateResponse_BluetoothDeviceState_Name(
    DeviceStateResponse_BluetoothDeviceState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceStateResponse_BluetoothDeviceState_entries,
          DeviceStateResponse_BluetoothDeviceState_entries_by_number,
          4, DeviceStateResponse_BluetoothDeviceState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceStateResponse_BluetoothDeviceState_entries,
      DeviceStateResponse_BluetoothDeviceState_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceStateResponse_BluetoothDeviceState_strings[idx].get();
}
bool DeviceStateResponse_BluetoothDeviceState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DeviceStateResponse_BluetoothDeviceState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceStateResponse_BluetoothDeviceState_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<DeviceStateResponse_BluetoothDeviceState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeviceStateResponse_BluetoothDeviceState DeviceStateResponse::DISCONNECTED;
constexpr DeviceStateResponse_BluetoothDeviceState DeviceStateResponse::CONNECTING;
constexpr DeviceStateResponse_BluetoothDeviceState DeviceStateResponse::CONNECTED;
constexpr DeviceStateResponse_BluetoothDeviceState DeviceStateResponse::DISCONNECTING;
constexpr DeviceStateResponse_BluetoothDeviceState DeviceStateResponse::BluetoothDeviceState_MIN;
constexpr DeviceStateResponse_BluetoothDeviceState DeviceStateResponse::BluetoothDeviceState_MAX;
constexpr int DeviceStateResponse::BluetoothDeviceState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Int32Value::_Internal {
 public:
};

Int32Value::Int32Value(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Int32Value)
}
Int32Value::Int32Value(const Int32Value& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:Int32Value)
}

void Int32Value::SharedCtor() {
  value_ = 0;
}

Int32Value::~Int32Value() {
  // @@protoc_insertion_point(destructor:Int32Value)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Int32Value::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Int32Value::ArenaDtor(void* object) {
  Int32Value* _this = reinterpret_cast< Int32Value* >(object);
  (void)_this;
}
void Int32Value::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Int32Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Int32Value& Int32Value::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Int32Value_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void Int32Value::Clear() {
// @@protoc_insertion_point(message_clear_start:Int32Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* Int32Value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Int32Value::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Int32Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Int32Value)
  return target;
}

size_t Int32Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Int32Value)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Int32Value::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Int32Value*>(
      &from));
}

void Int32Value::MergeFrom(const Int32Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Int32Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Int32Value::CopyFrom(const Int32Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Int32Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int32Value::IsInitialized() const {
  return true;
}

void Int32Value::InternalSwap(Int32Value* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

std::string Int32Value::GetTypeName() const {
  return "Int32Value";
}


// ===================================================================

class BluetoothState::_Internal {
 public:
};

BluetoothState::BluetoothState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BluetoothState)
}
BluetoothState::BluetoothState(const BluetoothState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:BluetoothState)
}

void BluetoothState::SharedCtor() {
  state_ = 0;
}

BluetoothState::~BluetoothState() {
  // @@protoc_insertion_point(destructor:BluetoothState)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void BluetoothState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BluetoothState::ArenaDtor(void* object) {
  BluetoothState* _this = reinterpret_cast< BluetoothState* >(object);
  (void)_this;
}
void BluetoothState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BluetoothState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BluetoothState& BluetoothState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BluetoothState_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void BluetoothState::Clear() {
// @@protoc_insertion_point(message_clear_start:BluetoothState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* BluetoothState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BluetoothState.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::BluetoothState_State>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BluetoothState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BluetoothState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BluetoothState.State state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BluetoothState)
  return target;
}

size_t BluetoothState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BluetoothState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BluetoothState.State state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BluetoothState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BluetoothState*>(
      &from));
}

void BluetoothState::MergeFrom(const BluetoothState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BluetoothState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void BluetoothState::CopyFrom(const BluetoothState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BluetoothState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BluetoothState::IsInitialized() const {
  return true;
}

void BluetoothState::InternalSwap(BluetoothState* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(state_, other->state_);
}

std::string BluetoothState::GetTypeName() const {
  return "BluetoothState";
}


// ===================================================================

AdvertisementData_ManufacturerDataEntry_DoNotUse::AdvertisementData_ManufacturerDataEntry_DoNotUse() {}
AdvertisementData_ManufacturerDataEntry_DoNotUse::AdvertisementData_ManufacturerDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AdvertisementData_ManufacturerDataEntry_DoNotUse::MergeFrom(const AdvertisementData_ManufacturerDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

AdvertisementData_ServiceDataEntry_DoNotUse::AdvertisementData_ServiceDataEntry_DoNotUse() {}
AdvertisementData_ServiceDataEntry_DoNotUse::AdvertisementData_ServiceDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AdvertisementData_ServiceDataEntry_DoNotUse::MergeFrom(const AdvertisementData_ServiceDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class AdvertisementData::_Internal {
 public:
  static const ::Int32Value& tx_power_level(const AdvertisementData* msg);
};

const ::Int32Value&
AdvertisementData::_Internal::tx_power_level(const AdvertisementData* msg) {
  return *msg->tx_power_level_;
}
AdvertisementData::AdvertisementData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  manufacturer_data_(arena),
  service_data_(arena),
  service_uuids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AdvertisementData)
}
AdvertisementData::AdvertisementData(const AdvertisementData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      service_uuids_(from.service_uuids_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  manufacturer_data_.MergeFrom(from.manufacturer_data_);
  service_data_.MergeFrom(from.service_data_);
  local_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_local_name().empty()) {
    local_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_local_name(), 
      GetArena());
  }
  if (from._internal_has_tx_power_level()) {
    tx_power_level_ = new ::Int32Value(*from.tx_power_level_);
  } else {
    tx_power_level_ = nullptr;
  }
  connectable_ = from.connectable_;
  // @@protoc_insertion_point(copy_constructor:AdvertisementData)
}

void AdvertisementData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdvertisementData_flutterblue_2eproto.base);
  local_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tx_power_level_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&connectable_) -
      reinterpret_cast<char*>(&tx_power_level_)) + sizeof(connectable_));
}

AdvertisementData::~AdvertisementData() {
  // @@protoc_insertion_point(destructor:AdvertisementData)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AdvertisementData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  local_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tx_power_level_;
}

void AdvertisementData::ArenaDtor(void* object) {
  AdvertisementData* _this = reinterpret_cast< AdvertisementData* >(object);
  (void)_this;
}
void AdvertisementData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdvertisementData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdvertisementData& AdvertisementData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdvertisementData_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void AdvertisementData::Clear() {
// @@protoc_insertion_point(message_clear_start:AdvertisementData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manufacturer_data_.Clear();
  service_data_.Clear();
  service_uuids_.Clear();
  local_name_.ClearToEmpty();
  if (GetArena() == nullptr && tx_power_level_ != nullptr) {
    delete tx_power_level_;
  }
  tx_power_level_ = nullptr;
  connectable_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* AdvertisementData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string local_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_local_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Int32Value tx_power_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tx_power_level(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool connectable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          connectable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, bytes> manufacturer_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&manufacturer_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, bytes> service_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&service_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string service_uuids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_service_uuids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdvertisementData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AdvertisementData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string local_name = 1;
  if (this->local_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_name().data(), static_cast<int>(this->_internal_local_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AdvertisementData.local_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_local_name(), target);
  }

  // .Int32Value tx_power_level = 2;
  if (this->has_tx_power_level()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tx_power_level(this), target, stream);
  }

  // bool connectable = 3;
  if (this->connectable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_connectable(), target);
  }

  // map<int32, bytes> manufacturer_data = 4;
  if (!this->_internal_manufacturer_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_manufacturer_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_manufacturer_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_manufacturer_data().begin();
          it != this->_internal_manufacturer_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AdvertisementData_ManufacturerDataEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_manufacturer_data().begin();
          it != this->_internal_manufacturer_data().end(); ++it) {
        target = AdvertisementData_ManufacturerDataEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
      }
    }
  }

  // map<string, bytes> service_data = 5;
  if (!this->_internal_service_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "AdvertisementData.ServiceDataEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_service_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_service_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_service_data().begin();
          it != this->_internal_service_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AdvertisementData_ServiceDataEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_service_data().begin();
          it != this->_internal_service_data().end(); ++it) {
        target = AdvertisementData_ServiceDataEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated string service_uuids = 6;
  for (int i = 0, n = this->_internal_service_uuids_size(); i < n; i++) {
    const auto& s = this->_internal_service_uuids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AdvertisementData.service_uuids");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AdvertisementData)
  return target;
}

size_t AdvertisementData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AdvertisementData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, bytes> manufacturer_data = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_manufacturer_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
      it = this->_internal_manufacturer_data().begin();
      it != this->_internal_manufacturer_data().end(); ++it) {
    total_size += AdvertisementData_ManufacturerDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, bytes> service_data = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_service_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_service_data().begin();
      it != this->_internal_service_data().end(); ++it) {
    total_size += AdvertisementData_ServiceDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string service_uuids = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(service_uuids_.size());
  for (int i = 0, n = service_uuids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      service_uuids_.Get(i));
  }

  // string local_name = 1;
  if (this->local_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_name());
  }

  // .Int32Value tx_power_level = 2;
  if (this->has_tx_power_level()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tx_power_level_);
  }

  // bool connectable = 3;
  if (this->connectable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdvertisementData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AdvertisementData*>(
      &from));
}

void AdvertisementData::MergeFrom(const AdvertisementData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AdvertisementData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  manufacturer_data_.MergeFrom(from.manufacturer_data_);
  service_data_.MergeFrom(from.service_data_);
  service_uuids_.MergeFrom(from.service_uuids_);
  if (from.local_name().size() > 0) {
    _internal_set_local_name(from._internal_local_name());
  }
  if (from.has_tx_power_level()) {
    _internal_mutable_tx_power_level()->::Int32Value::MergeFrom(from._internal_tx_power_level());
  }
  if (from.connectable() != 0) {
    _internal_set_connectable(from._internal_connectable());
  }
}

void AdvertisementData::CopyFrom(const AdvertisementData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdvertisementData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvertisementData::IsInitialized() const {
  return true;
}

void AdvertisementData::InternalSwap(AdvertisementData* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  manufacturer_data_.Swap(&other->manufacturer_data_);
  service_data_.Swap(&other->service_data_);
  service_uuids_.InternalSwap(&other->service_uuids_);
  local_name_.Swap(&other->local_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdvertisementData, connectable_)
      + sizeof(AdvertisementData::connectable_)
      - PROTOBUF_FIELD_OFFSET(AdvertisementData, tx_power_level_)>(
          reinterpret_cast<char*>(&tx_power_level_),
          reinterpret_cast<char*>(&other->tx_power_level_));
}

std::string AdvertisementData::GetTypeName() const {
  return "AdvertisementData";
}


// ===================================================================

class ScanSettings::_Internal {
 public:
};

ScanSettings::ScanSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  service_uuids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ScanSettings)
}
ScanSettings::ScanSettings(const ScanSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      service_uuids_(from.service_uuids_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&android_scan_mode_, &from.android_scan_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_duplicates_) -
    reinterpret_cast<char*>(&android_scan_mode_)) + sizeof(allow_duplicates_));
  // @@protoc_insertion_point(copy_constructor:ScanSettings)
}

void ScanSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScanSettings_flutterblue_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&android_scan_mode_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&allow_duplicates_) -
      reinterpret_cast<char*>(&android_scan_mode_)) + sizeof(allow_duplicates_));
}

ScanSettings::~ScanSettings() {
  // @@protoc_insertion_point(destructor:ScanSettings)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ScanSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ScanSettings::ArenaDtor(void* object) {
  ScanSettings* _this = reinterpret_cast< ScanSettings* >(object);
  (void)_this;
}
void ScanSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScanSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScanSettings& ScanSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScanSettings_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void ScanSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:ScanSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_uuids_.Clear();
  ::memset(&android_scan_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_duplicates_) -
      reinterpret_cast<char*>(&android_scan_mode_)) + sizeof(allow_duplicates_));
  _internal_metadata_.Clear<std::string>();
}

const char* ScanSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 android_scan_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          android_scan_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string service_uuids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_service_uuids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool allow_duplicates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          allow_duplicates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScanSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ScanSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 android_scan_mode = 1;
  if (this->android_scan_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_android_scan_mode(), target);
  }

  // repeated string service_uuids = 2;
  for (int i = 0, n = this->_internal_service_uuids_size(); i < n; i++) {
    const auto& s = this->_internal_service_uuids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ScanSettings.service_uuids");
    target = stream->WriteString(2, s, target);
  }

  // bool allow_duplicates = 3;
  if (this->allow_duplicates() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_allow_duplicates(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScanSettings)
  return target;
}

size_t ScanSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ScanSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string service_uuids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(service_uuids_.size());
  for (int i = 0, n = service_uuids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      service_uuids_.Get(i));
  }

  // int32 android_scan_mode = 1;
  if (this->android_scan_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_android_scan_mode());
  }

  // bool allow_duplicates = 3;
  if (this->allow_duplicates() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScanSettings::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ScanSettings*>(
      &from));
}

void ScanSettings::MergeFrom(const ScanSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ScanSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  service_uuids_.MergeFrom(from.service_uuids_);
  if (from.android_scan_mode() != 0) {
    _internal_set_android_scan_mode(from._internal_android_scan_mode());
  }
  if (from.allow_duplicates() != 0) {
    _internal_set_allow_duplicates(from._internal_allow_duplicates());
  }
}

void ScanSettings::CopyFrom(const ScanSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ScanSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanSettings::IsInitialized() const {
  return true;
}

void ScanSettings::InternalSwap(ScanSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  service_uuids_.InternalSwap(&other->service_uuids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScanSettings, allow_duplicates_)
      + sizeof(ScanSettings::allow_duplicates_)
      - PROTOBUF_FIELD_OFFSET(ScanSettings, android_scan_mode_)>(
          reinterpret_cast<char*>(&android_scan_mode_),
          reinterpret_cast<char*>(&other->android_scan_mode_));
}

std::string ScanSettings::GetTypeName() const {
  return "ScanSettings";
}


// ===================================================================

class ScanResult::_Internal {
 public:
  static const ::BluetoothDevice& device(const ScanResult* msg);
  static const ::AdvertisementData& advertisement_data(const ScanResult* msg);
};

const ::BluetoothDevice&
ScanResult::_Internal::device(const ScanResult* msg) {
  return *msg->device_;
}
const ::AdvertisementData&
ScanResult::_Internal::advertisement_data(const ScanResult* msg) {
  return *msg->advertisement_data_;
}
ScanResult::ScanResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ScanResult)
}
ScanResult::ScanResult(const ScanResult& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_device()) {
    device_ = new ::BluetoothDevice(*from.device_);
  } else {
    device_ = nullptr;
  }
  if (from._internal_has_advertisement_data()) {
    advertisement_data_ = new ::AdvertisementData(*from.advertisement_data_);
  } else {
    advertisement_data_ = nullptr;
  }
  rssi_ = from.rssi_;
  // @@protoc_insertion_point(copy_constructor:ScanResult)
}

void ScanResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScanResult_flutterblue_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&device_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rssi_) -
      reinterpret_cast<char*>(&device_)) + sizeof(rssi_));
}

ScanResult::~ScanResult() {
  // @@protoc_insertion_point(destructor:ScanResult)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ScanResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete device_;
  if (this != internal_default_instance()) delete advertisement_data_;
}

void ScanResult::ArenaDtor(void* object) {
  ScanResult* _this = reinterpret_cast< ScanResult* >(object);
  (void)_this;
}
void ScanResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScanResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScanResult& ScanResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScanResult_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void ScanResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ScanResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  if (GetArena() == nullptr && advertisement_data_ != nullptr) {
    delete advertisement_data_;
  }
  advertisement_data_ = nullptr;
  rssi_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* ScanResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BluetoothDevice device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AdvertisementData advertisement_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_advertisement_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rssi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rssi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScanResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ScanResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BluetoothDevice device = 1;
  if (this->has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device(this), target, stream);
  }

  // .AdvertisementData advertisement_data = 2;
  if (this->has_advertisement_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::advertisement_data(this), target, stream);
  }

  // int32 rssi = 3;
  if (this->rssi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rssi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScanResult)
  return target;
}

size_t ScanResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ScanResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BluetoothDevice device = 1;
  if (this->has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  // .AdvertisementData advertisement_data = 2;
  if (this->has_advertisement_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advertisement_data_);
  }

  // int32 rssi = 3;
  if (this->rssi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rssi());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScanResult::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ScanResult*>(
      &from));
}

void ScanResult::MergeFrom(const ScanResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ScanResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device()) {
    _internal_mutable_device()->::BluetoothDevice::MergeFrom(from._internal_device());
  }
  if (from.has_advertisement_data()) {
    _internal_mutable_advertisement_data()->::AdvertisementData::MergeFrom(from._internal_advertisement_data());
  }
  if (from.rssi() != 0) {
    _internal_set_rssi(from._internal_rssi());
  }
}

void ScanResult::CopyFrom(const ScanResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ScanResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanResult::IsInitialized() const {
  return true;
}

void ScanResult::InternalSwap(ScanResult* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScanResult, rssi_)
      + sizeof(ScanResult::rssi_)
      - PROTOBUF_FIELD_OFFSET(ScanResult, device_)>(
          reinterpret_cast<char*>(&device_),
          reinterpret_cast<char*>(&other->device_));
}

std::string ScanResult::GetTypeName() const {
  return "ScanResult";
}


// ===================================================================

class ConnectRequest::_Internal {
 public:
};

ConnectRequest::ConnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ConnectRequest)
}
ConnectRequest::ConnectRequest(const ConnectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_id().empty()) {
    remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_id(), 
      GetArena());
  }
  android_auto_connect_ = from.android_auto_connect_;
  // @@protoc_insertion_point(copy_constructor:ConnectRequest)
}

void ConnectRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectRequest_flutterblue_2eproto.base);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  android_auto_connect_ = false;
}

ConnectRequest::~ConnectRequest() {
  // @@protoc_insertion_point(destructor:ConnectRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ConnectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  remote_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConnectRequest::ArenaDtor(void* object) {
  ConnectRequest* _this = reinterpret_cast< ConnectRequest* >(object);
  (void)_this;
}
void ConnectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectRequest& ConnectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectRequest_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void ConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ConnectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_id_.ClearToEmpty();
  android_auto_connect_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* ConnectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_remote_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool android_auto_connect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          android_auto_connect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConnectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_id().data(), static_cast<int>(this->_internal_remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConnectRequest.remote_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remote_id(), target);
  }

  // bool android_auto_connect = 2;
  if (this->android_auto_connect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_android_auto_connect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConnectRequest)
  return target;
}

size_t ConnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConnectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_id());
  }

  // bool android_auto_connect = 2;
  if (this->android_auto_connect() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ConnectRequest*>(
      &from));
}

void ConnectRequest::MergeFrom(const ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remote_id().size() > 0) {
    _internal_set_remote_id(from._internal_remote_id());
  }
  if (from.android_auto_connect() != 0) {
    _internal_set_android_auto_connect(from._internal_android_auto_connect());
  }
}

void ConnectRequest::CopyFrom(const ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRequest::IsInitialized() const {
  return true;
}

void ConnectRequest::InternalSwap(ConnectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  remote_id_.Swap(&other->remote_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(android_auto_connect_, other->android_auto_connect_);
}

std::string ConnectRequest::GetTypeName() const {
  return "ConnectRequest";
}


// ===================================================================

class BluetoothDevice::_Internal {
 public:
};

BluetoothDevice::BluetoothDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BluetoothDevice)
}
BluetoothDevice::BluetoothDevice(const BluetoothDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_id().empty()) {
    remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_id(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:BluetoothDevice)
}

void BluetoothDevice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BluetoothDevice_flutterblue_2eproto.base);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

BluetoothDevice::~BluetoothDevice() {
  // @@protoc_insertion_point(destructor:BluetoothDevice)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void BluetoothDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  remote_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BluetoothDevice::ArenaDtor(void* object) {
  BluetoothDevice* _this = reinterpret_cast< BluetoothDevice* >(object);
  (void)_this;
}
void BluetoothDevice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BluetoothDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BluetoothDevice& BluetoothDevice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BluetoothDevice_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void BluetoothDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:BluetoothDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_id_.ClearToEmpty();
  name_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* BluetoothDevice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_remote_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BluetoothDevice.Type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::BluetoothDevice_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BluetoothDevice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BluetoothDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_id().data(), static_cast<int>(this->_internal_remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BluetoothDevice.remote_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remote_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BluetoothDevice.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .BluetoothDevice.Type type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BluetoothDevice)
  return target;
}

size_t BluetoothDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BluetoothDevice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .BluetoothDevice.Type type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BluetoothDevice::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BluetoothDevice*>(
      &from));
}

void BluetoothDevice::MergeFrom(const BluetoothDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BluetoothDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remote_id().size() > 0) {
    _internal_set_remote_id(from._internal_remote_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void BluetoothDevice::CopyFrom(const BluetoothDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BluetoothDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BluetoothDevice::IsInitialized() const {
  return true;
}

void BluetoothDevice::InternalSwap(BluetoothDevice* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  remote_id_.Swap(&other->remote_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

std::string BluetoothDevice::GetTypeName() const {
  return "BluetoothDevice";
}


// ===================================================================

class BluetoothService::_Internal {
 public:
};

BluetoothService::BluetoothService(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  characteristics_(arena),
  included_services_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BluetoothService)
}
BluetoothService::BluetoothService(const BluetoothService& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      characteristics_(from.characteristics_),
      included_services_(from.included_services_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uuid(), 
      GetArena());
  }
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_id().empty()) {
    remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_id(), 
      GetArena());
  }
  is_primary_ = from.is_primary_;
  // @@protoc_insertion_point(copy_constructor:BluetoothService)
}

void BluetoothService::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BluetoothService_flutterblue_2eproto.base);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_primary_ = false;
}

BluetoothService::~BluetoothService() {
  // @@protoc_insertion_point(destructor:BluetoothService)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void BluetoothService::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BluetoothService::ArenaDtor(void* object) {
  BluetoothService* _this = reinterpret_cast< BluetoothService* >(object);
  (void)_this;
}
void BluetoothService::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BluetoothService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BluetoothService& BluetoothService::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BluetoothService_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void BluetoothService::Clear() {
// @@protoc_insertion_point(message_clear_start:BluetoothService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  characteristics_.Clear();
  included_services_.Clear();
  uuid_.ClearToEmpty();
  remote_id_.ClearToEmpty();
  is_primary_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* BluetoothService::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_remote_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_primary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_primary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BluetoothCharacteristic characteristics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_characteristics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .BluetoothService included_services = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_included_services(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BluetoothService::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BluetoothService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BluetoothService.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // string remote_id = 2;
  if (this->remote_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_id().data(), static_cast<int>(this->_internal_remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BluetoothService.remote_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_remote_id(), target);
  }

  // bool is_primary = 3;
  if (this->is_primary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_primary(), target);
  }

  // repeated .BluetoothCharacteristic characteristics = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_characteristics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_characteristics(i), target, stream);
  }

  // repeated .BluetoothService included_services = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_included_services_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_included_services(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BluetoothService)
  return target;
}

size_t BluetoothService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BluetoothService)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BluetoothCharacteristic characteristics = 4;
  total_size += 1UL * this->_internal_characteristics_size();
  for (const auto& msg : this->characteristics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .BluetoothService included_services = 5;
  total_size += 1UL * this->_internal_included_services_size();
  for (const auto& msg : this->included_services_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string remote_id = 2;
  if (this->remote_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_id());
  }

  // bool is_primary = 3;
  if (this->is_primary() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BluetoothService::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BluetoothService*>(
      &from));
}

void BluetoothService::MergeFrom(const BluetoothService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BluetoothService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  characteristics_.MergeFrom(from.characteristics_);
  included_services_.MergeFrom(from.included_services_);
  if (from.uuid().size() > 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from.remote_id().size() > 0) {
    _internal_set_remote_id(from._internal_remote_id());
  }
  if (from.is_primary() != 0) {
    _internal_set_is_primary(from._internal_is_primary());
  }
}

void BluetoothService::CopyFrom(const BluetoothService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BluetoothService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BluetoothService::IsInitialized() const {
  return true;
}

void BluetoothService::InternalSwap(BluetoothService* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  characteristics_.InternalSwap(&other->characteristics_);
  included_services_.InternalSwap(&other->included_services_);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  remote_id_.Swap(&other->remote_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_primary_, other->is_primary_);
}

std::string BluetoothService::GetTypeName() const {
  return "BluetoothService";
}


// ===================================================================

class BluetoothCharacteristic::_Internal {
 public:
  static const ::CharacteristicProperties& properties(const BluetoothCharacteristic* msg);
};

const ::CharacteristicProperties&
BluetoothCharacteristic::_Internal::properties(const BluetoothCharacteristic* msg) {
  return *msg->properties_;
}
BluetoothCharacteristic::BluetoothCharacteristic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  descriptors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BluetoothCharacteristic)
}
BluetoothCharacteristic::BluetoothCharacteristic(const BluetoothCharacteristic& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      descriptors_(from.descriptors_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uuid(), 
      GetArena());
  }
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_id().empty()) {
    remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_id(), 
      GetArena());
  }
  serviceuuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serviceuuid().empty()) {
    serviceuuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serviceuuid(), 
      GetArena());
  }
  secondaryserviceuuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secondaryserviceuuid().empty()) {
    secondaryserviceuuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secondaryserviceuuid(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  if (from._internal_has_properties()) {
    properties_ = new ::CharacteristicProperties(*from.properties_);
  } else {
    properties_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:BluetoothCharacteristic)
}

void BluetoothCharacteristic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BluetoothCharacteristic_flutterblue_2eproto.base);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serviceuuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secondaryserviceuuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  properties_ = nullptr;
}

BluetoothCharacteristic::~BluetoothCharacteristic() {
  // @@protoc_insertion_point(destructor:BluetoothCharacteristic)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void BluetoothCharacteristic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serviceuuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secondaryserviceuuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete properties_;
}

void BluetoothCharacteristic::ArenaDtor(void* object) {
  BluetoothCharacteristic* _this = reinterpret_cast< BluetoothCharacteristic* >(object);
  (void)_this;
}
void BluetoothCharacteristic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BluetoothCharacteristic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BluetoothCharacteristic& BluetoothCharacteristic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BluetoothCharacteristic_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void BluetoothCharacteristic::Clear() {
// @@protoc_insertion_point(message_clear_start:BluetoothCharacteristic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  descriptors_.Clear();
  uuid_.ClearToEmpty();
  remote_id_.ClearToEmpty();
  serviceuuid_.ClearToEmpty();
  secondaryserviceuuid_.ClearToEmpty();
  value_.ClearToEmpty();
  if (GetArena() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* BluetoothCharacteristic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_remote_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serviceUuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_serviceuuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secondaryServiceUuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_secondaryserviceuuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BluetoothDescriptor descriptors = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_descriptors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .CharacteristicProperties properties = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BluetoothCharacteristic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BluetoothCharacteristic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BluetoothCharacteristic.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // string remote_id = 2;
  if (this->remote_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_id().data(), static_cast<int>(this->_internal_remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BluetoothCharacteristic.remote_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_remote_id(), target);
  }

  // string serviceUuid = 3;
  if (this->serviceuuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serviceuuid().data(), static_cast<int>(this->_internal_serviceuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BluetoothCharacteristic.serviceUuid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_serviceuuid(), target);
  }

  // string secondaryServiceUuid = 4;
  if (this->secondaryserviceuuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secondaryserviceuuid().data(), static_cast<int>(this->_internal_secondaryserviceuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BluetoothCharacteristic.secondaryServiceUuid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_secondaryserviceuuid(), target);
  }

  // repeated .BluetoothDescriptor descriptors = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_descriptors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_descriptors(i), target, stream);
  }

  // .CharacteristicProperties properties = 6;
  if (this->has_properties()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::properties(this), target, stream);
  }

  // bytes value = 7;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BluetoothCharacteristic)
  return target;
}

size_t BluetoothCharacteristic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BluetoothCharacteristic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BluetoothDescriptor descriptors = 5;
  total_size += 1UL * this->_internal_descriptors_size();
  for (const auto& msg : this->descriptors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string remote_id = 2;
  if (this->remote_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_id());
  }

  // string serviceUuid = 3;
  if (this->serviceuuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serviceuuid());
  }

  // string secondaryServiceUuid = 4;
  if (this->secondaryserviceuuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secondaryserviceuuid());
  }

  // bytes value = 7;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // .CharacteristicProperties properties = 6;
  if (this->has_properties()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *properties_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BluetoothCharacteristic::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BluetoothCharacteristic*>(
      &from));
}

void BluetoothCharacteristic::MergeFrom(const BluetoothCharacteristic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BluetoothCharacteristic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  descriptors_.MergeFrom(from.descriptors_);
  if (from.uuid().size() > 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from.remote_id().size() > 0) {
    _internal_set_remote_id(from._internal_remote_id());
  }
  if (from.serviceuuid().size() > 0) {
    _internal_set_serviceuuid(from._internal_serviceuuid());
  }
  if (from.secondaryserviceuuid().size() > 0) {
    _internal_set_secondaryserviceuuid(from._internal_secondaryserviceuuid());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.has_properties()) {
    _internal_mutable_properties()->::CharacteristicProperties::MergeFrom(from._internal_properties());
  }
}

void BluetoothCharacteristic::CopyFrom(const BluetoothCharacteristic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BluetoothCharacteristic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BluetoothCharacteristic::IsInitialized() const {
  return true;
}

void BluetoothCharacteristic::InternalSwap(BluetoothCharacteristic* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  descriptors_.InternalSwap(&other->descriptors_);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  remote_id_.Swap(&other->remote_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serviceuuid_.Swap(&other->serviceuuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  secondaryserviceuuid_.Swap(&other->secondaryserviceuuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(properties_, other->properties_);
}

std::string BluetoothCharacteristic::GetTypeName() const {
  return "BluetoothCharacteristic";
}


// ===================================================================

class BluetoothDescriptor::_Internal {
 public:
};

BluetoothDescriptor::BluetoothDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BluetoothDescriptor)
}
BluetoothDescriptor::BluetoothDescriptor(const BluetoothDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uuid(), 
      GetArena());
  }
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_id().empty()) {
    remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_id(), 
      GetArena());
  }
  serviceuuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serviceuuid().empty()) {
    serviceuuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serviceuuid(), 
      GetArena());
  }
  characteristicuuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_characteristicuuid().empty()) {
    characteristicuuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_characteristicuuid(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:BluetoothDescriptor)
}

void BluetoothDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BluetoothDescriptor_flutterblue_2eproto.base);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serviceuuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  characteristicuuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BluetoothDescriptor::~BluetoothDescriptor() {
  // @@protoc_insertion_point(destructor:BluetoothDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void BluetoothDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serviceuuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  characteristicuuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BluetoothDescriptor::ArenaDtor(void* object) {
  BluetoothDescriptor* _this = reinterpret_cast< BluetoothDescriptor* >(object);
  (void)_this;
}
void BluetoothDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BluetoothDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BluetoothDescriptor& BluetoothDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BluetoothDescriptor_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void BluetoothDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:BluetoothDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmpty();
  remote_id_.ClearToEmpty();
  serviceuuid_.ClearToEmpty();
  characteristicuuid_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* BluetoothDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_remote_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serviceUuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_serviceuuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string characteristicUuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_characteristicuuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BluetoothDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BluetoothDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BluetoothDescriptor.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // string remote_id = 2;
  if (this->remote_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_id().data(), static_cast<int>(this->_internal_remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BluetoothDescriptor.remote_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_remote_id(), target);
  }

  // string serviceUuid = 3;
  if (this->serviceuuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serviceuuid().data(), static_cast<int>(this->_internal_serviceuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BluetoothDescriptor.serviceUuid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_serviceuuid(), target);
  }

  // string characteristicUuid = 4;
  if (this->characteristicuuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_characteristicuuid().data(), static_cast<int>(this->_internal_characteristicuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BluetoothDescriptor.characteristicUuid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_characteristicuuid(), target);
  }

  // bytes value = 5;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BluetoothDescriptor)
  return target;
}

size_t BluetoothDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BluetoothDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string remote_id = 2;
  if (this->remote_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_id());
  }

  // string serviceUuid = 3;
  if (this->serviceuuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serviceuuid());
  }

  // string characteristicUuid = 4;
  if (this->characteristicuuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_characteristicuuid());
  }

  // bytes value = 5;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BluetoothDescriptor::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BluetoothDescriptor*>(
      &from));
}

void BluetoothDescriptor::MergeFrom(const BluetoothDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BluetoothDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from.remote_id().size() > 0) {
    _internal_set_remote_id(from._internal_remote_id());
  }
  if (from.serviceuuid().size() > 0) {
    _internal_set_serviceuuid(from._internal_serviceuuid());
  }
  if (from.characteristicuuid().size() > 0) {
    _internal_set_characteristicuuid(from._internal_characteristicuuid());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void BluetoothDescriptor::CopyFrom(const BluetoothDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BluetoothDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BluetoothDescriptor::IsInitialized() const {
  return true;
}

void BluetoothDescriptor::InternalSwap(BluetoothDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  remote_id_.Swap(&other->remote_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serviceuuid_.Swap(&other->serviceuuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  characteristicuuid_.Swap(&other->characteristicuuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string BluetoothDescriptor::GetTypeName() const {
  return "BluetoothDescriptor";
}


// ===================================================================

class CharacteristicProperties::_Internal {
 public:
};

CharacteristicProperties::CharacteristicProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CharacteristicProperties)
}
CharacteristicProperties::CharacteristicProperties(const CharacteristicProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&broadcast_, &from.broadcast_,
    static_cast<size_t>(reinterpret_cast<char*>(&indicate_encryption_required_) -
    reinterpret_cast<char*>(&broadcast_)) + sizeof(indicate_encryption_required_));
  // @@protoc_insertion_point(copy_constructor:CharacteristicProperties)
}

void CharacteristicProperties::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&broadcast_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&indicate_encryption_required_) -
      reinterpret_cast<char*>(&broadcast_)) + sizeof(indicate_encryption_required_));
}

CharacteristicProperties::~CharacteristicProperties() {
  // @@protoc_insertion_point(destructor:CharacteristicProperties)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CharacteristicProperties::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CharacteristicProperties::ArenaDtor(void* object) {
  CharacteristicProperties* _this = reinterpret_cast< CharacteristicProperties* >(object);
  (void)_this;
}
void CharacteristicProperties::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CharacteristicProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CharacteristicProperties& CharacteristicProperties::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CharacteristicProperties_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void CharacteristicProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:CharacteristicProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&broadcast_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&indicate_encryption_required_) -
      reinterpret_cast<char*>(&broadcast_)) + sizeof(indicate_encryption_required_));
  _internal_metadata_.Clear<std::string>();
}

const char* CharacteristicProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool broadcast = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          broadcast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool read = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool write_without_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          write_without_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool write = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          write_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool notify = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          notify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool indicate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          indicate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool authenticated_signed_writes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          authenticated_signed_writes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool extended_properties = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          extended_properties_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool notify_encryption_required = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          notify_encryption_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool indicate_encryption_required = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          indicate_encryption_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CharacteristicProperties::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CharacteristicProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool broadcast = 1;
  if (this->broadcast() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_broadcast(), target);
  }

  // bool read = 2;
  if (this->read() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_read(), target);
  }

  // bool write_without_response = 3;
  if (this->write_without_response() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_write_without_response(), target);
  }

  // bool write = 4;
  if (this->write() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_write(), target);
  }

  // bool notify = 5;
  if (this->notify() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_notify(), target);
  }

  // bool indicate = 6;
  if (this->indicate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_indicate(), target);
  }

  // bool authenticated_signed_writes = 7;
  if (this->authenticated_signed_writes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_authenticated_signed_writes(), target);
  }

  // bool extended_properties = 8;
  if (this->extended_properties() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_extended_properties(), target);
  }

  // bool notify_encryption_required = 9;
  if (this->notify_encryption_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_notify_encryption_required(), target);
  }

  // bool indicate_encryption_required = 10;
  if (this->indicate_encryption_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_indicate_encryption_required(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CharacteristicProperties)
  return target;
}

size_t CharacteristicProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CharacteristicProperties)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool broadcast = 1;
  if (this->broadcast() != 0) {
    total_size += 1 + 1;
  }

  // bool read = 2;
  if (this->read() != 0) {
    total_size += 1 + 1;
  }

  // bool write_without_response = 3;
  if (this->write_without_response() != 0) {
    total_size += 1 + 1;
  }

  // bool write = 4;
  if (this->write() != 0) {
    total_size += 1 + 1;
  }

  // bool notify = 5;
  if (this->notify() != 0) {
    total_size += 1 + 1;
  }

  // bool indicate = 6;
  if (this->indicate() != 0) {
    total_size += 1 + 1;
  }

  // bool authenticated_signed_writes = 7;
  if (this->authenticated_signed_writes() != 0) {
    total_size += 1 + 1;
  }

  // bool extended_properties = 8;
  if (this->extended_properties() != 0) {
    total_size += 1 + 1;
  }

  // bool notify_encryption_required = 9;
  if (this->notify_encryption_required() != 0) {
    total_size += 1 + 1;
  }

  // bool indicate_encryption_required = 10;
  if (this->indicate_encryption_required() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CharacteristicProperties::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CharacteristicProperties*>(
      &from));
}

void CharacteristicProperties::MergeFrom(const CharacteristicProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CharacteristicProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.broadcast() != 0) {
    _internal_set_broadcast(from._internal_broadcast());
  }
  if (from.read() != 0) {
    _internal_set_read(from._internal_read());
  }
  if (from.write_without_response() != 0) {
    _internal_set_write_without_response(from._internal_write_without_response());
  }
  if (from.write() != 0) {
    _internal_set_write(from._internal_write());
  }
  if (from.notify() != 0) {
    _internal_set_notify(from._internal_notify());
  }
  if (from.indicate() != 0) {
    _internal_set_indicate(from._internal_indicate());
  }
  if (from.authenticated_signed_writes() != 0) {
    _internal_set_authenticated_signed_writes(from._internal_authenticated_signed_writes());
  }
  if (from.extended_properties() != 0) {
    _internal_set_extended_properties(from._internal_extended_properties());
  }
  if (from.notify_encryption_required() != 0) {
    _internal_set_notify_encryption_required(from._internal_notify_encryption_required());
  }
  if (from.indicate_encryption_required() != 0) {
    _internal_set_indicate_encryption_required(from._internal_indicate_encryption_required());
  }
}

void CharacteristicProperties::CopyFrom(const CharacteristicProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CharacteristicProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacteristicProperties::IsInitialized() const {
  return true;
}

void CharacteristicProperties::InternalSwap(CharacteristicProperties* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacteristicProperties, indicate_encryption_required_)
      + sizeof(CharacteristicProperties::indicate_encryption_required_)
      - PROTOBUF_FIELD_OFFSET(CharacteristicProperties, broadcast_)>(
          reinterpret_cast<char*>(&broadcast_),
          reinterpret_cast<char*>(&other->broadcast_));
}

std::string CharacteristicProperties::GetTypeName() const {
  return "CharacteristicProperties";
}


// ===================================================================

class DiscoverServicesResult::_Internal {
 public:
};

DiscoverServicesResult::DiscoverServicesResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  services_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DiscoverServicesResult)
}
DiscoverServicesResult::DiscoverServicesResult(const DiscoverServicesResult& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      services_(from.services_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_id().empty()) {
    remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:DiscoverServicesResult)
}

void DiscoverServicesResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiscoverServicesResult_flutterblue_2eproto.base);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiscoverServicesResult::~DiscoverServicesResult() {
  // @@protoc_insertion_point(destructor:DiscoverServicesResult)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DiscoverServicesResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  remote_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiscoverServicesResult::ArenaDtor(void* object) {
  DiscoverServicesResult* _this = reinterpret_cast< DiscoverServicesResult* >(object);
  (void)_this;
}
void DiscoverServicesResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiscoverServicesResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiscoverServicesResult& DiscoverServicesResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiscoverServicesResult_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void DiscoverServicesResult::Clear() {
// @@protoc_insertion_point(message_clear_start:DiscoverServicesResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  services_.Clear();
  remote_id_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* DiscoverServicesResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_remote_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BluetoothService services = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_services(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiscoverServicesResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DiscoverServicesResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_id().data(), static_cast<int>(this->_internal_remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DiscoverServicesResult.remote_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remote_id(), target);
  }

  // repeated .BluetoothService services = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_services_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_services(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DiscoverServicesResult)
  return target;
}

size_t DiscoverServicesResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DiscoverServicesResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BluetoothService services = 2;
  total_size += 1UL * this->_internal_services_size();
  for (const auto& msg : this->services_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiscoverServicesResult::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DiscoverServicesResult*>(
      &from));
}

void DiscoverServicesResult::MergeFrom(const DiscoverServicesResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DiscoverServicesResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  services_.MergeFrom(from.services_);
  if (from.remote_id().size() > 0) {
    _internal_set_remote_id(from._internal_remote_id());
  }
}

void DiscoverServicesResult::CopyFrom(const DiscoverServicesResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DiscoverServicesResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoverServicesResult::IsInitialized() const {
  return true;
}

void DiscoverServicesResult::InternalSwap(DiscoverServicesResult* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  services_.InternalSwap(&other->services_);
  remote_id_.Swap(&other->remote_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string DiscoverServicesResult::GetTypeName() const {
  return "DiscoverServicesResult";
}


// ===================================================================

class ReadCharacteristicRequest::_Internal {
 public:
};

ReadCharacteristicRequest::ReadCharacteristicRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReadCharacteristicRequest)
}
ReadCharacteristicRequest::ReadCharacteristicRequest(const ReadCharacteristicRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_id().empty()) {
    remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_id(), 
      GetArena());
  }
  characteristic_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_characteristic_uuid().empty()) {
    characteristic_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_characteristic_uuid(), 
      GetArena());
  }
  service_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_uuid().empty()) {
    service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_service_uuid(), 
      GetArena());
  }
  secondary_service_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secondary_service_uuid().empty()) {
    secondary_service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secondary_service_uuid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ReadCharacteristicRequest)
}

void ReadCharacteristicRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadCharacteristicRequest_flutterblue_2eproto.base);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  characteristic_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secondary_service_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReadCharacteristicRequest::~ReadCharacteristicRequest() {
  // @@protoc_insertion_point(destructor:ReadCharacteristicRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ReadCharacteristicRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  remote_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  characteristic_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secondary_service_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadCharacteristicRequest::ArenaDtor(void* object) {
  ReadCharacteristicRequest* _this = reinterpret_cast< ReadCharacteristicRequest* >(object);
  (void)_this;
}
void ReadCharacteristicRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadCharacteristicRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadCharacteristicRequest& ReadCharacteristicRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadCharacteristicRequest_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void ReadCharacteristicRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ReadCharacteristicRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_id_.ClearToEmpty();
  characteristic_uuid_.ClearToEmpty();
  service_uuid_.ClearToEmpty();
  secondary_service_uuid_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* ReadCharacteristicRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_remote_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string characteristic_uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_characteristic_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string service_uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_service_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secondary_service_uuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_secondary_service_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadCharacteristicRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReadCharacteristicRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_id().data(), static_cast<int>(this->_internal_remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReadCharacteristicRequest.remote_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remote_id(), target);
  }

  // string characteristic_uuid = 2;
  if (this->characteristic_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_characteristic_uuid().data(), static_cast<int>(this->_internal_characteristic_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReadCharacteristicRequest.characteristic_uuid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_characteristic_uuid(), target);
  }

  // string service_uuid = 3;
  if (this->service_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_uuid().data(), static_cast<int>(this->_internal_service_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReadCharacteristicRequest.service_uuid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_service_uuid(), target);
  }

  // string secondary_service_uuid = 4;
  if (this->secondary_service_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secondary_service_uuid().data(), static_cast<int>(this->_internal_secondary_service_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReadCharacteristicRequest.secondary_service_uuid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_secondary_service_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReadCharacteristicRequest)
  return target;
}

size_t ReadCharacteristicRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReadCharacteristicRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_id());
  }

  // string characteristic_uuid = 2;
  if (this->characteristic_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_characteristic_uuid());
  }

  // string service_uuid = 3;
  if (this->service_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_uuid());
  }

  // string secondary_service_uuid = 4;
  if (this->secondary_service_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secondary_service_uuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadCharacteristicRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ReadCharacteristicRequest*>(
      &from));
}

void ReadCharacteristicRequest::MergeFrom(const ReadCharacteristicRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReadCharacteristicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remote_id().size() > 0) {
    _internal_set_remote_id(from._internal_remote_id());
  }
  if (from.characteristic_uuid().size() > 0) {
    _internal_set_characteristic_uuid(from._internal_characteristic_uuid());
  }
  if (from.service_uuid().size() > 0) {
    _internal_set_service_uuid(from._internal_service_uuid());
  }
  if (from.secondary_service_uuid().size() > 0) {
    _internal_set_secondary_service_uuid(from._internal_secondary_service_uuid());
  }
}

void ReadCharacteristicRequest::CopyFrom(const ReadCharacteristicRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReadCharacteristicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadCharacteristicRequest::IsInitialized() const {
  return true;
}

void ReadCharacteristicRequest::InternalSwap(ReadCharacteristicRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  remote_id_.Swap(&other->remote_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  characteristic_uuid_.Swap(&other->characteristic_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  service_uuid_.Swap(&other->service_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  secondary_service_uuid_.Swap(&other->secondary_service_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string ReadCharacteristicRequest::GetTypeName() const {
  return "ReadCharacteristicRequest";
}


// ===================================================================

class ReadCharacteristicResponse::_Internal {
 public:
  static const ::BluetoothCharacteristic& characteristic(const ReadCharacteristicResponse* msg);
};

const ::BluetoothCharacteristic&
ReadCharacteristicResponse::_Internal::characteristic(const ReadCharacteristicResponse* msg) {
  return *msg->characteristic_;
}
ReadCharacteristicResponse::ReadCharacteristicResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReadCharacteristicResponse)
}
ReadCharacteristicResponse::ReadCharacteristicResponse(const ReadCharacteristicResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_id().empty()) {
    remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_id(), 
      GetArena());
  }
  if (from._internal_has_characteristic()) {
    characteristic_ = new ::BluetoothCharacteristic(*from.characteristic_);
  } else {
    characteristic_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ReadCharacteristicResponse)
}

void ReadCharacteristicResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadCharacteristicResponse_flutterblue_2eproto.base);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  characteristic_ = nullptr;
}

ReadCharacteristicResponse::~ReadCharacteristicResponse() {
  // @@protoc_insertion_point(destructor:ReadCharacteristicResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ReadCharacteristicResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  remote_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete characteristic_;
}

void ReadCharacteristicResponse::ArenaDtor(void* object) {
  ReadCharacteristicResponse* _this = reinterpret_cast< ReadCharacteristicResponse* >(object);
  (void)_this;
}
void ReadCharacteristicResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadCharacteristicResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadCharacteristicResponse& ReadCharacteristicResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadCharacteristicResponse_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void ReadCharacteristicResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ReadCharacteristicResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_id_.ClearToEmpty();
  if (GetArena() == nullptr && characteristic_ != nullptr) {
    delete characteristic_;
  }
  characteristic_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* ReadCharacteristicResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_remote_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BluetoothCharacteristic characteristic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_characteristic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadCharacteristicResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReadCharacteristicResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_id().data(), static_cast<int>(this->_internal_remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReadCharacteristicResponse.remote_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remote_id(), target);
  }

  // .BluetoothCharacteristic characteristic = 2;
  if (this->has_characteristic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::characteristic(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReadCharacteristicResponse)
  return target;
}

size_t ReadCharacteristicResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReadCharacteristicResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_id());
  }

  // .BluetoothCharacteristic characteristic = 2;
  if (this->has_characteristic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *characteristic_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadCharacteristicResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ReadCharacteristicResponse*>(
      &from));
}

void ReadCharacteristicResponse::MergeFrom(const ReadCharacteristicResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReadCharacteristicResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remote_id().size() > 0) {
    _internal_set_remote_id(from._internal_remote_id());
  }
  if (from.has_characteristic()) {
    _internal_mutable_characteristic()->::BluetoothCharacteristic::MergeFrom(from._internal_characteristic());
  }
}

void ReadCharacteristicResponse::CopyFrom(const ReadCharacteristicResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReadCharacteristicResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadCharacteristicResponse::IsInitialized() const {
  return true;
}

void ReadCharacteristicResponse::InternalSwap(ReadCharacteristicResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  remote_id_.Swap(&other->remote_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(characteristic_, other->characteristic_);
}

std::string ReadCharacteristicResponse::GetTypeName() const {
  return "ReadCharacteristicResponse";
}


// ===================================================================

class ReadDescriptorRequest::_Internal {
 public:
};

ReadDescriptorRequest::ReadDescriptorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReadDescriptorRequest)
}
ReadDescriptorRequest::ReadDescriptorRequest(const ReadDescriptorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_id().empty()) {
    remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_id(), 
      GetArena());
  }
  descriptor_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_descriptor_uuid().empty()) {
    descriptor_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_descriptor_uuid(), 
      GetArena());
  }
  service_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_uuid().empty()) {
    service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_service_uuid(), 
      GetArena());
  }
  secondary_service_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secondary_service_uuid().empty()) {
    secondary_service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secondary_service_uuid(), 
      GetArena());
  }
  characteristic_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_characteristic_uuid().empty()) {
    characteristic_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_characteristic_uuid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ReadDescriptorRequest)
}

void ReadDescriptorRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadDescriptorRequest_flutterblue_2eproto.base);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  descriptor_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secondary_service_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  characteristic_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReadDescriptorRequest::~ReadDescriptorRequest() {
  // @@protoc_insertion_point(destructor:ReadDescriptorRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ReadDescriptorRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  remote_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  descriptor_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secondary_service_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  characteristic_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadDescriptorRequest::ArenaDtor(void* object) {
  ReadDescriptorRequest* _this = reinterpret_cast< ReadDescriptorRequest* >(object);
  (void)_this;
}
void ReadDescriptorRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadDescriptorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadDescriptorRequest& ReadDescriptorRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadDescriptorRequest_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void ReadDescriptorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ReadDescriptorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_id_.ClearToEmpty();
  descriptor_uuid_.ClearToEmpty();
  service_uuid_.ClearToEmpty();
  secondary_service_uuid_.ClearToEmpty();
  characteristic_uuid_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* ReadDescriptorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_remote_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string descriptor_uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_descriptor_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string service_uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_service_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secondary_service_uuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_secondary_service_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string characteristic_uuid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_characteristic_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadDescriptorRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReadDescriptorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_id().data(), static_cast<int>(this->_internal_remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReadDescriptorRequest.remote_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remote_id(), target);
  }

  // string descriptor_uuid = 2;
  if (this->descriptor_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_descriptor_uuid().data(), static_cast<int>(this->_internal_descriptor_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReadDescriptorRequest.descriptor_uuid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_descriptor_uuid(), target);
  }

  // string service_uuid = 3;
  if (this->service_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_uuid().data(), static_cast<int>(this->_internal_service_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReadDescriptorRequest.service_uuid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_service_uuid(), target);
  }

  // string secondary_service_uuid = 4;
  if (this->secondary_service_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secondary_service_uuid().data(), static_cast<int>(this->_internal_secondary_service_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReadDescriptorRequest.secondary_service_uuid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_secondary_service_uuid(), target);
  }

  // string characteristic_uuid = 5;
  if (this->characteristic_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_characteristic_uuid().data(), static_cast<int>(this->_internal_characteristic_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReadDescriptorRequest.characteristic_uuid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_characteristic_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReadDescriptorRequest)
  return target;
}

size_t ReadDescriptorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReadDescriptorRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_id());
  }

  // string descriptor_uuid = 2;
  if (this->descriptor_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_descriptor_uuid());
  }

  // string service_uuid = 3;
  if (this->service_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_uuid());
  }

  // string secondary_service_uuid = 4;
  if (this->secondary_service_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secondary_service_uuid());
  }

  // string characteristic_uuid = 5;
  if (this->characteristic_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_characteristic_uuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadDescriptorRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ReadDescriptorRequest*>(
      &from));
}

void ReadDescriptorRequest::MergeFrom(const ReadDescriptorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReadDescriptorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remote_id().size() > 0) {
    _internal_set_remote_id(from._internal_remote_id());
  }
  if (from.descriptor_uuid().size() > 0) {
    _internal_set_descriptor_uuid(from._internal_descriptor_uuid());
  }
  if (from.service_uuid().size() > 0) {
    _internal_set_service_uuid(from._internal_service_uuid());
  }
  if (from.secondary_service_uuid().size() > 0) {
    _internal_set_secondary_service_uuid(from._internal_secondary_service_uuid());
  }
  if (from.characteristic_uuid().size() > 0) {
    _internal_set_characteristic_uuid(from._internal_characteristic_uuid());
  }
}

void ReadDescriptorRequest::CopyFrom(const ReadDescriptorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReadDescriptorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadDescriptorRequest::IsInitialized() const {
  return true;
}

void ReadDescriptorRequest::InternalSwap(ReadDescriptorRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  remote_id_.Swap(&other->remote_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  descriptor_uuid_.Swap(&other->descriptor_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  service_uuid_.Swap(&other->service_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  secondary_service_uuid_.Swap(&other->secondary_service_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  characteristic_uuid_.Swap(&other->characteristic_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string ReadDescriptorRequest::GetTypeName() const {
  return "ReadDescriptorRequest";
}


// ===================================================================

class ReadDescriptorResponse::_Internal {
 public:
  static const ::ReadDescriptorRequest& request(const ReadDescriptorResponse* msg);
};

const ::ReadDescriptorRequest&
ReadDescriptorResponse::_Internal::request(const ReadDescriptorResponse* msg) {
  return *msg->request_;
}
ReadDescriptorResponse::ReadDescriptorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReadDescriptorResponse)
}
ReadDescriptorResponse::ReadDescriptorResponse(const ReadDescriptorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  if (from._internal_has_request()) {
    request_ = new ::ReadDescriptorRequest(*from.request_);
  } else {
    request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ReadDescriptorResponse)
}

void ReadDescriptorResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadDescriptorResponse_flutterblue_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_ = nullptr;
}

ReadDescriptorResponse::~ReadDescriptorResponse() {
  // @@protoc_insertion_point(destructor:ReadDescriptorResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ReadDescriptorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete request_;
}

void ReadDescriptorResponse::ArenaDtor(void* object) {
  ReadDescriptorResponse* _this = reinterpret_cast< ReadDescriptorResponse* >(object);
  (void)_this;
}
void ReadDescriptorResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadDescriptorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadDescriptorResponse& ReadDescriptorResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadDescriptorResponse_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void ReadDescriptorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ReadDescriptorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  if (GetArena() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* ReadDescriptorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ReadDescriptorRequest request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadDescriptorResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReadDescriptorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ReadDescriptorRequest request = 1;
  if (this->has_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::request(this), target, stream);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReadDescriptorResponse)
  return target;
}

size_t ReadDescriptorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReadDescriptorResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // .ReadDescriptorRequest request = 1;
  if (this->has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadDescriptorResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ReadDescriptorResponse*>(
      &from));
}

void ReadDescriptorResponse::MergeFrom(const ReadDescriptorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReadDescriptorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.has_request()) {
    _internal_mutable_request()->::ReadDescriptorRequest::MergeFrom(from._internal_request());
  }
}

void ReadDescriptorResponse::CopyFrom(const ReadDescriptorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReadDescriptorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadDescriptorResponse::IsInitialized() const {
  return true;
}

void ReadDescriptorResponse::InternalSwap(ReadDescriptorResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(request_, other->request_);
}

std::string ReadDescriptorResponse::GetTypeName() const {
  return "ReadDescriptorResponse";
}


// ===================================================================

class WriteCharacteristicRequest::_Internal {
 public:
};

WriteCharacteristicRequest::WriteCharacteristicRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:WriteCharacteristicRequest)
}
WriteCharacteristicRequest::WriteCharacteristicRequest(const WriteCharacteristicRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_id().empty()) {
    remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_id(), 
      GetArena());
  }
  characteristic_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_characteristic_uuid().empty()) {
    characteristic_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_characteristic_uuid(), 
      GetArena());
  }
  service_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_uuid().empty()) {
    service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_service_uuid(), 
      GetArena());
  }
  secondary_service_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secondary_service_uuid().empty()) {
    secondary_service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secondary_service_uuid(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  write_type_ = from.write_type_;
  // @@protoc_insertion_point(copy_constructor:WriteCharacteristicRequest)
}

void WriteCharacteristicRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteCharacteristicRequest_flutterblue_2eproto.base);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  characteristic_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secondary_service_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  write_type_ = 0;
}

WriteCharacteristicRequest::~WriteCharacteristicRequest() {
  // @@protoc_insertion_point(destructor:WriteCharacteristicRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void WriteCharacteristicRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  remote_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  characteristic_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secondary_service_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriteCharacteristicRequest::ArenaDtor(void* object) {
  WriteCharacteristicRequest* _this = reinterpret_cast< WriteCharacteristicRequest* >(object);
  (void)_this;
}
void WriteCharacteristicRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteCharacteristicRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteCharacteristicRequest& WriteCharacteristicRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteCharacteristicRequest_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void WriteCharacteristicRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:WriteCharacteristicRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_id_.ClearToEmpty();
  characteristic_uuid_.ClearToEmpty();
  service_uuid_.ClearToEmpty();
  secondary_service_uuid_.ClearToEmpty();
  value_.ClearToEmpty();
  write_type_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* WriteCharacteristicRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_remote_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string characteristic_uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_characteristic_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string service_uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_service_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secondary_service_uuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_secondary_service_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .WriteCharacteristicRequest.WriteType write_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_write_type(static_cast<::WriteCharacteristicRequest_WriteType>(val));
        } else goto handle_unusual;
        continue;
      // bytes value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteCharacteristicRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WriteCharacteristicRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_id().data(), static_cast<int>(this->_internal_remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WriteCharacteristicRequest.remote_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remote_id(), target);
  }

  // string characteristic_uuid = 2;
  if (this->characteristic_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_characteristic_uuid().data(), static_cast<int>(this->_internal_characteristic_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WriteCharacteristicRequest.characteristic_uuid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_characteristic_uuid(), target);
  }

  // string service_uuid = 3;
  if (this->service_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_uuid().data(), static_cast<int>(this->_internal_service_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WriteCharacteristicRequest.service_uuid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_service_uuid(), target);
  }

  // string secondary_service_uuid = 4;
  if (this->secondary_service_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secondary_service_uuid().data(), static_cast<int>(this->_internal_secondary_service_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WriteCharacteristicRequest.secondary_service_uuid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_secondary_service_uuid(), target);
  }

  // .WriteCharacteristicRequest.WriteType write_type = 5;
  if (this->write_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_write_type(), target);
  }

  // bytes value = 6;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WriteCharacteristicRequest)
  return target;
}

size_t WriteCharacteristicRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WriteCharacteristicRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_id());
  }

  // string characteristic_uuid = 2;
  if (this->characteristic_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_characteristic_uuid());
  }

  // string service_uuid = 3;
  if (this->service_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_uuid());
  }

  // string secondary_service_uuid = 4;
  if (this->secondary_service_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secondary_service_uuid());
  }

  // bytes value = 6;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // .WriteCharacteristicRequest.WriteType write_type = 5;
  if (this->write_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_write_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteCharacteristicRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WriteCharacteristicRequest*>(
      &from));
}

void WriteCharacteristicRequest::MergeFrom(const WriteCharacteristicRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WriteCharacteristicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remote_id().size() > 0) {
    _internal_set_remote_id(from._internal_remote_id());
  }
  if (from.characteristic_uuid().size() > 0) {
    _internal_set_characteristic_uuid(from._internal_characteristic_uuid());
  }
  if (from.service_uuid().size() > 0) {
    _internal_set_service_uuid(from._internal_service_uuid());
  }
  if (from.secondary_service_uuid().size() > 0) {
    _internal_set_secondary_service_uuid(from._internal_secondary_service_uuid());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.write_type() != 0) {
    _internal_set_write_type(from._internal_write_type());
  }
}

void WriteCharacteristicRequest::CopyFrom(const WriteCharacteristicRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WriteCharacteristicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteCharacteristicRequest::IsInitialized() const {
  return true;
}

void WriteCharacteristicRequest::InternalSwap(WriteCharacteristicRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  remote_id_.Swap(&other->remote_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  characteristic_uuid_.Swap(&other->characteristic_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  service_uuid_.Swap(&other->service_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  secondary_service_uuid_.Swap(&other->secondary_service_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(write_type_, other->write_type_);
}

std::string WriteCharacteristicRequest::GetTypeName() const {
  return "WriteCharacteristicRequest";
}


// ===================================================================

class WriteCharacteristicResponse::_Internal {
 public:
  static const ::WriteCharacteristicRequest& request(const WriteCharacteristicResponse* msg);
};

const ::WriteCharacteristicRequest&
WriteCharacteristicResponse::_Internal::request(const WriteCharacteristicResponse* msg) {
  return *msg->request_;
}
WriteCharacteristicResponse::WriteCharacteristicResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:WriteCharacteristicResponse)
}
WriteCharacteristicResponse::WriteCharacteristicResponse(const WriteCharacteristicResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_request()) {
    request_ = new ::WriteCharacteristicRequest(*from.request_);
  } else {
    request_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:WriteCharacteristicResponse)
}

void WriteCharacteristicResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteCharacteristicResponse_flutterblue_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&request_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&request_)) + sizeof(success_));
}

WriteCharacteristicResponse::~WriteCharacteristicResponse() {
  // @@protoc_insertion_point(destructor:WriteCharacteristicResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void WriteCharacteristicResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete request_;
}

void WriteCharacteristicResponse::ArenaDtor(void* object) {
  WriteCharacteristicResponse* _this = reinterpret_cast< WriteCharacteristicResponse* >(object);
  (void)_this;
}
void WriteCharacteristicResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteCharacteristicResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteCharacteristicResponse& WriteCharacteristicResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteCharacteristicResponse_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void WriteCharacteristicResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:WriteCharacteristicResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* WriteCharacteristicResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .WriteCharacteristicRequest request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteCharacteristicResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WriteCharacteristicResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .WriteCharacteristicRequest request = 1;
  if (this->has_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::request(this), target, stream);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WriteCharacteristicResponse)
  return target;
}

size_t WriteCharacteristicResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WriteCharacteristicResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .WriteCharacteristicRequest request = 1;
  if (this->has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteCharacteristicResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WriteCharacteristicResponse*>(
      &from));
}

void WriteCharacteristicResponse::MergeFrom(const WriteCharacteristicResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WriteCharacteristicResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_request()) {
    _internal_mutable_request()->::WriteCharacteristicRequest::MergeFrom(from._internal_request());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void WriteCharacteristicResponse::CopyFrom(const WriteCharacteristicResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WriteCharacteristicResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteCharacteristicResponse::IsInitialized() const {
  return true;
}

void WriteCharacteristicResponse::InternalSwap(WriteCharacteristicResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriteCharacteristicResponse, success_)
      + sizeof(WriteCharacteristicResponse::success_)
      - PROTOBUF_FIELD_OFFSET(WriteCharacteristicResponse, request_)>(
          reinterpret_cast<char*>(&request_),
          reinterpret_cast<char*>(&other->request_));
}

std::string WriteCharacteristicResponse::GetTypeName() const {
  return "WriteCharacteristicResponse";
}


// ===================================================================

class WriteDescriptorRequest::_Internal {
 public:
};

WriteDescriptorRequest::WriteDescriptorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:WriteDescriptorRequest)
}
WriteDescriptorRequest::WriteDescriptorRequest(const WriteDescriptorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_id().empty()) {
    remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_id(), 
      GetArena());
  }
  descriptor_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_descriptor_uuid().empty()) {
    descriptor_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_descriptor_uuid(), 
      GetArena());
  }
  service_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_uuid().empty()) {
    service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_service_uuid(), 
      GetArena());
  }
  secondary_service_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secondary_service_uuid().empty()) {
    secondary_service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secondary_service_uuid(), 
      GetArena());
  }
  characteristic_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_characteristic_uuid().empty()) {
    characteristic_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_characteristic_uuid(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:WriteDescriptorRequest)
}

void WriteDescriptorRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteDescriptorRequest_flutterblue_2eproto.base);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  descriptor_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secondary_service_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  characteristic_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WriteDescriptorRequest::~WriteDescriptorRequest() {
  // @@protoc_insertion_point(destructor:WriteDescriptorRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void WriteDescriptorRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  remote_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  descriptor_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secondary_service_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  characteristic_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriteDescriptorRequest::ArenaDtor(void* object) {
  WriteDescriptorRequest* _this = reinterpret_cast< WriteDescriptorRequest* >(object);
  (void)_this;
}
void WriteDescriptorRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteDescriptorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteDescriptorRequest& WriteDescriptorRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteDescriptorRequest_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void WriteDescriptorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:WriteDescriptorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_id_.ClearToEmpty();
  descriptor_uuid_.ClearToEmpty();
  service_uuid_.ClearToEmpty();
  secondary_service_uuid_.ClearToEmpty();
  characteristic_uuid_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* WriteDescriptorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_remote_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string descriptor_uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_descriptor_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string service_uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_service_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secondary_service_uuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_secondary_service_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string characteristic_uuid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_characteristic_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteDescriptorRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WriteDescriptorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_id().data(), static_cast<int>(this->_internal_remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WriteDescriptorRequest.remote_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remote_id(), target);
  }

  // string descriptor_uuid = 2;
  if (this->descriptor_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_descriptor_uuid().data(), static_cast<int>(this->_internal_descriptor_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WriteDescriptorRequest.descriptor_uuid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_descriptor_uuid(), target);
  }

  // string service_uuid = 3;
  if (this->service_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_uuid().data(), static_cast<int>(this->_internal_service_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WriteDescriptorRequest.service_uuid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_service_uuid(), target);
  }

  // string secondary_service_uuid = 4;
  if (this->secondary_service_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secondary_service_uuid().data(), static_cast<int>(this->_internal_secondary_service_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WriteDescriptorRequest.secondary_service_uuid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_secondary_service_uuid(), target);
  }

  // string characteristic_uuid = 5;
  if (this->characteristic_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_characteristic_uuid().data(), static_cast<int>(this->_internal_characteristic_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WriteDescriptorRequest.characteristic_uuid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_characteristic_uuid(), target);
  }

  // bytes value = 6;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WriteDescriptorRequest)
  return target;
}

size_t WriteDescriptorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WriteDescriptorRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_id());
  }

  // string descriptor_uuid = 2;
  if (this->descriptor_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_descriptor_uuid());
  }

  // string service_uuid = 3;
  if (this->service_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_uuid());
  }

  // string secondary_service_uuid = 4;
  if (this->secondary_service_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secondary_service_uuid());
  }

  // string characteristic_uuid = 5;
  if (this->characteristic_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_characteristic_uuid());
  }

  // bytes value = 6;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteDescriptorRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WriteDescriptorRequest*>(
      &from));
}

void WriteDescriptorRequest::MergeFrom(const WriteDescriptorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WriteDescriptorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remote_id().size() > 0) {
    _internal_set_remote_id(from._internal_remote_id());
  }
  if (from.descriptor_uuid().size() > 0) {
    _internal_set_descriptor_uuid(from._internal_descriptor_uuid());
  }
  if (from.service_uuid().size() > 0) {
    _internal_set_service_uuid(from._internal_service_uuid());
  }
  if (from.secondary_service_uuid().size() > 0) {
    _internal_set_secondary_service_uuid(from._internal_secondary_service_uuid());
  }
  if (from.characteristic_uuid().size() > 0) {
    _internal_set_characteristic_uuid(from._internal_characteristic_uuid());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void WriteDescriptorRequest::CopyFrom(const WriteDescriptorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WriteDescriptorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteDescriptorRequest::IsInitialized() const {
  return true;
}

void WriteDescriptorRequest::InternalSwap(WriteDescriptorRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  remote_id_.Swap(&other->remote_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  descriptor_uuid_.Swap(&other->descriptor_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  service_uuid_.Swap(&other->service_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  secondary_service_uuid_.Swap(&other->secondary_service_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  characteristic_uuid_.Swap(&other->characteristic_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string WriteDescriptorRequest::GetTypeName() const {
  return "WriteDescriptorRequest";
}


// ===================================================================

class WriteDescriptorResponse::_Internal {
 public:
  static const ::WriteDescriptorRequest& request(const WriteDescriptorResponse* msg);
};

const ::WriteDescriptorRequest&
WriteDescriptorResponse::_Internal::request(const WriteDescriptorResponse* msg) {
  return *msg->request_;
}
WriteDescriptorResponse::WriteDescriptorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:WriteDescriptorResponse)
}
WriteDescriptorResponse::WriteDescriptorResponse(const WriteDescriptorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_request()) {
    request_ = new ::WriteDescriptorRequest(*from.request_);
  } else {
    request_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:WriteDescriptorResponse)
}

void WriteDescriptorResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteDescriptorResponse_flutterblue_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&request_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&request_)) + sizeof(success_));
}

WriteDescriptorResponse::~WriteDescriptorResponse() {
  // @@protoc_insertion_point(destructor:WriteDescriptorResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void WriteDescriptorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete request_;
}

void WriteDescriptorResponse::ArenaDtor(void* object) {
  WriteDescriptorResponse* _this = reinterpret_cast< WriteDescriptorResponse* >(object);
  (void)_this;
}
void WriteDescriptorResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteDescriptorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteDescriptorResponse& WriteDescriptorResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteDescriptorResponse_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void WriteDescriptorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:WriteDescriptorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* WriteDescriptorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .WriteDescriptorRequest request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteDescriptorResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WriteDescriptorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .WriteDescriptorRequest request = 1;
  if (this->has_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::request(this), target, stream);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WriteDescriptorResponse)
  return target;
}

size_t WriteDescriptorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WriteDescriptorResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .WriteDescriptorRequest request = 1;
  if (this->has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteDescriptorResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WriteDescriptorResponse*>(
      &from));
}

void WriteDescriptorResponse::MergeFrom(const WriteDescriptorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WriteDescriptorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_request()) {
    _internal_mutable_request()->::WriteDescriptorRequest::MergeFrom(from._internal_request());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void WriteDescriptorResponse::CopyFrom(const WriteDescriptorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WriteDescriptorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteDescriptorResponse::IsInitialized() const {
  return true;
}

void WriteDescriptorResponse::InternalSwap(WriteDescriptorResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriteDescriptorResponse, success_)
      + sizeof(WriteDescriptorResponse::success_)
      - PROTOBUF_FIELD_OFFSET(WriteDescriptorResponse, request_)>(
          reinterpret_cast<char*>(&request_),
          reinterpret_cast<char*>(&other->request_));
}

std::string WriteDescriptorResponse::GetTypeName() const {
  return "WriteDescriptorResponse";
}


// ===================================================================

class SetNotificationRequest::_Internal {
 public:
};

SetNotificationRequest::SetNotificationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SetNotificationRequest)
}
SetNotificationRequest::SetNotificationRequest(const SetNotificationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_id().empty()) {
    remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_id(), 
      GetArena());
  }
  service_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_uuid().empty()) {
    service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_service_uuid(), 
      GetArena());
  }
  secondary_service_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secondary_service_uuid().empty()) {
    secondary_service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secondary_service_uuid(), 
      GetArena());
  }
  characteristic_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_characteristic_uuid().empty()) {
    characteristic_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_characteristic_uuid(), 
      GetArena());
  }
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:SetNotificationRequest)
}

void SetNotificationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetNotificationRequest_flutterblue_2eproto.base);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secondary_service_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  characteristic_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enable_ = false;
}

SetNotificationRequest::~SetNotificationRequest() {
  // @@protoc_insertion_point(destructor:SetNotificationRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetNotificationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  remote_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secondary_service_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  characteristic_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetNotificationRequest::ArenaDtor(void* object) {
  SetNotificationRequest* _this = reinterpret_cast< SetNotificationRequest* >(object);
  (void)_this;
}
void SetNotificationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetNotificationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetNotificationRequest& SetNotificationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetNotificationRequest_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void SetNotificationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SetNotificationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_id_.ClearToEmpty();
  service_uuid_.ClearToEmpty();
  secondary_service_uuid_.ClearToEmpty();
  characteristic_uuid_.ClearToEmpty();
  enable_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* SetNotificationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_remote_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string service_uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_service_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secondary_service_uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_secondary_service_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string characteristic_uuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_characteristic_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetNotificationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetNotificationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_id().data(), static_cast<int>(this->_internal_remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SetNotificationRequest.remote_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remote_id(), target);
  }

  // string service_uuid = 2;
  if (this->service_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_uuid().data(), static_cast<int>(this->_internal_service_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SetNotificationRequest.service_uuid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_service_uuid(), target);
  }

  // string secondary_service_uuid = 3;
  if (this->secondary_service_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secondary_service_uuid().data(), static_cast<int>(this->_internal_secondary_service_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SetNotificationRequest.secondary_service_uuid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_secondary_service_uuid(), target);
  }

  // string characteristic_uuid = 4;
  if (this->characteristic_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_characteristic_uuid().data(), static_cast<int>(this->_internal_characteristic_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SetNotificationRequest.characteristic_uuid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_characteristic_uuid(), target);
  }

  // bool enable = 5;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetNotificationRequest)
  return target;
}

size_t SetNotificationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetNotificationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_id());
  }

  // string service_uuid = 2;
  if (this->service_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_uuid());
  }

  // string secondary_service_uuid = 3;
  if (this->secondary_service_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secondary_service_uuid());
  }

  // string characteristic_uuid = 4;
  if (this->characteristic_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_characteristic_uuid());
  }

  // bool enable = 5;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetNotificationRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetNotificationRequest*>(
      &from));
}

void SetNotificationRequest::MergeFrom(const SetNotificationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetNotificationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remote_id().size() > 0) {
    _internal_set_remote_id(from._internal_remote_id());
  }
  if (from.service_uuid().size() > 0) {
    _internal_set_service_uuid(from._internal_service_uuid());
  }
  if (from.secondary_service_uuid().size() > 0) {
    _internal_set_secondary_service_uuid(from._internal_secondary_service_uuid());
  }
  if (from.characteristic_uuid().size() > 0) {
    _internal_set_characteristic_uuid(from._internal_characteristic_uuid());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
}

void SetNotificationRequest::CopyFrom(const SetNotificationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetNotificationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetNotificationRequest::IsInitialized() const {
  return true;
}

void SetNotificationRequest::InternalSwap(SetNotificationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  remote_id_.Swap(&other->remote_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  service_uuid_.Swap(&other->service_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  secondary_service_uuid_.Swap(&other->secondary_service_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  characteristic_uuid_.Swap(&other->characteristic_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(enable_, other->enable_);
}

std::string SetNotificationRequest::GetTypeName() const {
  return "SetNotificationRequest";
}


// ===================================================================

class SetNotificationResponse::_Internal {
 public:
  static const ::BluetoothCharacteristic& characteristic(const SetNotificationResponse* msg);
};

const ::BluetoothCharacteristic&
SetNotificationResponse::_Internal::characteristic(const SetNotificationResponse* msg) {
  return *msg->characteristic_;
}
SetNotificationResponse::SetNotificationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SetNotificationResponse)
}
SetNotificationResponse::SetNotificationResponse(const SetNotificationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_id().empty()) {
    remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_id(), 
      GetArena());
  }
  if (from._internal_has_characteristic()) {
    characteristic_ = new ::BluetoothCharacteristic(*from.characteristic_);
  } else {
    characteristic_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:SetNotificationResponse)
}

void SetNotificationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetNotificationResponse_flutterblue_2eproto.base);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&characteristic_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&characteristic_)) + sizeof(success_));
}

SetNotificationResponse::~SetNotificationResponse() {
  // @@protoc_insertion_point(destructor:SetNotificationResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetNotificationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  remote_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete characteristic_;
}

void SetNotificationResponse::ArenaDtor(void* object) {
  SetNotificationResponse* _this = reinterpret_cast< SetNotificationResponse* >(object);
  (void)_this;
}
void SetNotificationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetNotificationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetNotificationResponse& SetNotificationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetNotificationResponse_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void SetNotificationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SetNotificationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_id_.ClearToEmpty();
  if (GetArena() == nullptr && characteristic_ != nullptr) {
    delete characteristic_;
  }
  characteristic_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* SetNotificationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_remote_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BluetoothCharacteristic characteristic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_characteristic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetNotificationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetNotificationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_id().data(), static_cast<int>(this->_internal_remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SetNotificationResponse.remote_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remote_id(), target);
  }

  // .BluetoothCharacteristic characteristic = 2;
  if (this->has_characteristic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::characteristic(this), target, stream);
  }

  // bool success = 3;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetNotificationResponse)
  return target;
}

size_t SetNotificationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetNotificationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_id());
  }

  // .BluetoothCharacteristic characteristic = 2;
  if (this->has_characteristic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *characteristic_);
  }

  // bool success = 3;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetNotificationResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetNotificationResponse*>(
      &from));
}

void SetNotificationResponse::MergeFrom(const SetNotificationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetNotificationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remote_id().size() > 0) {
    _internal_set_remote_id(from._internal_remote_id());
  }
  if (from.has_characteristic()) {
    _internal_mutable_characteristic()->::BluetoothCharacteristic::MergeFrom(from._internal_characteristic());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void SetNotificationResponse::CopyFrom(const SetNotificationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetNotificationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetNotificationResponse::IsInitialized() const {
  return true;
}

void SetNotificationResponse::InternalSwap(SetNotificationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  remote_id_.Swap(&other->remote_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetNotificationResponse, success_)
      + sizeof(SetNotificationResponse::success_)
      - PROTOBUF_FIELD_OFFSET(SetNotificationResponse, characteristic_)>(
          reinterpret_cast<char*>(&characteristic_),
          reinterpret_cast<char*>(&other->characteristic_));
}

std::string SetNotificationResponse::GetTypeName() const {
  return "SetNotificationResponse";
}


// ===================================================================

class OnCharacteristicChanged::_Internal {
 public:
  static const ::BluetoothCharacteristic& characteristic(const OnCharacteristicChanged* msg);
};

const ::BluetoothCharacteristic&
OnCharacteristicChanged::_Internal::characteristic(const OnCharacteristicChanged* msg) {
  return *msg->characteristic_;
}
OnCharacteristicChanged::OnCharacteristicChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OnCharacteristicChanged)
}
OnCharacteristicChanged::OnCharacteristicChanged(const OnCharacteristicChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_id().empty()) {
    remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_id(), 
      GetArena());
  }
  if (from._internal_has_characteristic()) {
    characteristic_ = new ::BluetoothCharacteristic(*from.characteristic_);
  } else {
    characteristic_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OnCharacteristicChanged)
}

void OnCharacteristicChanged::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OnCharacteristicChanged_flutterblue_2eproto.base);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  characteristic_ = nullptr;
}

OnCharacteristicChanged::~OnCharacteristicChanged() {
  // @@protoc_insertion_point(destructor:OnCharacteristicChanged)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void OnCharacteristicChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  remote_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete characteristic_;
}

void OnCharacteristicChanged::ArenaDtor(void* object) {
  OnCharacteristicChanged* _this = reinterpret_cast< OnCharacteristicChanged* >(object);
  (void)_this;
}
void OnCharacteristicChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OnCharacteristicChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnCharacteristicChanged& OnCharacteristicChanged::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OnCharacteristicChanged_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void OnCharacteristicChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:OnCharacteristicChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_id_.ClearToEmpty();
  if (GetArena() == nullptr && characteristic_ != nullptr) {
    delete characteristic_;
  }
  characteristic_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* OnCharacteristicChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_remote_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BluetoothCharacteristic characteristic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_characteristic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OnCharacteristicChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OnCharacteristicChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_id().data(), static_cast<int>(this->_internal_remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OnCharacteristicChanged.remote_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remote_id(), target);
  }

  // .BluetoothCharacteristic characteristic = 2;
  if (this->has_characteristic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::characteristic(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OnCharacteristicChanged)
  return target;
}

size_t OnCharacteristicChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OnCharacteristicChanged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_id());
  }

  // .BluetoothCharacteristic characteristic = 2;
  if (this->has_characteristic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *characteristic_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnCharacteristicChanged::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const OnCharacteristicChanged*>(
      &from));
}

void OnCharacteristicChanged::MergeFrom(const OnCharacteristicChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OnCharacteristicChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remote_id().size() > 0) {
    _internal_set_remote_id(from._internal_remote_id());
  }
  if (from.has_characteristic()) {
    _internal_mutable_characteristic()->::BluetoothCharacteristic::MergeFrom(from._internal_characteristic());
  }
}

void OnCharacteristicChanged::CopyFrom(const OnCharacteristicChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OnCharacteristicChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnCharacteristicChanged::IsInitialized() const {
  return true;
}

void OnCharacteristicChanged::InternalSwap(OnCharacteristicChanged* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  remote_id_.Swap(&other->remote_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(characteristic_, other->characteristic_);
}

std::string OnCharacteristicChanged::GetTypeName() const {
  return "OnCharacteristicChanged";
}


// ===================================================================

class DeviceStateResponse::_Internal {
 public:
};

DeviceStateResponse::DeviceStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DeviceStateResponse)
}
DeviceStateResponse::DeviceStateResponse(const DeviceStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_id().empty()) {
    remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_id(), 
      GetArena());
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:DeviceStateResponse)
}

void DeviceStateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceStateResponse_flutterblue_2eproto.base);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

DeviceStateResponse::~DeviceStateResponse() {
  // @@protoc_insertion_point(destructor:DeviceStateResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  remote_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceStateResponse::ArenaDtor(void* object) {
  DeviceStateResponse* _this = reinterpret_cast< DeviceStateResponse* >(object);
  (void)_this;
}
void DeviceStateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceStateResponse& DeviceStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceStateResponse_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void DeviceStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_id_.ClearToEmpty();
  state_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_remote_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DeviceStateResponse.BluetoothDeviceState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::DeviceStateResponse_BluetoothDeviceState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_id().data(), static_cast<int>(this->_internal_remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DeviceStateResponse.remote_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remote_id(), target);
  }

  // .DeviceStateResponse.BluetoothDeviceState state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceStateResponse)
  return target;
}

size_t DeviceStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_id());
  }

  // .DeviceStateResponse.BluetoothDeviceState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceStateResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceStateResponse*>(
      &from));
}

void DeviceStateResponse::MergeFrom(const DeviceStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeviceStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remote_id().size() > 0) {
    _internal_set_remote_id(from._internal_remote_id());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void DeviceStateResponse::CopyFrom(const DeviceStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStateResponse::IsInitialized() const {
  return true;
}

void DeviceStateResponse::InternalSwap(DeviceStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  remote_id_.Swap(&other->remote_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(state_, other->state_);
}

std::string DeviceStateResponse::GetTypeName() const {
  return "DeviceStateResponse";
}


// ===================================================================

class ConnectedDevicesResponse::_Internal {
 public:
};

ConnectedDevicesResponse::ConnectedDevicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  devices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ConnectedDevicesResponse)
}
ConnectedDevicesResponse::ConnectedDevicesResponse(const ConnectedDevicesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ConnectedDevicesResponse)
}

void ConnectedDevicesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectedDevicesResponse_flutterblue_2eproto.base);
}

ConnectedDevicesResponse::~ConnectedDevicesResponse() {
  // @@protoc_insertion_point(destructor:ConnectedDevicesResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ConnectedDevicesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ConnectedDevicesResponse::ArenaDtor(void* object) {
  ConnectedDevicesResponse* _this = reinterpret_cast< ConnectedDevicesResponse* >(object);
  (void)_this;
}
void ConnectedDevicesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectedDevicesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectedDevicesResponse& ConnectedDevicesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectedDevicesResponse_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void ConnectedDevicesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ConnectedDevicesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ConnectedDevicesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BluetoothDevice devices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectedDevicesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConnectedDevicesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BluetoothDevice devices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_devices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConnectedDevicesResponse)
  return target;
}

size_t ConnectedDevicesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConnectedDevicesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BluetoothDevice devices = 1;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectedDevicesResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ConnectedDevicesResponse*>(
      &from));
}

void ConnectedDevicesResponse::MergeFrom(const ConnectedDevicesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConnectedDevicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
}

void ConnectedDevicesResponse::CopyFrom(const ConnectedDevicesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConnectedDevicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectedDevicesResponse::IsInitialized() const {
  return true;
}

void ConnectedDevicesResponse::InternalSwap(ConnectedDevicesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  devices_.InternalSwap(&other->devices_);
}

std::string ConnectedDevicesResponse::GetTypeName() const {
  return "ConnectedDevicesResponse";
}


// ===================================================================

class MtuSizeRequest::_Internal {
 public:
};

MtuSizeRequest::MtuSizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MtuSizeRequest)
}
MtuSizeRequest::MtuSizeRequest(const MtuSizeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_id().empty()) {
    remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_id(), 
      GetArena());
  }
  mtu_ = from.mtu_;
  // @@protoc_insertion_point(copy_constructor:MtuSizeRequest)
}

void MtuSizeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MtuSizeRequest_flutterblue_2eproto.base);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mtu_ = 0u;
}

MtuSizeRequest::~MtuSizeRequest() {
  // @@protoc_insertion_point(destructor:MtuSizeRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void MtuSizeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  remote_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MtuSizeRequest::ArenaDtor(void* object) {
  MtuSizeRequest* _this = reinterpret_cast< MtuSizeRequest* >(object);
  (void)_this;
}
void MtuSizeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MtuSizeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MtuSizeRequest& MtuSizeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MtuSizeRequest_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void MtuSizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MtuSizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_id_.ClearToEmpty();
  mtu_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* MtuSizeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_remote_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mtu = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mtu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MtuSizeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MtuSizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_id().data(), static_cast<int>(this->_internal_remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MtuSizeRequest.remote_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remote_id(), target);
  }

  // uint32 mtu = 2;
  if (this->mtu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mtu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MtuSizeRequest)
  return target;
}

size_t MtuSizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MtuSizeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_id());
  }

  // uint32 mtu = 2;
  if (this->mtu() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mtu());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MtuSizeRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MtuSizeRequest*>(
      &from));
}

void MtuSizeRequest::MergeFrom(const MtuSizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MtuSizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remote_id().size() > 0) {
    _internal_set_remote_id(from._internal_remote_id());
  }
  if (from.mtu() != 0) {
    _internal_set_mtu(from._internal_mtu());
  }
}

void MtuSizeRequest::CopyFrom(const MtuSizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MtuSizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MtuSizeRequest::IsInitialized() const {
  return true;
}

void MtuSizeRequest::InternalSwap(MtuSizeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  remote_id_.Swap(&other->remote_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(mtu_, other->mtu_);
}

std::string MtuSizeRequest::GetTypeName() const {
  return "MtuSizeRequest";
}


// ===================================================================

class MtuSizeResponse::_Internal {
 public:
};

MtuSizeResponse::MtuSizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MtuSizeResponse)
}
MtuSizeResponse::MtuSizeResponse(const MtuSizeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_id().empty()) {
    remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_id(), 
      GetArena());
  }
  mtu_ = from.mtu_;
  // @@protoc_insertion_point(copy_constructor:MtuSizeResponse)
}

void MtuSizeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MtuSizeResponse_flutterblue_2eproto.base);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mtu_ = 0u;
}

MtuSizeResponse::~MtuSizeResponse() {
  // @@protoc_insertion_point(destructor:MtuSizeResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void MtuSizeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  remote_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MtuSizeResponse::ArenaDtor(void* object) {
  MtuSizeResponse* _this = reinterpret_cast< MtuSizeResponse* >(object);
  (void)_this;
}
void MtuSizeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MtuSizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MtuSizeResponse& MtuSizeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MtuSizeResponse_flutterblue_2eproto.base);
  return *internal_default_instance();
}


void MtuSizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MtuSizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_id_.ClearToEmpty();
  mtu_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* MtuSizeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_remote_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mtu = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mtu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MtuSizeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MtuSizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_id().data(), static_cast<int>(this->_internal_remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MtuSizeResponse.remote_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remote_id(), target);
  }

  // uint32 mtu = 2;
  if (this->mtu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mtu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MtuSizeResponse)
  return target;
}

size_t MtuSizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MtuSizeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_id());
  }

  // uint32 mtu = 2;
  if (this->mtu() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mtu());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MtuSizeResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MtuSizeResponse*>(
      &from));
}

void MtuSizeResponse::MergeFrom(const MtuSizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MtuSizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remote_id().size() > 0) {
    _internal_set_remote_id(from._internal_remote_id());
  }
  if (from.mtu() != 0) {
    _internal_set_mtu(from._internal_mtu());
  }
}

void MtuSizeResponse::CopyFrom(const MtuSizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MtuSizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MtuSizeResponse::IsInitialized() const {
  return true;
}

void MtuSizeResponse::InternalSwap(MtuSizeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  remote_id_.Swap(&other->remote_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(mtu_, other->mtu_);
}

std::string MtuSizeResponse::GetTypeName() const {
  return "MtuSizeResponse";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Int32Value* Arena::CreateMaybeMessage< ::Int32Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Int32Value >(arena);
}
template<> PROTOBUF_NOINLINE ::BluetoothState* Arena::CreateMaybeMessage< ::BluetoothState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BluetoothState >(arena);
}
template<> PROTOBUF_NOINLINE ::AdvertisementData_ManufacturerDataEntry_DoNotUse* Arena::CreateMaybeMessage< ::AdvertisementData_ManufacturerDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AdvertisementData_ManufacturerDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::AdvertisementData_ServiceDataEntry_DoNotUse* Arena::CreateMaybeMessage< ::AdvertisementData_ServiceDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AdvertisementData_ServiceDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::AdvertisementData* Arena::CreateMaybeMessage< ::AdvertisementData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AdvertisementData >(arena);
}
template<> PROTOBUF_NOINLINE ::ScanSettings* Arena::CreateMaybeMessage< ::ScanSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ScanSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::ScanResult* Arena::CreateMaybeMessage< ::ScanResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ScanResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ConnectRequest* Arena::CreateMaybeMessage< ::ConnectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConnectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::BluetoothDevice* Arena::CreateMaybeMessage< ::BluetoothDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BluetoothDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::BluetoothService* Arena::CreateMaybeMessage< ::BluetoothService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BluetoothService >(arena);
}
template<> PROTOBUF_NOINLINE ::BluetoothCharacteristic* Arena::CreateMaybeMessage< ::BluetoothCharacteristic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BluetoothCharacteristic >(arena);
}
template<> PROTOBUF_NOINLINE ::BluetoothDescriptor* Arena::CreateMaybeMessage< ::BluetoothDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BluetoothDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::CharacteristicProperties* Arena::CreateMaybeMessage< ::CharacteristicProperties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CharacteristicProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::DiscoverServicesResult* Arena::CreateMaybeMessage< ::DiscoverServicesResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DiscoverServicesResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ReadCharacteristicRequest* Arena::CreateMaybeMessage< ::ReadCharacteristicRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReadCharacteristicRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ReadCharacteristicResponse* Arena::CreateMaybeMessage< ::ReadCharacteristicResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReadCharacteristicResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ReadDescriptorRequest* Arena::CreateMaybeMessage< ::ReadDescriptorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReadDescriptorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ReadDescriptorResponse* Arena::CreateMaybeMessage< ::ReadDescriptorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReadDescriptorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::WriteCharacteristicRequest* Arena::CreateMaybeMessage< ::WriteCharacteristicRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WriteCharacteristicRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::WriteCharacteristicResponse* Arena::CreateMaybeMessage< ::WriteCharacteristicResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WriteCharacteristicResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::WriteDescriptorRequest* Arena::CreateMaybeMessage< ::WriteDescriptorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WriteDescriptorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::WriteDescriptorResponse* Arena::CreateMaybeMessage< ::WriteDescriptorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WriteDescriptorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SetNotificationRequest* Arena::CreateMaybeMessage< ::SetNotificationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetNotificationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SetNotificationResponse* Arena::CreateMaybeMessage< ::SetNotificationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetNotificationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::OnCharacteristicChanged* Arena::CreateMaybeMessage< ::OnCharacteristicChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OnCharacteristicChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::DeviceStateResponse* Arena::CreateMaybeMessage< ::DeviceStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DeviceStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ConnectedDevicesResponse* Arena::CreateMaybeMessage< ::ConnectedDevicesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConnectedDevicesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::MtuSizeRequest* Arena::CreateMaybeMessage< ::MtuSizeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MtuSizeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MtuSizeResponse* Arena::CreateMaybeMessage< ::MtuSizeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MtuSizeResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
