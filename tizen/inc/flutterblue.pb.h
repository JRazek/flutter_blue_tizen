// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flutterblue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flutterblue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flutterblue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry_lite.h>
#include <google/protobuf/map_field_lite.h>
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flutterblue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flutterblue_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[29]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
class AdvertisementData;
class AdvertisementDataDefaultTypeInternal;
extern AdvertisementDataDefaultTypeInternal _AdvertisementData_default_instance_;
class AdvertisementData_ManufacturerDataEntry_DoNotUse;
class AdvertisementData_ManufacturerDataEntry_DoNotUseDefaultTypeInternal;
extern AdvertisementData_ManufacturerDataEntry_DoNotUseDefaultTypeInternal _AdvertisementData_ManufacturerDataEntry_DoNotUse_default_instance_;
class AdvertisementData_ServiceDataEntry_DoNotUse;
class AdvertisementData_ServiceDataEntry_DoNotUseDefaultTypeInternal;
extern AdvertisementData_ServiceDataEntry_DoNotUseDefaultTypeInternal _AdvertisementData_ServiceDataEntry_DoNotUse_default_instance_;
class BluetoothCharacteristic;
class BluetoothCharacteristicDefaultTypeInternal;
extern BluetoothCharacteristicDefaultTypeInternal _BluetoothCharacteristic_default_instance_;
class BluetoothDescriptor;
class BluetoothDescriptorDefaultTypeInternal;
extern BluetoothDescriptorDefaultTypeInternal _BluetoothDescriptor_default_instance_;
class BluetoothDevice;
class BluetoothDeviceDefaultTypeInternal;
extern BluetoothDeviceDefaultTypeInternal _BluetoothDevice_default_instance_;
class BluetoothService;
class BluetoothServiceDefaultTypeInternal;
extern BluetoothServiceDefaultTypeInternal _BluetoothService_default_instance_;
class BluetoothState;
class BluetoothStateDefaultTypeInternal;
extern BluetoothStateDefaultTypeInternal _BluetoothState_default_instance_;
class CharacteristicProperties;
class CharacteristicPropertiesDefaultTypeInternal;
extern CharacteristicPropertiesDefaultTypeInternal _CharacteristicProperties_default_instance_;
class ConnectRequest;
class ConnectRequestDefaultTypeInternal;
extern ConnectRequestDefaultTypeInternal _ConnectRequest_default_instance_;
class ConnectedDevicesResponse;
class ConnectedDevicesResponseDefaultTypeInternal;
extern ConnectedDevicesResponseDefaultTypeInternal _ConnectedDevicesResponse_default_instance_;
class DeviceStateResponse;
class DeviceStateResponseDefaultTypeInternal;
extern DeviceStateResponseDefaultTypeInternal _DeviceStateResponse_default_instance_;
class DiscoverServicesResult;
class DiscoverServicesResultDefaultTypeInternal;
extern DiscoverServicesResultDefaultTypeInternal _DiscoverServicesResult_default_instance_;
class Int32Value;
class Int32ValueDefaultTypeInternal;
extern Int32ValueDefaultTypeInternal _Int32Value_default_instance_;
class MtuSizeRequest;
class MtuSizeRequestDefaultTypeInternal;
extern MtuSizeRequestDefaultTypeInternal _MtuSizeRequest_default_instance_;
class MtuSizeResponse;
class MtuSizeResponseDefaultTypeInternal;
extern MtuSizeResponseDefaultTypeInternal _MtuSizeResponse_default_instance_;
class OnCharacteristicChanged;
class OnCharacteristicChangedDefaultTypeInternal;
extern OnCharacteristicChangedDefaultTypeInternal _OnCharacteristicChanged_default_instance_;
class ReadCharacteristicRequest;
class ReadCharacteristicRequestDefaultTypeInternal;
extern ReadCharacteristicRequestDefaultTypeInternal _ReadCharacteristicRequest_default_instance_;
class ReadCharacteristicResponse;
class ReadCharacteristicResponseDefaultTypeInternal;
extern ReadCharacteristicResponseDefaultTypeInternal _ReadCharacteristicResponse_default_instance_;
class ReadDescriptorRequest;
class ReadDescriptorRequestDefaultTypeInternal;
extern ReadDescriptorRequestDefaultTypeInternal _ReadDescriptorRequest_default_instance_;
class ReadDescriptorResponse;
class ReadDescriptorResponseDefaultTypeInternal;
extern ReadDescriptorResponseDefaultTypeInternal _ReadDescriptorResponse_default_instance_;
class ScanResult;
class ScanResultDefaultTypeInternal;
extern ScanResultDefaultTypeInternal _ScanResult_default_instance_;
class ScanSettings;
class ScanSettingsDefaultTypeInternal;
extern ScanSettingsDefaultTypeInternal _ScanSettings_default_instance_;
class SetNotificationRequest;
class SetNotificationRequestDefaultTypeInternal;
extern SetNotificationRequestDefaultTypeInternal _SetNotificationRequest_default_instance_;
class SetNotificationResponse;
class SetNotificationResponseDefaultTypeInternal;
extern SetNotificationResponseDefaultTypeInternal _SetNotificationResponse_default_instance_;
class WriteCharacteristicRequest;
class WriteCharacteristicRequestDefaultTypeInternal;
extern WriteCharacteristicRequestDefaultTypeInternal _WriteCharacteristicRequest_default_instance_;
class WriteCharacteristicResponse;
class WriteCharacteristicResponseDefaultTypeInternal;
extern WriteCharacteristicResponseDefaultTypeInternal _WriteCharacteristicResponse_default_instance_;
class WriteDescriptorRequest;
class WriteDescriptorRequestDefaultTypeInternal;
extern WriteDescriptorRequestDefaultTypeInternal _WriteDescriptorRequest_default_instance_;
class WriteDescriptorResponse;
class WriteDescriptorResponseDefaultTypeInternal;
extern WriteDescriptorResponseDefaultTypeInternal _WriteDescriptorResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AdvertisementData* Arena::CreateMaybeMessage<::AdvertisementData>(Arena*);
template<> ::AdvertisementData_ManufacturerDataEntry_DoNotUse* Arena::CreateMaybeMessage<::AdvertisementData_ManufacturerDataEntry_DoNotUse>(Arena*);
template<> ::AdvertisementData_ServiceDataEntry_DoNotUse* Arena::CreateMaybeMessage<::AdvertisementData_ServiceDataEntry_DoNotUse>(Arena*);
template<> ::BluetoothCharacteristic* Arena::CreateMaybeMessage<::BluetoothCharacteristic>(Arena*);
template<> ::BluetoothDescriptor* Arena::CreateMaybeMessage<::BluetoothDescriptor>(Arena*);
template<> ::BluetoothDevice* Arena::CreateMaybeMessage<::BluetoothDevice>(Arena*);
template<> ::BluetoothService* Arena::CreateMaybeMessage<::BluetoothService>(Arena*);
template<> ::BluetoothState* Arena::CreateMaybeMessage<::BluetoothState>(Arena*);
template<> ::CharacteristicProperties* Arena::CreateMaybeMessage<::CharacteristicProperties>(Arena*);
template<> ::ConnectRequest* Arena::CreateMaybeMessage<::ConnectRequest>(Arena*);
template<> ::ConnectedDevicesResponse* Arena::CreateMaybeMessage<::ConnectedDevicesResponse>(Arena*);
template<> ::DeviceStateResponse* Arena::CreateMaybeMessage<::DeviceStateResponse>(Arena*);
template<> ::DiscoverServicesResult* Arena::CreateMaybeMessage<::DiscoverServicesResult>(Arena*);
template<> ::Int32Value* Arena::CreateMaybeMessage<::Int32Value>(Arena*);
template<> ::MtuSizeRequest* Arena::CreateMaybeMessage<::MtuSizeRequest>(Arena*);
template<> ::MtuSizeResponse* Arena::CreateMaybeMessage<::MtuSizeResponse>(Arena*);
template<> ::OnCharacteristicChanged* Arena::CreateMaybeMessage<::OnCharacteristicChanged>(Arena*);
template<> ::ReadCharacteristicRequest* Arena::CreateMaybeMessage<::ReadCharacteristicRequest>(Arena*);
template<> ::ReadCharacteristicResponse* Arena::CreateMaybeMessage<::ReadCharacteristicResponse>(Arena*);
template<> ::ReadDescriptorRequest* Arena::CreateMaybeMessage<::ReadDescriptorRequest>(Arena*);
template<> ::ReadDescriptorResponse* Arena::CreateMaybeMessage<::ReadDescriptorResponse>(Arena*);
template<> ::ScanResult* Arena::CreateMaybeMessage<::ScanResult>(Arena*);
template<> ::ScanSettings* Arena::CreateMaybeMessage<::ScanSettings>(Arena*);
template<> ::SetNotificationRequest* Arena::CreateMaybeMessage<::SetNotificationRequest>(Arena*);
template<> ::SetNotificationResponse* Arena::CreateMaybeMessage<::SetNotificationResponse>(Arena*);
template<> ::WriteCharacteristicRequest* Arena::CreateMaybeMessage<::WriteCharacteristicRequest>(Arena*);
template<> ::WriteCharacteristicResponse* Arena::CreateMaybeMessage<::WriteCharacteristicResponse>(Arena*);
template<> ::WriteDescriptorRequest* Arena::CreateMaybeMessage<::WriteDescriptorRequest>(Arena*);
template<> ::WriteDescriptorResponse* Arena::CreateMaybeMessage<::WriteDescriptorResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum BluetoothState_State : int {
  BluetoothState_State_UNKNOWN = 0,
  BluetoothState_State_UNAVAILABLE = 1,
  BluetoothState_State_UNAUTHORIZED = 2,
  BluetoothState_State_TURNING_ON = 3,
  BluetoothState_State_ON = 4,
  BluetoothState_State_TURNING_OFF = 5,
  BluetoothState_State_OFF = 6,
  BluetoothState_State_BluetoothState_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BluetoothState_State_BluetoothState_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BluetoothState_State_IsValid(int value);
constexpr BluetoothState_State BluetoothState_State_State_MIN = BluetoothState_State_UNKNOWN;
constexpr BluetoothState_State BluetoothState_State_State_MAX = BluetoothState_State_OFF;
constexpr int BluetoothState_State_State_ARRAYSIZE = BluetoothState_State_State_MAX + 1;

const std::string& BluetoothState_State_Name(BluetoothState_State value);
template<typename T>
inline const std::string& BluetoothState_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BluetoothState_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BluetoothState_State_Name.");
  return BluetoothState_State_Name(static_cast<BluetoothState_State>(enum_t_value));
}
bool BluetoothState_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BluetoothState_State* value);
enum BluetoothDevice_Type : int {
  BluetoothDevice_Type_UNKNOWN = 0,
  BluetoothDevice_Type_CLASSIC = 1,
  BluetoothDevice_Type_LE = 2,
  BluetoothDevice_Type_DUAL = 3,
  BluetoothDevice_Type_BluetoothDevice_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BluetoothDevice_Type_BluetoothDevice_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BluetoothDevice_Type_IsValid(int value);
constexpr BluetoothDevice_Type BluetoothDevice_Type_Type_MIN = BluetoothDevice_Type_UNKNOWN;
constexpr BluetoothDevice_Type BluetoothDevice_Type_Type_MAX = BluetoothDevice_Type_DUAL;
constexpr int BluetoothDevice_Type_Type_ARRAYSIZE = BluetoothDevice_Type_Type_MAX + 1;

const std::string& BluetoothDevice_Type_Name(BluetoothDevice_Type value);
template<typename T>
inline const std::string& BluetoothDevice_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BluetoothDevice_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BluetoothDevice_Type_Name.");
  return BluetoothDevice_Type_Name(static_cast<BluetoothDevice_Type>(enum_t_value));
}
bool BluetoothDevice_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BluetoothDevice_Type* value);
enum WriteCharacteristicRequest_WriteType : int {
  WriteCharacteristicRequest_WriteType_WITH_RESPONSE = 0,
  WriteCharacteristicRequest_WriteType_WITHOUT_RESPONSE = 1,
  WriteCharacteristicRequest_WriteType_WriteCharacteristicRequest_WriteType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WriteCharacteristicRequest_WriteType_WriteCharacteristicRequest_WriteType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WriteCharacteristicRequest_WriteType_IsValid(int value);
constexpr WriteCharacteristicRequest_WriteType WriteCharacteristicRequest_WriteType_WriteType_MIN = WriteCharacteristicRequest_WriteType_WITH_RESPONSE;
constexpr WriteCharacteristicRequest_WriteType WriteCharacteristicRequest_WriteType_WriteType_MAX = WriteCharacteristicRequest_WriteType_WITHOUT_RESPONSE;
constexpr int WriteCharacteristicRequest_WriteType_WriteType_ARRAYSIZE = WriteCharacteristicRequest_WriteType_WriteType_MAX + 1;

const std::string& WriteCharacteristicRequest_WriteType_Name(WriteCharacteristicRequest_WriteType value);
template<typename T>
inline const std::string& WriteCharacteristicRequest_WriteType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WriteCharacteristicRequest_WriteType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WriteCharacteristicRequest_WriteType_Name.");
  return WriteCharacteristicRequest_WriteType_Name(static_cast<WriteCharacteristicRequest_WriteType>(enum_t_value));
}
bool WriteCharacteristicRequest_WriteType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WriteCharacteristicRequest_WriteType* value);
enum DeviceStateResponse_BluetoothDeviceState : int {
  DeviceStateResponse_BluetoothDeviceState_DISCONNECTED = 0,
  DeviceStateResponse_BluetoothDeviceState_CONNECTING = 1,
  DeviceStateResponse_BluetoothDeviceState_CONNECTED = 2,
  DeviceStateResponse_BluetoothDeviceState_DISCONNECTING = 3,
  DeviceStateResponse_BluetoothDeviceState_DeviceStateResponse_BluetoothDeviceState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DeviceStateResponse_BluetoothDeviceState_DeviceStateResponse_BluetoothDeviceState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DeviceStateResponse_BluetoothDeviceState_IsValid(int value);
constexpr DeviceStateResponse_BluetoothDeviceState DeviceStateResponse_BluetoothDeviceState_BluetoothDeviceState_MIN = DeviceStateResponse_BluetoothDeviceState_DISCONNECTED;
constexpr DeviceStateResponse_BluetoothDeviceState DeviceStateResponse_BluetoothDeviceState_BluetoothDeviceState_MAX = DeviceStateResponse_BluetoothDeviceState_DISCONNECTING;
constexpr int DeviceStateResponse_BluetoothDeviceState_BluetoothDeviceState_ARRAYSIZE = DeviceStateResponse_BluetoothDeviceState_BluetoothDeviceState_MAX + 1;

const std::string& DeviceStateResponse_BluetoothDeviceState_Name(DeviceStateResponse_BluetoothDeviceState value);
template<typename T>
inline const std::string& DeviceStateResponse_BluetoothDeviceState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceStateResponse_BluetoothDeviceState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceStateResponse_BluetoothDeviceState_Name.");
  return DeviceStateResponse_BluetoothDeviceState_Name(static_cast<DeviceStateResponse_BluetoothDeviceState>(enum_t_value));
}
bool DeviceStateResponse_BluetoothDeviceState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DeviceStateResponse_BluetoothDeviceState* value);
// ===================================================================

class Int32Value PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Int32Value) */ {
 public:
  inline Int32Value() : Int32Value(nullptr) {}
  virtual ~Int32Value();

  Int32Value(const Int32Value& from);
  Int32Value(Int32Value&& from) noexcept
    : Int32Value() {
    *this = ::std::move(from);
  }

  inline Int32Value& operator=(const Int32Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int32Value& operator=(Int32Value&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Int32Value& default_instance();

  static inline const Int32Value* internal_default_instance() {
    return reinterpret_cast<const Int32Value*>(
               &_Int32Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Int32Value& a, Int32Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Int32Value* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int32Value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Int32Value* New() const final {
    return CreateMaybeMessage<Int32Value>(nullptr);
  }

  Int32Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Int32Value>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Int32Value& from);
  void MergeFrom(const Int32Value& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Int32Value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Int32Value";
  }
  protected:
  explicit Int32Value(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int32 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Int32Value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// -------------------------------------------------------------------

class BluetoothState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:BluetoothState) */ {
 public:
  inline BluetoothState() : BluetoothState(nullptr) {}
  virtual ~BluetoothState();

  BluetoothState(const BluetoothState& from);
  BluetoothState(BluetoothState&& from) noexcept
    : BluetoothState() {
    *this = ::std::move(from);
  }

  inline BluetoothState& operator=(const BluetoothState& from) {
    CopyFrom(from);
    return *this;
  }
  inline BluetoothState& operator=(BluetoothState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const BluetoothState& default_instance();

  static inline const BluetoothState* internal_default_instance() {
    return reinterpret_cast<const BluetoothState*>(
               &_BluetoothState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BluetoothState& a, BluetoothState& b) {
    a.Swap(&b);
  }
  inline void Swap(BluetoothState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BluetoothState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BluetoothState* New() const final {
    return CreateMaybeMessage<BluetoothState>(nullptr);
  }

  BluetoothState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BluetoothState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BluetoothState& from);
  void MergeFrom(const BluetoothState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BluetoothState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BluetoothState";
  }
  protected:
  explicit BluetoothState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BluetoothState_State State;
  static constexpr State UNKNOWN =
    BluetoothState_State_UNKNOWN;
  static constexpr State UNAVAILABLE =
    BluetoothState_State_UNAVAILABLE;
  static constexpr State UNAUTHORIZED =
    BluetoothState_State_UNAUTHORIZED;
  static constexpr State TURNING_ON =
    BluetoothState_State_TURNING_ON;
  static constexpr State ON =
    BluetoothState_State_ON;
  static constexpr State TURNING_OFF =
    BluetoothState_State_TURNING_OFF;
  static constexpr State OFF =
    BluetoothState_State_OFF;
  static inline bool State_IsValid(int value) {
    return BluetoothState_State_IsValid(value);
  }
  static constexpr State State_MIN =
    BluetoothState_State_State_MIN;
  static constexpr State State_MAX =
    BluetoothState_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    BluetoothState_State_State_ARRAYSIZE;
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return BluetoothState_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return BluetoothState_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .BluetoothState.State state = 1;
  void clear_state();
  ::BluetoothState_State state() const;
  void set_state(::BluetoothState_State value);
  private:
  ::BluetoothState_State _internal_state() const;
  void _internal_set_state(::BluetoothState_State value);
  public:

  // @@protoc_insertion_point(class_scope:BluetoothState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// -------------------------------------------------------------------

class AdvertisementData_ManufacturerDataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<AdvertisementData_ManufacturerDataEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<AdvertisementData_ManufacturerDataEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> SuperType;
  AdvertisementData_ManufacturerDataEntry_DoNotUse();
  explicit AdvertisementData_ManufacturerDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AdvertisementData_ManufacturerDataEntry_DoNotUse& other);
  static const AdvertisementData_ManufacturerDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AdvertisementData_ManufacturerDataEntry_DoNotUse*>(&_AdvertisementData_ManufacturerDataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
};

// -------------------------------------------------------------------

class AdvertisementData_ServiceDataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<AdvertisementData_ServiceDataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<AdvertisementData_ServiceDataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> SuperType;
  AdvertisementData_ServiceDataEntry_DoNotUse();
  explicit AdvertisementData_ServiceDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AdvertisementData_ServiceDataEntry_DoNotUse& other);
  static const AdvertisementData_ServiceDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AdvertisementData_ServiceDataEntry_DoNotUse*>(&_AdvertisementData_ServiceDataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "AdvertisementData.ServiceDataEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
};

// -------------------------------------------------------------------

class AdvertisementData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:AdvertisementData) */ {
 public:
  inline AdvertisementData() : AdvertisementData(nullptr) {}
  virtual ~AdvertisementData();

  AdvertisementData(const AdvertisementData& from);
  AdvertisementData(AdvertisementData&& from) noexcept
    : AdvertisementData() {
    *this = ::std::move(from);
  }

  inline AdvertisementData& operator=(const AdvertisementData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdvertisementData& operator=(AdvertisementData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const AdvertisementData& default_instance();

  static inline const AdvertisementData* internal_default_instance() {
    return reinterpret_cast<const AdvertisementData*>(
               &_AdvertisementData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AdvertisementData& a, AdvertisementData& b) {
    a.Swap(&b);
  }
  inline void Swap(AdvertisementData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdvertisementData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdvertisementData* New() const final {
    return CreateMaybeMessage<AdvertisementData>(nullptr);
  }

  AdvertisementData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdvertisementData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AdvertisementData& from);
  void MergeFrom(const AdvertisementData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdvertisementData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AdvertisementData";
  }
  protected:
  explicit AdvertisementData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kManufacturerDataFieldNumber = 4,
    kServiceDataFieldNumber = 5,
    kServiceUuidsFieldNumber = 6,
    kLocalNameFieldNumber = 1,
    kTxPowerLevelFieldNumber = 2,
    kConnectableFieldNumber = 3,
  };
  // map<int32, bytes> manufacturer_data = 4;
  int manufacturer_data_size() const;
  private:
  int _internal_manufacturer_data_size() const;
  public:
  void clear_manufacturer_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      _internal_manufacturer_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      _internal_mutable_manufacturer_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      manufacturer_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      mutable_manufacturer_data();

  // map<string, bytes> service_data = 5;
  int service_data_size() const;
  private:
  int _internal_service_data_size() const;
  public:
  void clear_service_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_service_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_service_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      service_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_service_data();

  // repeated string service_uuids = 6;
  int service_uuids_size() const;
  private:
  int _internal_service_uuids_size() const;
  public:
  void clear_service_uuids();
  const std::string& service_uuids(int index) const;
  std::string* mutable_service_uuids(int index);
  void set_service_uuids(int index, const std::string& value);
  void set_service_uuids(int index, std::string&& value);
  void set_service_uuids(int index, const char* value);
  void set_service_uuids(int index, const char* value, size_t size);
  std::string* add_service_uuids();
  void add_service_uuids(const std::string& value);
  void add_service_uuids(std::string&& value);
  void add_service_uuids(const char* value);
  void add_service_uuids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& service_uuids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_service_uuids();
  private:
  const std::string& _internal_service_uuids(int index) const;
  std::string* _internal_add_service_uuids();
  public:

  // string local_name = 1;
  void clear_local_name();
  const std::string& local_name() const;
  void set_local_name(const std::string& value);
  void set_local_name(std::string&& value);
  void set_local_name(const char* value);
  void set_local_name(const char* value, size_t size);
  std::string* mutable_local_name();
  std::string* release_local_name();
  void set_allocated_local_name(std::string* local_name);
  private:
  const std::string& _internal_local_name() const;
  void _internal_set_local_name(const std::string& value);
  std::string* _internal_mutable_local_name();
  public:

  // .Int32Value tx_power_level = 2;
  bool has_tx_power_level() const;
  private:
  bool _internal_has_tx_power_level() const;
  public:
  void clear_tx_power_level();
  const ::Int32Value& tx_power_level() const;
  ::Int32Value* release_tx_power_level();
  ::Int32Value* mutable_tx_power_level();
  void set_allocated_tx_power_level(::Int32Value* tx_power_level);
  private:
  const ::Int32Value& _internal_tx_power_level() const;
  ::Int32Value* _internal_mutable_tx_power_level();
  public:
  void unsafe_arena_set_allocated_tx_power_level(
      ::Int32Value* tx_power_level);
  ::Int32Value* unsafe_arena_release_tx_power_level();

  // bool connectable = 3;
  void clear_connectable();
  bool connectable() const;
  void set_connectable(bool value);
  private:
  bool _internal_connectable() const;
  void _internal_set_connectable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AdvertisementData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      AdvertisementData_ManufacturerDataEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> manufacturer_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      AdvertisementData_ServiceDataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> service_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> service_uuids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_name_;
  ::Int32Value* tx_power_level_;
  bool connectable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// -------------------------------------------------------------------

class ScanSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ScanSettings) */ {
 public:
  inline ScanSettings() : ScanSettings(nullptr) {}
  virtual ~ScanSettings();

  ScanSettings(const ScanSettings& from);
  ScanSettings(ScanSettings&& from) noexcept
    : ScanSettings() {
    *this = ::std::move(from);
  }

  inline ScanSettings& operator=(const ScanSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanSettings& operator=(ScanSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ScanSettings& default_instance();

  static inline const ScanSettings* internal_default_instance() {
    return reinterpret_cast<const ScanSettings*>(
               &_ScanSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ScanSettings& a, ScanSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanSettings* New() const final {
    return CreateMaybeMessage<ScanSettings>(nullptr);
  }

  ScanSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanSettings>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ScanSettings& from);
  void MergeFrom(const ScanSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScanSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ScanSettings";
  }
  protected:
  explicit ScanSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceUuidsFieldNumber = 2,
    kAndroidScanModeFieldNumber = 1,
    kAllowDuplicatesFieldNumber = 3,
  };
  // repeated string service_uuids = 2;
  int service_uuids_size() const;
  private:
  int _internal_service_uuids_size() const;
  public:
  void clear_service_uuids();
  const std::string& service_uuids(int index) const;
  std::string* mutable_service_uuids(int index);
  void set_service_uuids(int index, const std::string& value);
  void set_service_uuids(int index, std::string&& value);
  void set_service_uuids(int index, const char* value);
  void set_service_uuids(int index, const char* value, size_t size);
  std::string* add_service_uuids();
  void add_service_uuids(const std::string& value);
  void add_service_uuids(std::string&& value);
  void add_service_uuids(const char* value);
  void add_service_uuids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& service_uuids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_service_uuids();
  private:
  const std::string& _internal_service_uuids(int index) const;
  std::string* _internal_add_service_uuids();
  public:

  // int32 android_scan_mode = 1;
  void clear_android_scan_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 android_scan_mode() const;
  void set_android_scan_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_android_scan_mode() const;
  void _internal_set_android_scan_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool allow_duplicates = 3;
  void clear_allow_duplicates();
  bool allow_duplicates() const;
  void set_allow_duplicates(bool value);
  private:
  bool _internal_allow_duplicates() const;
  void _internal_set_allow_duplicates(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ScanSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> service_uuids_;
  ::PROTOBUF_NAMESPACE_ID::int32 android_scan_mode_;
  bool allow_duplicates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// -------------------------------------------------------------------

class ScanResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ScanResult) */ {
 public:
  inline ScanResult() : ScanResult(nullptr) {}
  virtual ~ScanResult();

  ScanResult(const ScanResult& from);
  ScanResult(ScanResult&& from) noexcept
    : ScanResult() {
    *this = ::std::move(from);
  }

  inline ScanResult& operator=(const ScanResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanResult& operator=(ScanResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ScanResult& default_instance();

  static inline const ScanResult* internal_default_instance() {
    return reinterpret_cast<const ScanResult*>(
               &_ScanResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ScanResult& a, ScanResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanResult* New() const final {
    return CreateMaybeMessage<ScanResult>(nullptr);
  }

  ScanResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanResult>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ScanResult& from);
  void MergeFrom(const ScanResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScanResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ScanResult";
  }
  protected:
  explicit ScanResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kAdvertisementDataFieldNumber = 2,
    kRssiFieldNumber = 3,
  };
  // .BluetoothDevice device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::BluetoothDevice& device() const;
  ::BluetoothDevice* release_device();
  ::BluetoothDevice* mutable_device();
  void set_allocated_device(::BluetoothDevice* device);
  private:
  const ::BluetoothDevice& _internal_device() const;
  ::BluetoothDevice* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::BluetoothDevice* device);
  ::BluetoothDevice* unsafe_arena_release_device();

  // .AdvertisementData advertisement_data = 2;
  bool has_advertisement_data() const;
  private:
  bool _internal_has_advertisement_data() const;
  public:
  void clear_advertisement_data();
  const ::AdvertisementData& advertisement_data() const;
  ::AdvertisementData* release_advertisement_data();
  ::AdvertisementData* mutable_advertisement_data();
  void set_allocated_advertisement_data(::AdvertisementData* advertisement_data);
  private:
  const ::AdvertisementData& _internal_advertisement_data() const;
  ::AdvertisementData* _internal_mutable_advertisement_data();
  public:
  void unsafe_arena_set_allocated_advertisement_data(
      ::AdvertisementData* advertisement_data);
  ::AdvertisementData* unsafe_arena_release_advertisement_data();

  // int32 rssi = 3;
  void clear_rssi();
  ::PROTOBUF_NAMESPACE_ID::int32 rssi() const;
  void set_rssi(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rssi() const;
  void _internal_set_rssi(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ScanResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::BluetoothDevice* device_;
  ::AdvertisementData* advertisement_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 rssi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// -------------------------------------------------------------------

class ConnectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ConnectRequest) */ {
 public:
  inline ConnectRequest() : ConnectRequest(nullptr) {}
  virtual ~ConnectRequest();

  ConnectRequest(const ConnectRequest& from);
  ConnectRequest(ConnectRequest&& from) noexcept
    : ConnectRequest() {
    *this = ::std::move(from);
  }

  inline ConnectRequest& operator=(const ConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectRequest& operator=(ConnectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ConnectRequest& default_instance();

  static inline const ConnectRequest* internal_default_instance() {
    return reinterpret_cast<const ConnectRequest*>(
               &_ConnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ConnectRequest& a, ConnectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectRequest* New() const final {
    return CreateMaybeMessage<ConnectRequest>(nullptr);
  }

  ConnectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ConnectRequest& from);
  void MergeFrom(const ConnectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConnectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConnectRequest";
  }
  protected:
  explicit ConnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kAndroidAutoConnectFieldNumber = 2,
  };
  // string remote_id = 1;
  void clear_remote_id();
  const std::string& remote_id() const;
  void set_remote_id(const std::string& value);
  void set_remote_id(std::string&& value);
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  std::string* mutable_remote_id();
  std::string* release_remote_id();
  void set_allocated_remote_id(std::string* remote_id);
  private:
  const std::string& _internal_remote_id() const;
  void _internal_set_remote_id(const std::string& value);
  std::string* _internal_mutable_remote_id();
  public:

  // bool android_auto_connect = 2;
  void clear_android_auto_connect();
  bool android_auto_connect() const;
  void set_android_auto_connect(bool value);
  private:
  bool _internal_android_auto_connect() const;
  void _internal_set_android_auto_connect(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ConnectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_id_;
  bool android_auto_connect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// -------------------------------------------------------------------

class BluetoothDevice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:BluetoothDevice) */ {
 public:
  inline BluetoothDevice() : BluetoothDevice(nullptr) {}
  virtual ~BluetoothDevice();

  BluetoothDevice(const BluetoothDevice& from);
  BluetoothDevice(BluetoothDevice&& from) noexcept
    : BluetoothDevice() {
    *this = ::std::move(from);
  }

  inline BluetoothDevice& operator=(const BluetoothDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline BluetoothDevice& operator=(BluetoothDevice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const BluetoothDevice& default_instance();

  static inline const BluetoothDevice* internal_default_instance() {
    return reinterpret_cast<const BluetoothDevice*>(
               &_BluetoothDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BluetoothDevice& a, BluetoothDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(BluetoothDevice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BluetoothDevice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BluetoothDevice* New() const final {
    return CreateMaybeMessage<BluetoothDevice>(nullptr);
  }

  BluetoothDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BluetoothDevice>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BluetoothDevice& from);
  void MergeFrom(const BluetoothDevice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BluetoothDevice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BluetoothDevice";
  }
  protected:
  explicit BluetoothDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BluetoothDevice_Type Type;
  static constexpr Type UNKNOWN =
    BluetoothDevice_Type_UNKNOWN;
  static constexpr Type CLASSIC =
    BluetoothDevice_Type_CLASSIC;
  static constexpr Type LE =
    BluetoothDevice_Type_LE;
  static constexpr Type DUAL =
    BluetoothDevice_Type_DUAL;
  static inline bool Type_IsValid(int value) {
    return BluetoothDevice_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    BluetoothDevice_Type_Type_MIN;
  static constexpr Type Type_MAX =
    BluetoothDevice_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    BluetoothDevice_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return BluetoothDevice_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return BluetoothDevice_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // string remote_id = 1;
  void clear_remote_id();
  const std::string& remote_id() const;
  void set_remote_id(const std::string& value);
  void set_remote_id(std::string&& value);
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  std::string* mutable_remote_id();
  std::string* release_remote_id();
  void set_allocated_remote_id(std::string* remote_id);
  private:
  const std::string& _internal_remote_id() const;
  void _internal_set_remote_id(const std::string& value);
  std::string* _internal_mutable_remote_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .BluetoothDevice.Type type = 3;
  void clear_type();
  ::BluetoothDevice_Type type() const;
  void set_type(::BluetoothDevice_Type value);
  private:
  ::BluetoothDevice_Type _internal_type() const;
  void _internal_set_type(::BluetoothDevice_Type value);
  public:

  // @@protoc_insertion_point(class_scope:BluetoothDevice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// -------------------------------------------------------------------

class BluetoothService PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:BluetoothService) */ {
 public:
  inline BluetoothService() : BluetoothService(nullptr) {}
  virtual ~BluetoothService();

  BluetoothService(const BluetoothService& from);
  BluetoothService(BluetoothService&& from) noexcept
    : BluetoothService() {
    *this = ::std::move(from);
  }

  inline BluetoothService& operator=(const BluetoothService& from) {
    CopyFrom(from);
    return *this;
  }
  inline BluetoothService& operator=(BluetoothService&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const BluetoothService& default_instance();

  static inline const BluetoothService* internal_default_instance() {
    return reinterpret_cast<const BluetoothService*>(
               &_BluetoothService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BluetoothService& a, BluetoothService& b) {
    a.Swap(&b);
  }
  inline void Swap(BluetoothService* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BluetoothService* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BluetoothService* New() const final {
    return CreateMaybeMessage<BluetoothService>(nullptr);
  }

  BluetoothService* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BluetoothService>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BluetoothService& from);
  void MergeFrom(const BluetoothService& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BluetoothService* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BluetoothService";
  }
  protected:
  explicit BluetoothService(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacteristicsFieldNumber = 4,
    kIncludedServicesFieldNumber = 5,
    kUuidFieldNumber = 1,
    kRemoteIdFieldNumber = 2,
    kIsPrimaryFieldNumber = 3,
  };
  // repeated .BluetoothCharacteristic characteristics = 4;
  int characteristics_size() const;
  private:
  int _internal_characteristics_size() const;
  public:
  void clear_characteristics();
  ::BluetoothCharacteristic* mutable_characteristics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothCharacteristic >*
      mutable_characteristics();
  private:
  const ::BluetoothCharacteristic& _internal_characteristics(int index) const;
  ::BluetoothCharacteristic* _internal_add_characteristics();
  public:
  const ::BluetoothCharacteristic& characteristics(int index) const;
  ::BluetoothCharacteristic* add_characteristics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothCharacteristic >&
      characteristics() const;

  // repeated .BluetoothService included_services = 5;
  int included_services_size() const;
  private:
  int _internal_included_services_size() const;
  public:
  void clear_included_services();
  ::BluetoothService* mutable_included_services(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothService >*
      mutable_included_services();
  private:
  const ::BluetoothService& _internal_included_services(int index) const;
  ::BluetoothService* _internal_add_included_services();
  public:
  const ::BluetoothService& included_services(int index) const;
  ::BluetoothService* add_included_services();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothService >&
      included_services() const;

  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string remote_id = 2;
  void clear_remote_id();
  const std::string& remote_id() const;
  void set_remote_id(const std::string& value);
  void set_remote_id(std::string&& value);
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  std::string* mutable_remote_id();
  std::string* release_remote_id();
  void set_allocated_remote_id(std::string* remote_id);
  private:
  const std::string& _internal_remote_id() const;
  void _internal_set_remote_id(const std::string& value);
  std::string* _internal_mutable_remote_id();
  public:

  // bool is_primary = 3;
  void clear_is_primary();
  bool is_primary() const;
  void set_is_primary(bool value);
  private:
  bool _internal_is_primary() const;
  void _internal_set_is_primary(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BluetoothService)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothCharacteristic > characteristics_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothService > included_services_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_id_;
  bool is_primary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// -------------------------------------------------------------------

class BluetoothCharacteristic PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:BluetoothCharacteristic) */ {
 public:
  inline BluetoothCharacteristic() : BluetoothCharacteristic(nullptr) {}
  virtual ~BluetoothCharacteristic();

  BluetoothCharacteristic(const BluetoothCharacteristic& from);
  BluetoothCharacteristic(BluetoothCharacteristic&& from) noexcept
    : BluetoothCharacteristic() {
    *this = ::std::move(from);
  }

  inline BluetoothCharacteristic& operator=(const BluetoothCharacteristic& from) {
    CopyFrom(from);
    return *this;
  }
  inline BluetoothCharacteristic& operator=(BluetoothCharacteristic&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const BluetoothCharacteristic& default_instance();

  static inline const BluetoothCharacteristic* internal_default_instance() {
    return reinterpret_cast<const BluetoothCharacteristic*>(
               &_BluetoothCharacteristic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BluetoothCharacteristic& a, BluetoothCharacteristic& b) {
    a.Swap(&b);
  }
  inline void Swap(BluetoothCharacteristic* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BluetoothCharacteristic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BluetoothCharacteristic* New() const final {
    return CreateMaybeMessage<BluetoothCharacteristic>(nullptr);
  }

  BluetoothCharacteristic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BluetoothCharacteristic>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BluetoothCharacteristic& from);
  void MergeFrom(const BluetoothCharacteristic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BluetoothCharacteristic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BluetoothCharacteristic";
  }
  protected:
  explicit BluetoothCharacteristic(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptorsFieldNumber = 5,
    kUuidFieldNumber = 1,
    kRemoteIdFieldNumber = 2,
    kServiceUuidFieldNumber = 3,
    kSecondaryServiceUuidFieldNumber = 4,
    kValueFieldNumber = 7,
    kPropertiesFieldNumber = 6,
  };
  // repeated .BluetoothDescriptor descriptors = 5;
  int descriptors_size() const;
  private:
  int _internal_descriptors_size() const;
  public:
  void clear_descriptors();
  ::BluetoothDescriptor* mutable_descriptors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothDescriptor >*
      mutable_descriptors();
  private:
  const ::BluetoothDescriptor& _internal_descriptors(int index) const;
  ::BluetoothDescriptor* _internal_add_descriptors();
  public:
  const ::BluetoothDescriptor& descriptors(int index) const;
  ::BluetoothDescriptor* add_descriptors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothDescriptor >&
      descriptors() const;

  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string remote_id = 2;
  void clear_remote_id();
  const std::string& remote_id() const;
  void set_remote_id(const std::string& value);
  void set_remote_id(std::string&& value);
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  std::string* mutable_remote_id();
  std::string* release_remote_id();
  void set_allocated_remote_id(std::string* remote_id);
  private:
  const std::string& _internal_remote_id() const;
  void _internal_set_remote_id(const std::string& value);
  std::string* _internal_mutable_remote_id();
  public:

  // string serviceUuid = 3;
  void clear_serviceuuid();
  const std::string& serviceuuid() const;
  void set_serviceuuid(const std::string& value);
  void set_serviceuuid(std::string&& value);
  void set_serviceuuid(const char* value);
  void set_serviceuuid(const char* value, size_t size);
  std::string* mutable_serviceuuid();
  std::string* release_serviceuuid();
  void set_allocated_serviceuuid(std::string* serviceuuid);
  private:
  const std::string& _internal_serviceuuid() const;
  void _internal_set_serviceuuid(const std::string& value);
  std::string* _internal_mutable_serviceuuid();
  public:

  // string secondaryServiceUuid = 4;
  void clear_secondaryserviceuuid();
  const std::string& secondaryserviceuuid() const;
  void set_secondaryserviceuuid(const std::string& value);
  void set_secondaryserviceuuid(std::string&& value);
  void set_secondaryserviceuuid(const char* value);
  void set_secondaryserviceuuid(const char* value, size_t size);
  std::string* mutable_secondaryserviceuuid();
  std::string* release_secondaryserviceuuid();
  void set_allocated_secondaryserviceuuid(std::string* secondaryserviceuuid);
  private:
  const std::string& _internal_secondaryserviceuuid() const;
  void _internal_set_secondaryserviceuuid(const std::string& value);
  std::string* _internal_mutable_secondaryserviceuuid();
  public:

  // bytes value = 7;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .CharacteristicProperties properties = 6;
  bool has_properties() const;
  private:
  bool _internal_has_properties() const;
  public:
  void clear_properties();
  const ::CharacteristicProperties& properties() const;
  ::CharacteristicProperties* release_properties();
  ::CharacteristicProperties* mutable_properties();
  void set_allocated_properties(::CharacteristicProperties* properties);
  private:
  const ::CharacteristicProperties& _internal_properties() const;
  ::CharacteristicProperties* _internal_mutable_properties();
  public:
  void unsafe_arena_set_allocated_properties(
      ::CharacteristicProperties* properties);
  ::CharacteristicProperties* unsafe_arena_release_properties();

  // @@protoc_insertion_point(class_scope:BluetoothCharacteristic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothDescriptor > descriptors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serviceuuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondaryserviceuuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::CharacteristicProperties* properties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// -------------------------------------------------------------------

class BluetoothDescriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:BluetoothDescriptor) */ {
 public:
  inline BluetoothDescriptor() : BluetoothDescriptor(nullptr) {}
  virtual ~BluetoothDescriptor();

  BluetoothDescriptor(const BluetoothDescriptor& from);
  BluetoothDescriptor(BluetoothDescriptor&& from) noexcept
    : BluetoothDescriptor() {
    *this = ::std::move(from);
  }

  inline BluetoothDescriptor& operator=(const BluetoothDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline BluetoothDescriptor& operator=(BluetoothDescriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const BluetoothDescriptor& default_instance();

  static inline const BluetoothDescriptor* internal_default_instance() {
    return reinterpret_cast<const BluetoothDescriptor*>(
               &_BluetoothDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BluetoothDescriptor& a, BluetoothDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(BluetoothDescriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BluetoothDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BluetoothDescriptor* New() const final {
    return CreateMaybeMessage<BluetoothDescriptor>(nullptr);
  }

  BluetoothDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BluetoothDescriptor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BluetoothDescriptor& from);
  void MergeFrom(const BluetoothDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BluetoothDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BluetoothDescriptor";
  }
  protected:
  explicit BluetoothDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kRemoteIdFieldNumber = 2,
    kServiceUuidFieldNumber = 3,
    kCharacteristicUuidFieldNumber = 4,
    kValueFieldNumber = 5,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string remote_id = 2;
  void clear_remote_id();
  const std::string& remote_id() const;
  void set_remote_id(const std::string& value);
  void set_remote_id(std::string&& value);
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  std::string* mutable_remote_id();
  std::string* release_remote_id();
  void set_allocated_remote_id(std::string* remote_id);
  private:
  const std::string& _internal_remote_id() const;
  void _internal_set_remote_id(const std::string& value);
  std::string* _internal_mutable_remote_id();
  public:

  // string serviceUuid = 3;
  void clear_serviceuuid();
  const std::string& serviceuuid() const;
  void set_serviceuuid(const std::string& value);
  void set_serviceuuid(std::string&& value);
  void set_serviceuuid(const char* value);
  void set_serviceuuid(const char* value, size_t size);
  std::string* mutable_serviceuuid();
  std::string* release_serviceuuid();
  void set_allocated_serviceuuid(std::string* serviceuuid);
  private:
  const std::string& _internal_serviceuuid() const;
  void _internal_set_serviceuuid(const std::string& value);
  std::string* _internal_mutable_serviceuuid();
  public:

  // string characteristicUuid = 4;
  void clear_characteristicuuid();
  const std::string& characteristicuuid() const;
  void set_characteristicuuid(const std::string& value);
  void set_characteristicuuid(std::string&& value);
  void set_characteristicuuid(const char* value);
  void set_characteristicuuid(const char* value, size_t size);
  std::string* mutable_characteristicuuid();
  std::string* release_characteristicuuid();
  void set_allocated_characteristicuuid(std::string* characteristicuuid);
  private:
  const std::string& _internal_characteristicuuid() const;
  void _internal_set_characteristicuuid(const std::string& value);
  std::string* _internal_mutable_characteristicuuid();
  public:

  // bytes value = 5;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:BluetoothDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serviceuuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr characteristicuuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// -------------------------------------------------------------------

class CharacteristicProperties PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CharacteristicProperties) */ {
 public:
  inline CharacteristicProperties() : CharacteristicProperties(nullptr) {}
  virtual ~CharacteristicProperties();

  CharacteristicProperties(const CharacteristicProperties& from);
  CharacteristicProperties(CharacteristicProperties&& from) noexcept
    : CharacteristicProperties() {
    *this = ::std::move(from);
  }

  inline CharacteristicProperties& operator=(const CharacteristicProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacteristicProperties& operator=(CharacteristicProperties&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CharacteristicProperties& default_instance();

  static inline const CharacteristicProperties* internal_default_instance() {
    return reinterpret_cast<const CharacteristicProperties*>(
               &_CharacteristicProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CharacteristicProperties& a, CharacteristicProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacteristicProperties* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacteristicProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CharacteristicProperties* New() const final {
    return CreateMaybeMessage<CharacteristicProperties>(nullptr);
  }

  CharacteristicProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CharacteristicProperties>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CharacteristicProperties& from);
  void MergeFrom(const CharacteristicProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CharacteristicProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CharacteristicProperties";
  }
  protected:
  explicit CharacteristicProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcastFieldNumber = 1,
    kReadFieldNumber = 2,
    kWriteWithoutResponseFieldNumber = 3,
    kWriteFieldNumber = 4,
    kNotifyFieldNumber = 5,
    kIndicateFieldNumber = 6,
    kAuthenticatedSignedWritesFieldNumber = 7,
    kExtendedPropertiesFieldNumber = 8,
    kNotifyEncryptionRequiredFieldNumber = 9,
    kIndicateEncryptionRequiredFieldNumber = 10,
  };
  // bool broadcast = 1;
  void clear_broadcast();
  bool broadcast() const;
  void set_broadcast(bool value);
  private:
  bool _internal_broadcast() const;
  void _internal_set_broadcast(bool value);
  public:

  // bool read = 2;
  void clear_read();
  bool read() const;
  void set_read(bool value);
  private:
  bool _internal_read() const;
  void _internal_set_read(bool value);
  public:

  // bool write_without_response = 3;
  void clear_write_without_response();
  bool write_without_response() const;
  void set_write_without_response(bool value);
  private:
  bool _internal_write_without_response() const;
  void _internal_set_write_without_response(bool value);
  public:

  // bool write = 4;
  void clear_write();
  bool write() const;
  void set_write(bool value);
  private:
  bool _internal_write() const;
  void _internal_set_write(bool value);
  public:

  // bool notify = 5;
  void clear_notify();
  bool notify() const;
  void set_notify(bool value);
  private:
  bool _internal_notify() const;
  void _internal_set_notify(bool value);
  public:

  // bool indicate = 6;
  void clear_indicate();
  bool indicate() const;
  void set_indicate(bool value);
  private:
  bool _internal_indicate() const;
  void _internal_set_indicate(bool value);
  public:

  // bool authenticated_signed_writes = 7;
  void clear_authenticated_signed_writes();
  bool authenticated_signed_writes() const;
  void set_authenticated_signed_writes(bool value);
  private:
  bool _internal_authenticated_signed_writes() const;
  void _internal_set_authenticated_signed_writes(bool value);
  public:

  // bool extended_properties = 8;
  void clear_extended_properties();
  bool extended_properties() const;
  void set_extended_properties(bool value);
  private:
  bool _internal_extended_properties() const;
  void _internal_set_extended_properties(bool value);
  public:

  // bool notify_encryption_required = 9;
  void clear_notify_encryption_required();
  bool notify_encryption_required() const;
  void set_notify_encryption_required(bool value);
  private:
  bool _internal_notify_encryption_required() const;
  void _internal_set_notify_encryption_required(bool value);
  public:

  // bool indicate_encryption_required = 10;
  void clear_indicate_encryption_required();
  bool indicate_encryption_required() const;
  void set_indicate_encryption_required(bool value);
  private:
  bool _internal_indicate_encryption_required() const;
  void _internal_set_indicate_encryption_required(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CharacteristicProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool broadcast_;
  bool read_;
  bool write_without_response_;
  bool write_;
  bool notify_;
  bool indicate_;
  bool authenticated_signed_writes_;
  bool extended_properties_;
  bool notify_encryption_required_;
  bool indicate_encryption_required_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// -------------------------------------------------------------------

class DiscoverServicesResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DiscoverServicesResult) */ {
 public:
  inline DiscoverServicesResult() : DiscoverServicesResult(nullptr) {}
  virtual ~DiscoverServicesResult();

  DiscoverServicesResult(const DiscoverServicesResult& from);
  DiscoverServicesResult(DiscoverServicesResult&& from) noexcept
    : DiscoverServicesResult() {
    *this = ::std::move(from);
  }

  inline DiscoverServicesResult& operator=(const DiscoverServicesResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoverServicesResult& operator=(DiscoverServicesResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DiscoverServicesResult& default_instance();

  static inline const DiscoverServicesResult* internal_default_instance() {
    return reinterpret_cast<const DiscoverServicesResult*>(
               &_DiscoverServicesResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DiscoverServicesResult& a, DiscoverServicesResult& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoverServicesResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoverServicesResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiscoverServicesResult* New() const final {
    return CreateMaybeMessage<DiscoverServicesResult>(nullptr);
  }

  DiscoverServicesResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiscoverServicesResult>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DiscoverServicesResult& from);
  void MergeFrom(const DiscoverServicesResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DiscoverServicesResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DiscoverServicesResult";
  }
  protected:
  explicit DiscoverServicesResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServicesFieldNumber = 2,
    kRemoteIdFieldNumber = 1,
  };
  // repeated .BluetoothService services = 2;
  int services_size() const;
  private:
  int _internal_services_size() const;
  public:
  void clear_services();
  ::BluetoothService* mutable_services(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothService >*
      mutable_services();
  private:
  const ::BluetoothService& _internal_services(int index) const;
  ::BluetoothService* _internal_add_services();
  public:
  const ::BluetoothService& services(int index) const;
  ::BluetoothService* add_services();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothService >&
      services() const;

  // string remote_id = 1;
  void clear_remote_id();
  const std::string& remote_id() const;
  void set_remote_id(const std::string& value);
  void set_remote_id(std::string&& value);
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  std::string* mutable_remote_id();
  std::string* release_remote_id();
  void set_allocated_remote_id(std::string* remote_id);
  private:
  const std::string& _internal_remote_id() const;
  void _internal_set_remote_id(const std::string& value);
  std::string* _internal_mutable_remote_id();
  public:

  // @@protoc_insertion_point(class_scope:DiscoverServicesResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothService > services_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// -------------------------------------------------------------------

class ReadCharacteristicRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ReadCharacteristicRequest) */ {
 public:
  inline ReadCharacteristicRequest() : ReadCharacteristicRequest(nullptr) {}
  virtual ~ReadCharacteristicRequest();

  ReadCharacteristicRequest(const ReadCharacteristicRequest& from);
  ReadCharacteristicRequest(ReadCharacteristicRequest&& from) noexcept
    : ReadCharacteristicRequest() {
    *this = ::std::move(from);
  }

  inline ReadCharacteristicRequest& operator=(const ReadCharacteristicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadCharacteristicRequest& operator=(ReadCharacteristicRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ReadCharacteristicRequest& default_instance();

  static inline const ReadCharacteristicRequest* internal_default_instance() {
    return reinterpret_cast<const ReadCharacteristicRequest*>(
               &_ReadCharacteristicRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ReadCharacteristicRequest& a, ReadCharacteristicRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadCharacteristicRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadCharacteristicRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadCharacteristicRequest* New() const final {
    return CreateMaybeMessage<ReadCharacteristicRequest>(nullptr);
  }

  ReadCharacteristicRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadCharacteristicRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ReadCharacteristicRequest& from);
  void MergeFrom(const ReadCharacteristicRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadCharacteristicRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReadCharacteristicRequest";
  }
  protected:
  explicit ReadCharacteristicRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kCharacteristicUuidFieldNumber = 2,
    kServiceUuidFieldNumber = 3,
    kSecondaryServiceUuidFieldNumber = 4,
  };
  // string remote_id = 1;
  void clear_remote_id();
  const std::string& remote_id() const;
  void set_remote_id(const std::string& value);
  void set_remote_id(std::string&& value);
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  std::string* mutable_remote_id();
  std::string* release_remote_id();
  void set_allocated_remote_id(std::string* remote_id);
  private:
  const std::string& _internal_remote_id() const;
  void _internal_set_remote_id(const std::string& value);
  std::string* _internal_mutable_remote_id();
  public:

  // string characteristic_uuid = 2;
  void clear_characteristic_uuid();
  const std::string& characteristic_uuid() const;
  void set_characteristic_uuid(const std::string& value);
  void set_characteristic_uuid(std::string&& value);
  void set_characteristic_uuid(const char* value);
  void set_characteristic_uuid(const char* value, size_t size);
  std::string* mutable_characteristic_uuid();
  std::string* release_characteristic_uuid();
  void set_allocated_characteristic_uuid(std::string* characteristic_uuid);
  private:
  const std::string& _internal_characteristic_uuid() const;
  void _internal_set_characteristic_uuid(const std::string& value);
  std::string* _internal_mutable_characteristic_uuid();
  public:

  // string service_uuid = 3;
  void clear_service_uuid();
  const std::string& service_uuid() const;
  void set_service_uuid(const std::string& value);
  void set_service_uuid(std::string&& value);
  void set_service_uuid(const char* value);
  void set_service_uuid(const char* value, size_t size);
  std::string* mutable_service_uuid();
  std::string* release_service_uuid();
  void set_allocated_service_uuid(std::string* service_uuid);
  private:
  const std::string& _internal_service_uuid() const;
  void _internal_set_service_uuid(const std::string& value);
  std::string* _internal_mutable_service_uuid();
  public:

  // string secondary_service_uuid = 4;
  void clear_secondary_service_uuid();
  const std::string& secondary_service_uuid() const;
  void set_secondary_service_uuid(const std::string& value);
  void set_secondary_service_uuid(std::string&& value);
  void set_secondary_service_uuid(const char* value);
  void set_secondary_service_uuid(const char* value, size_t size);
  std::string* mutable_secondary_service_uuid();
  std::string* release_secondary_service_uuid();
  void set_allocated_secondary_service_uuid(std::string* secondary_service_uuid);
  private:
  const std::string& _internal_secondary_service_uuid() const;
  void _internal_set_secondary_service_uuid(const std::string& value);
  std::string* _internal_mutable_secondary_service_uuid();
  public:

  // @@protoc_insertion_point(class_scope:ReadCharacteristicRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr characteristic_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondary_service_uuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// -------------------------------------------------------------------

class ReadCharacteristicResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ReadCharacteristicResponse) */ {
 public:
  inline ReadCharacteristicResponse() : ReadCharacteristicResponse(nullptr) {}
  virtual ~ReadCharacteristicResponse();

  ReadCharacteristicResponse(const ReadCharacteristicResponse& from);
  ReadCharacteristicResponse(ReadCharacteristicResponse&& from) noexcept
    : ReadCharacteristicResponse() {
    *this = ::std::move(from);
  }

  inline ReadCharacteristicResponse& operator=(const ReadCharacteristicResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadCharacteristicResponse& operator=(ReadCharacteristicResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ReadCharacteristicResponse& default_instance();

  static inline const ReadCharacteristicResponse* internal_default_instance() {
    return reinterpret_cast<const ReadCharacteristicResponse*>(
               &_ReadCharacteristicResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ReadCharacteristicResponse& a, ReadCharacteristicResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadCharacteristicResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadCharacteristicResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadCharacteristicResponse* New() const final {
    return CreateMaybeMessage<ReadCharacteristicResponse>(nullptr);
  }

  ReadCharacteristicResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadCharacteristicResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ReadCharacteristicResponse& from);
  void MergeFrom(const ReadCharacteristicResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadCharacteristicResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReadCharacteristicResponse";
  }
  protected:
  explicit ReadCharacteristicResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kCharacteristicFieldNumber = 2,
  };
  // string remote_id = 1;
  void clear_remote_id();
  const std::string& remote_id() const;
  void set_remote_id(const std::string& value);
  void set_remote_id(std::string&& value);
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  std::string* mutable_remote_id();
  std::string* release_remote_id();
  void set_allocated_remote_id(std::string* remote_id);
  private:
  const std::string& _internal_remote_id() const;
  void _internal_set_remote_id(const std::string& value);
  std::string* _internal_mutable_remote_id();
  public:

  // .BluetoothCharacteristic characteristic = 2;
  bool has_characteristic() const;
  private:
  bool _internal_has_characteristic() const;
  public:
  void clear_characteristic();
  const ::BluetoothCharacteristic& characteristic() const;
  ::BluetoothCharacteristic* release_characteristic();
  ::BluetoothCharacteristic* mutable_characteristic();
  void set_allocated_characteristic(::BluetoothCharacteristic* characteristic);
  private:
  const ::BluetoothCharacteristic& _internal_characteristic() const;
  ::BluetoothCharacteristic* _internal_mutable_characteristic();
  public:
  void unsafe_arena_set_allocated_characteristic(
      ::BluetoothCharacteristic* characteristic);
  ::BluetoothCharacteristic* unsafe_arena_release_characteristic();

  // @@protoc_insertion_point(class_scope:ReadCharacteristicResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_id_;
  ::BluetoothCharacteristic* characteristic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// -------------------------------------------------------------------

class ReadDescriptorRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ReadDescriptorRequest) */ {
 public:
  inline ReadDescriptorRequest() : ReadDescriptorRequest(nullptr) {}
  virtual ~ReadDescriptorRequest();

  ReadDescriptorRequest(const ReadDescriptorRequest& from);
  ReadDescriptorRequest(ReadDescriptorRequest&& from) noexcept
    : ReadDescriptorRequest() {
    *this = ::std::move(from);
  }

  inline ReadDescriptorRequest& operator=(const ReadDescriptorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadDescriptorRequest& operator=(ReadDescriptorRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ReadDescriptorRequest& default_instance();

  static inline const ReadDescriptorRequest* internal_default_instance() {
    return reinterpret_cast<const ReadDescriptorRequest*>(
               &_ReadDescriptorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ReadDescriptorRequest& a, ReadDescriptorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadDescriptorRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadDescriptorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadDescriptorRequest* New() const final {
    return CreateMaybeMessage<ReadDescriptorRequest>(nullptr);
  }

  ReadDescriptorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadDescriptorRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ReadDescriptorRequest& from);
  void MergeFrom(const ReadDescriptorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadDescriptorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReadDescriptorRequest";
  }
  protected:
  explicit ReadDescriptorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kDescriptorUuidFieldNumber = 2,
    kServiceUuidFieldNumber = 3,
    kSecondaryServiceUuidFieldNumber = 4,
    kCharacteristicUuidFieldNumber = 5,
  };
  // string remote_id = 1;
  void clear_remote_id();
  const std::string& remote_id() const;
  void set_remote_id(const std::string& value);
  void set_remote_id(std::string&& value);
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  std::string* mutable_remote_id();
  std::string* release_remote_id();
  void set_allocated_remote_id(std::string* remote_id);
  private:
  const std::string& _internal_remote_id() const;
  void _internal_set_remote_id(const std::string& value);
  std::string* _internal_mutable_remote_id();
  public:

  // string descriptor_uuid = 2;
  void clear_descriptor_uuid();
  const std::string& descriptor_uuid() const;
  void set_descriptor_uuid(const std::string& value);
  void set_descriptor_uuid(std::string&& value);
  void set_descriptor_uuid(const char* value);
  void set_descriptor_uuid(const char* value, size_t size);
  std::string* mutable_descriptor_uuid();
  std::string* release_descriptor_uuid();
  void set_allocated_descriptor_uuid(std::string* descriptor_uuid);
  private:
  const std::string& _internal_descriptor_uuid() const;
  void _internal_set_descriptor_uuid(const std::string& value);
  std::string* _internal_mutable_descriptor_uuid();
  public:

  // string service_uuid = 3;
  void clear_service_uuid();
  const std::string& service_uuid() const;
  void set_service_uuid(const std::string& value);
  void set_service_uuid(std::string&& value);
  void set_service_uuid(const char* value);
  void set_service_uuid(const char* value, size_t size);
  std::string* mutable_service_uuid();
  std::string* release_service_uuid();
  void set_allocated_service_uuid(std::string* service_uuid);
  private:
  const std::string& _internal_service_uuid() const;
  void _internal_set_service_uuid(const std::string& value);
  std::string* _internal_mutable_service_uuid();
  public:

  // string secondary_service_uuid = 4;
  void clear_secondary_service_uuid();
  const std::string& secondary_service_uuid() const;
  void set_secondary_service_uuid(const std::string& value);
  void set_secondary_service_uuid(std::string&& value);
  void set_secondary_service_uuid(const char* value);
  void set_secondary_service_uuid(const char* value, size_t size);
  std::string* mutable_secondary_service_uuid();
  std::string* release_secondary_service_uuid();
  void set_allocated_secondary_service_uuid(std::string* secondary_service_uuid);
  private:
  const std::string& _internal_secondary_service_uuid() const;
  void _internal_set_secondary_service_uuid(const std::string& value);
  std::string* _internal_mutable_secondary_service_uuid();
  public:

  // string characteristic_uuid = 5;
  void clear_characteristic_uuid();
  const std::string& characteristic_uuid() const;
  void set_characteristic_uuid(const std::string& value);
  void set_characteristic_uuid(std::string&& value);
  void set_characteristic_uuid(const char* value);
  void set_characteristic_uuid(const char* value, size_t size);
  std::string* mutable_characteristic_uuid();
  std::string* release_characteristic_uuid();
  void set_allocated_characteristic_uuid(std::string* characteristic_uuid);
  private:
  const std::string& _internal_characteristic_uuid() const;
  void _internal_set_characteristic_uuid(const std::string& value);
  std::string* _internal_mutable_characteristic_uuid();
  public:

  // @@protoc_insertion_point(class_scope:ReadDescriptorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descriptor_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondary_service_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr characteristic_uuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// -------------------------------------------------------------------

class ReadDescriptorResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ReadDescriptorResponse) */ {
 public:
  inline ReadDescriptorResponse() : ReadDescriptorResponse(nullptr) {}
  virtual ~ReadDescriptorResponse();

  ReadDescriptorResponse(const ReadDescriptorResponse& from);
  ReadDescriptorResponse(ReadDescriptorResponse&& from) noexcept
    : ReadDescriptorResponse() {
    *this = ::std::move(from);
  }

  inline ReadDescriptorResponse& operator=(const ReadDescriptorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadDescriptorResponse& operator=(ReadDescriptorResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ReadDescriptorResponse& default_instance();

  static inline const ReadDescriptorResponse* internal_default_instance() {
    return reinterpret_cast<const ReadDescriptorResponse*>(
               &_ReadDescriptorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ReadDescriptorResponse& a, ReadDescriptorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadDescriptorResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadDescriptorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadDescriptorResponse* New() const final {
    return CreateMaybeMessage<ReadDescriptorResponse>(nullptr);
  }

  ReadDescriptorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadDescriptorResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ReadDescriptorResponse& from);
  void MergeFrom(const ReadDescriptorResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadDescriptorResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReadDescriptorResponse";
  }
  protected:
  explicit ReadDescriptorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kRequestFieldNumber = 1,
  };
  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .ReadDescriptorRequest request = 1;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::ReadDescriptorRequest& request() const;
  ::ReadDescriptorRequest* release_request();
  ::ReadDescriptorRequest* mutable_request();
  void set_allocated_request(::ReadDescriptorRequest* request);
  private:
  const ::ReadDescriptorRequest& _internal_request() const;
  ::ReadDescriptorRequest* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::ReadDescriptorRequest* request);
  ::ReadDescriptorRequest* unsafe_arena_release_request();

  // @@protoc_insertion_point(class_scope:ReadDescriptorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::ReadDescriptorRequest* request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// -------------------------------------------------------------------

class WriteCharacteristicRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:WriteCharacteristicRequest) */ {
 public:
  inline WriteCharacteristicRequest() : WriteCharacteristicRequest(nullptr) {}
  virtual ~WriteCharacteristicRequest();

  WriteCharacteristicRequest(const WriteCharacteristicRequest& from);
  WriteCharacteristicRequest(WriteCharacteristicRequest&& from) noexcept
    : WriteCharacteristicRequest() {
    *this = ::std::move(from);
  }

  inline WriteCharacteristicRequest& operator=(const WriteCharacteristicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteCharacteristicRequest& operator=(WriteCharacteristicRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const WriteCharacteristicRequest& default_instance();

  static inline const WriteCharacteristicRequest* internal_default_instance() {
    return reinterpret_cast<const WriteCharacteristicRequest*>(
               &_WriteCharacteristicRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(WriteCharacteristicRequest& a, WriteCharacteristicRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteCharacteristicRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteCharacteristicRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteCharacteristicRequest* New() const final {
    return CreateMaybeMessage<WriteCharacteristicRequest>(nullptr);
  }

  WriteCharacteristicRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteCharacteristicRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WriteCharacteristicRequest& from);
  void MergeFrom(const WriteCharacteristicRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WriteCharacteristicRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WriteCharacteristicRequest";
  }
  protected:
  explicit WriteCharacteristicRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef WriteCharacteristicRequest_WriteType WriteType;
  static constexpr WriteType WITH_RESPONSE =
    WriteCharacteristicRequest_WriteType_WITH_RESPONSE;
  static constexpr WriteType WITHOUT_RESPONSE =
    WriteCharacteristicRequest_WriteType_WITHOUT_RESPONSE;
  static inline bool WriteType_IsValid(int value) {
    return WriteCharacteristicRequest_WriteType_IsValid(value);
  }
  static constexpr WriteType WriteType_MIN =
    WriteCharacteristicRequest_WriteType_WriteType_MIN;
  static constexpr WriteType WriteType_MAX =
    WriteCharacteristicRequest_WriteType_WriteType_MAX;
  static constexpr int WriteType_ARRAYSIZE =
    WriteCharacteristicRequest_WriteType_WriteType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& WriteType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WriteType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WriteType_Name.");
    return WriteCharacteristicRequest_WriteType_Name(enum_t_value);
  }
  static inline bool WriteType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WriteType* value) {
    return WriteCharacteristicRequest_WriteType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kCharacteristicUuidFieldNumber = 2,
    kServiceUuidFieldNumber = 3,
    kSecondaryServiceUuidFieldNumber = 4,
    kValueFieldNumber = 6,
    kWriteTypeFieldNumber = 5,
  };
  // string remote_id = 1;
  void clear_remote_id();
  const std::string& remote_id() const;
  void set_remote_id(const std::string& value);
  void set_remote_id(std::string&& value);
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  std::string* mutable_remote_id();
  std::string* release_remote_id();
  void set_allocated_remote_id(std::string* remote_id);
  private:
  const std::string& _internal_remote_id() const;
  void _internal_set_remote_id(const std::string& value);
  std::string* _internal_mutable_remote_id();
  public:

  // string characteristic_uuid = 2;
  void clear_characteristic_uuid();
  const std::string& characteristic_uuid() const;
  void set_characteristic_uuid(const std::string& value);
  void set_characteristic_uuid(std::string&& value);
  void set_characteristic_uuid(const char* value);
  void set_characteristic_uuid(const char* value, size_t size);
  std::string* mutable_characteristic_uuid();
  std::string* release_characteristic_uuid();
  void set_allocated_characteristic_uuid(std::string* characteristic_uuid);
  private:
  const std::string& _internal_characteristic_uuid() const;
  void _internal_set_characteristic_uuid(const std::string& value);
  std::string* _internal_mutable_characteristic_uuid();
  public:

  // string service_uuid = 3;
  void clear_service_uuid();
  const std::string& service_uuid() const;
  void set_service_uuid(const std::string& value);
  void set_service_uuid(std::string&& value);
  void set_service_uuid(const char* value);
  void set_service_uuid(const char* value, size_t size);
  std::string* mutable_service_uuid();
  std::string* release_service_uuid();
  void set_allocated_service_uuid(std::string* service_uuid);
  private:
  const std::string& _internal_service_uuid() const;
  void _internal_set_service_uuid(const std::string& value);
  std::string* _internal_mutable_service_uuid();
  public:

  // string secondary_service_uuid = 4;
  void clear_secondary_service_uuid();
  const std::string& secondary_service_uuid() const;
  void set_secondary_service_uuid(const std::string& value);
  void set_secondary_service_uuid(std::string&& value);
  void set_secondary_service_uuid(const char* value);
  void set_secondary_service_uuid(const char* value, size_t size);
  std::string* mutable_secondary_service_uuid();
  std::string* release_secondary_service_uuid();
  void set_allocated_secondary_service_uuid(std::string* secondary_service_uuid);
  private:
  const std::string& _internal_secondary_service_uuid() const;
  void _internal_set_secondary_service_uuid(const std::string& value);
  std::string* _internal_mutable_secondary_service_uuid();
  public:

  // bytes value = 6;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .WriteCharacteristicRequest.WriteType write_type = 5;
  void clear_write_type();
  ::WriteCharacteristicRequest_WriteType write_type() const;
  void set_write_type(::WriteCharacteristicRequest_WriteType value);
  private:
  ::WriteCharacteristicRequest_WriteType _internal_write_type() const;
  void _internal_set_write_type(::WriteCharacteristicRequest_WriteType value);
  public:

  // @@protoc_insertion_point(class_scope:WriteCharacteristicRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr characteristic_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondary_service_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int write_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// -------------------------------------------------------------------

class WriteCharacteristicResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:WriteCharacteristicResponse) */ {
 public:
  inline WriteCharacteristicResponse() : WriteCharacteristicResponse(nullptr) {}
  virtual ~WriteCharacteristicResponse();

  WriteCharacteristicResponse(const WriteCharacteristicResponse& from);
  WriteCharacteristicResponse(WriteCharacteristicResponse&& from) noexcept
    : WriteCharacteristicResponse() {
    *this = ::std::move(from);
  }

  inline WriteCharacteristicResponse& operator=(const WriteCharacteristicResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteCharacteristicResponse& operator=(WriteCharacteristicResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const WriteCharacteristicResponse& default_instance();

  static inline const WriteCharacteristicResponse* internal_default_instance() {
    return reinterpret_cast<const WriteCharacteristicResponse*>(
               &_WriteCharacteristicResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(WriteCharacteristicResponse& a, WriteCharacteristicResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteCharacteristicResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteCharacteristicResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteCharacteristicResponse* New() const final {
    return CreateMaybeMessage<WriteCharacteristicResponse>(nullptr);
  }

  WriteCharacteristicResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteCharacteristicResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WriteCharacteristicResponse& from);
  void MergeFrom(const WriteCharacteristicResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WriteCharacteristicResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WriteCharacteristicResponse";
  }
  protected:
  explicit WriteCharacteristicResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .WriteCharacteristicRequest request = 1;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::WriteCharacteristicRequest& request() const;
  ::WriteCharacteristicRequest* release_request();
  ::WriteCharacteristicRequest* mutable_request();
  void set_allocated_request(::WriteCharacteristicRequest* request);
  private:
  const ::WriteCharacteristicRequest& _internal_request() const;
  ::WriteCharacteristicRequest* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::WriteCharacteristicRequest* request);
  ::WriteCharacteristicRequest* unsafe_arena_release_request();

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:WriteCharacteristicResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::WriteCharacteristicRequest* request_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// -------------------------------------------------------------------

class WriteDescriptorRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:WriteDescriptorRequest) */ {
 public:
  inline WriteDescriptorRequest() : WriteDescriptorRequest(nullptr) {}
  virtual ~WriteDescriptorRequest();

  WriteDescriptorRequest(const WriteDescriptorRequest& from);
  WriteDescriptorRequest(WriteDescriptorRequest&& from) noexcept
    : WriteDescriptorRequest() {
    *this = ::std::move(from);
  }

  inline WriteDescriptorRequest& operator=(const WriteDescriptorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteDescriptorRequest& operator=(WriteDescriptorRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const WriteDescriptorRequest& default_instance();

  static inline const WriteDescriptorRequest* internal_default_instance() {
    return reinterpret_cast<const WriteDescriptorRequest*>(
               &_WriteDescriptorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(WriteDescriptorRequest& a, WriteDescriptorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteDescriptorRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteDescriptorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteDescriptorRequest* New() const final {
    return CreateMaybeMessage<WriteDescriptorRequest>(nullptr);
  }

  WriteDescriptorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteDescriptorRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WriteDescriptorRequest& from);
  void MergeFrom(const WriteDescriptorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WriteDescriptorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WriteDescriptorRequest";
  }
  protected:
  explicit WriteDescriptorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kDescriptorUuidFieldNumber = 2,
    kServiceUuidFieldNumber = 3,
    kSecondaryServiceUuidFieldNumber = 4,
    kCharacteristicUuidFieldNumber = 5,
    kValueFieldNumber = 6,
  };
  // string remote_id = 1;
  void clear_remote_id();
  const std::string& remote_id() const;
  void set_remote_id(const std::string& value);
  void set_remote_id(std::string&& value);
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  std::string* mutable_remote_id();
  std::string* release_remote_id();
  void set_allocated_remote_id(std::string* remote_id);
  private:
  const std::string& _internal_remote_id() const;
  void _internal_set_remote_id(const std::string& value);
  std::string* _internal_mutable_remote_id();
  public:

  // string descriptor_uuid = 2;
  void clear_descriptor_uuid();
  const std::string& descriptor_uuid() const;
  void set_descriptor_uuid(const std::string& value);
  void set_descriptor_uuid(std::string&& value);
  void set_descriptor_uuid(const char* value);
  void set_descriptor_uuid(const char* value, size_t size);
  std::string* mutable_descriptor_uuid();
  std::string* release_descriptor_uuid();
  void set_allocated_descriptor_uuid(std::string* descriptor_uuid);
  private:
  const std::string& _internal_descriptor_uuid() const;
  void _internal_set_descriptor_uuid(const std::string& value);
  std::string* _internal_mutable_descriptor_uuid();
  public:

  // string service_uuid = 3;
  void clear_service_uuid();
  const std::string& service_uuid() const;
  void set_service_uuid(const std::string& value);
  void set_service_uuid(std::string&& value);
  void set_service_uuid(const char* value);
  void set_service_uuid(const char* value, size_t size);
  std::string* mutable_service_uuid();
  std::string* release_service_uuid();
  void set_allocated_service_uuid(std::string* service_uuid);
  private:
  const std::string& _internal_service_uuid() const;
  void _internal_set_service_uuid(const std::string& value);
  std::string* _internal_mutable_service_uuid();
  public:

  // string secondary_service_uuid = 4;
  void clear_secondary_service_uuid();
  const std::string& secondary_service_uuid() const;
  void set_secondary_service_uuid(const std::string& value);
  void set_secondary_service_uuid(std::string&& value);
  void set_secondary_service_uuid(const char* value);
  void set_secondary_service_uuid(const char* value, size_t size);
  std::string* mutable_secondary_service_uuid();
  std::string* release_secondary_service_uuid();
  void set_allocated_secondary_service_uuid(std::string* secondary_service_uuid);
  private:
  const std::string& _internal_secondary_service_uuid() const;
  void _internal_set_secondary_service_uuid(const std::string& value);
  std::string* _internal_mutable_secondary_service_uuid();
  public:

  // string characteristic_uuid = 5;
  void clear_characteristic_uuid();
  const std::string& characteristic_uuid() const;
  void set_characteristic_uuid(const std::string& value);
  void set_characteristic_uuid(std::string&& value);
  void set_characteristic_uuid(const char* value);
  void set_characteristic_uuid(const char* value, size_t size);
  std::string* mutable_characteristic_uuid();
  std::string* release_characteristic_uuid();
  void set_allocated_characteristic_uuid(std::string* characteristic_uuid);
  private:
  const std::string& _internal_characteristic_uuid() const;
  void _internal_set_characteristic_uuid(const std::string& value);
  std::string* _internal_mutable_characteristic_uuid();
  public:

  // bytes value = 6;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:WriteDescriptorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descriptor_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondary_service_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr characteristic_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// -------------------------------------------------------------------

class WriteDescriptorResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:WriteDescriptorResponse) */ {
 public:
  inline WriteDescriptorResponse() : WriteDescriptorResponse(nullptr) {}
  virtual ~WriteDescriptorResponse();

  WriteDescriptorResponse(const WriteDescriptorResponse& from);
  WriteDescriptorResponse(WriteDescriptorResponse&& from) noexcept
    : WriteDescriptorResponse() {
    *this = ::std::move(from);
  }

  inline WriteDescriptorResponse& operator=(const WriteDescriptorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteDescriptorResponse& operator=(WriteDescriptorResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const WriteDescriptorResponse& default_instance();

  static inline const WriteDescriptorResponse* internal_default_instance() {
    return reinterpret_cast<const WriteDescriptorResponse*>(
               &_WriteDescriptorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(WriteDescriptorResponse& a, WriteDescriptorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteDescriptorResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteDescriptorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteDescriptorResponse* New() const final {
    return CreateMaybeMessage<WriteDescriptorResponse>(nullptr);
  }

  WriteDescriptorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteDescriptorResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WriteDescriptorResponse& from);
  void MergeFrom(const WriteDescriptorResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WriteDescriptorResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WriteDescriptorResponse";
  }
  protected:
  explicit WriteDescriptorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .WriteDescriptorRequest request = 1;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::WriteDescriptorRequest& request() const;
  ::WriteDescriptorRequest* release_request();
  ::WriteDescriptorRequest* mutable_request();
  void set_allocated_request(::WriteDescriptorRequest* request);
  private:
  const ::WriteDescriptorRequest& _internal_request() const;
  ::WriteDescriptorRequest* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::WriteDescriptorRequest* request);
  ::WriteDescriptorRequest* unsafe_arena_release_request();

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:WriteDescriptorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::WriteDescriptorRequest* request_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// -------------------------------------------------------------------

class SetNotificationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:SetNotificationRequest) */ {
 public:
  inline SetNotificationRequest() : SetNotificationRequest(nullptr) {}
  virtual ~SetNotificationRequest();

  SetNotificationRequest(const SetNotificationRequest& from);
  SetNotificationRequest(SetNotificationRequest&& from) noexcept
    : SetNotificationRequest() {
    *this = ::std::move(from);
  }

  inline SetNotificationRequest& operator=(const SetNotificationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetNotificationRequest& operator=(SetNotificationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SetNotificationRequest& default_instance();

  static inline const SetNotificationRequest* internal_default_instance() {
    return reinterpret_cast<const SetNotificationRequest*>(
               &_SetNotificationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SetNotificationRequest& a, SetNotificationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetNotificationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetNotificationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetNotificationRequest* New() const final {
    return CreateMaybeMessage<SetNotificationRequest>(nullptr);
  }

  SetNotificationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetNotificationRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SetNotificationRequest& from);
  void MergeFrom(const SetNotificationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetNotificationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SetNotificationRequest";
  }
  protected:
  explicit SetNotificationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kServiceUuidFieldNumber = 2,
    kSecondaryServiceUuidFieldNumber = 3,
    kCharacteristicUuidFieldNumber = 4,
    kEnableFieldNumber = 5,
  };
  // string remote_id = 1;
  void clear_remote_id();
  const std::string& remote_id() const;
  void set_remote_id(const std::string& value);
  void set_remote_id(std::string&& value);
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  std::string* mutable_remote_id();
  std::string* release_remote_id();
  void set_allocated_remote_id(std::string* remote_id);
  private:
  const std::string& _internal_remote_id() const;
  void _internal_set_remote_id(const std::string& value);
  std::string* _internal_mutable_remote_id();
  public:

  // string service_uuid = 2;
  void clear_service_uuid();
  const std::string& service_uuid() const;
  void set_service_uuid(const std::string& value);
  void set_service_uuid(std::string&& value);
  void set_service_uuid(const char* value);
  void set_service_uuid(const char* value, size_t size);
  std::string* mutable_service_uuid();
  std::string* release_service_uuid();
  void set_allocated_service_uuid(std::string* service_uuid);
  private:
  const std::string& _internal_service_uuid() const;
  void _internal_set_service_uuid(const std::string& value);
  std::string* _internal_mutable_service_uuid();
  public:

  // string secondary_service_uuid = 3;
  void clear_secondary_service_uuid();
  const std::string& secondary_service_uuid() const;
  void set_secondary_service_uuid(const std::string& value);
  void set_secondary_service_uuid(std::string&& value);
  void set_secondary_service_uuid(const char* value);
  void set_secondary_service_uuid(const char* value, size_t size);
  std::string* mutable_secondary_service_uuid();
  std::string* release_secondary_service_uuid();
  void set_allocated_secondary_service_uuid(std::string* secondary_service_uuid);
  private:
  const std::string& _internal_secondary_service_uuid() const;
  void _internal_set_secondary_service_uuid(const std::string& value);
  std::string* _internal_mutable_secondary_service_uuid();
  public:

  // string characteristic_uuid = 4;
  void clear_characteristic_uuid();
  const std::string& characteristic_uuid() const;
  void set_characteristic_uuid(const std::string& value);
  void set_characteristic_uuid(std::string&& value);
  void set_characteristic_uuid(const char* value);
  void set_characteristic_uuid(const char* value, size_t size);
  std::string* mutable_characteristic_uuid();
  std::string* release_characteristic_uuid();
  void set_allocated_characteristic_uuid(std::string* characteristic_uuid);
  private:
  const std::string& _internal_characteristic_uuid() const;
  void _internal_set_characteristic_uuid(const std::string& value);
  std::string* _internal_mutable_characteristic_uuid();
  public:

  // bool enable = 5;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SetNotificationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondary_service_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr characteristic_uuid_;
  bool enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// -------------------------------------------------------------------

class SetNotificationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:SetNotificationResponse) */ {
 public:
  inline SetNotificationResponse() : SetNotificationResponse(nullptr) {}
  virtual ~SetNotificationResponse();

  SetNotificationResponse(const SetNotificationResponse& from);
  SetNotificationResponse(SetNotificationResponse&& from) noexcept
    : SetNotificationResponse() {
    *this = ::std::move(from);
  }

  inline SetNotificationResponse& operator=(const SetNotificationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetNotificationResponse& operator=(SetNotificationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SetNotificationResponse& default_instance();

  static inline const SetNotificationResponse* internal_default_instance() {
    return reinterpret_cast<const SetNotificationResponse*>(
               &_SetNotificationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SetNotificationResponse& a, SetNotificationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetNotificationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetNotificationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetNotificationResponse* New() const final {
    return CreateMaybeMessage<SetNotificationResponse>(nullptr);
  }

  SetNotificationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetNotificationResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SetNotificationResponse& from);
  void MergeFrom(const SetNotificationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetNotificationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SetNotificationResponse";
  }
  protected:
  explicit SetNotificationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kCharacteristicFieldNumber = 2,
    kSuccessFieldNumber = 3,
  };
  // string remote_id = 1;
  void clear_remote_id();
  const std::string& remote_id() const;
  void set_remote_id(const std::string& value);
  void set_remote_id(std::string&& value);
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  std::string* mutable_remote_id();
  std::string* release_remote_id();
  void set_allocated_remote_id(std::string* remote_id);
  private:
  const std::string& _internal_remote_id() const;
  void _internal_set_remote_id(const std::string& value);
  std::string* _internal_mutable_remote_id();
  public:

  // .BluetoothCharacteristic characteristic = 2;
  bool has_characteristic() const;
  private:
  bool _internal_has_characteristic() const;
  public:
  void clear_characteristic();
  const ::BluetoothCharacteristic& characteristic() const;
  ::BluetoothCharacteristic* release_characteristic();
  ::BluetoothCharacteristic* mutable_characteristic();
  void set_allocated_characteristic(::BluetoothCharacteristic* characteristic);
  private:
  const ::BluetoothCharacteristic& _internal_characteristic() const;
  ::BluetoothCharacteristic* _internal_mutable_characteristic();
  public:
  void unsafe_arena_set_allocated_characteristic(
      ::BluetoothCharacteristic* characteristic);
  ::BluetoothCharacteristic* unsafe_arena_release_characteristic();

  // bool success = 3;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SetNotificationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_id_;
  ::BluetoothCharacteristic* characteristic_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// -------------------------------------------------------------------

class OnCharacteristicChanged PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:OnCharacteristicChanged) */ {
 public:
  inline OnCharacteristicChanged() : OnCharacteristicChanged(nullptr) {}
  virtual ~OnCharacteristicChanged();

  OnCharacteristicChanged(const OnCharacteristicChanged& from);
  OnCharacteristicChanged(OnCharacteristicChanged&& from) noexcept
    : OnCharacteristicChanged() {
    *this = ::std::move(from);
  }

  inline OnCharacteristicChanged& operator=(const OnCharacteristicChanged& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnCharacteristicChanged& operator=(OnCharacteristicChanged&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OnCharacteristicChanged& default_instance();

  static inline const OnCharacteristicChanged* internal_default_instance() {
    return reinterpret_cast<const OnCharacteristicChanged*>(
               &_OnCharacteristicChanged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(OnCharacteristicChanged& a, OnCharacteristicChanged& b) {
    a.Swap(&b);
  }
  inline void Swap(OnCharacteristicChanged* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnCharacteristicChanged* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnCharacteristicChanged* New() const final {
    return CreateMaybeMessage<OnCharacteristicChanged>(nullptr);
  }

  OnCharacteristicChanged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnCharacteristicChanged>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const OnCharacteristicChanged& from);
  void MergeFrom(const OnCharacteristicChanged& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OnCharacteristicChanged* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OnCharacteristicChanged";
  }
  protected:
  explicit OnCharacteristicChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kCharacteristicFieldNumber = 2,
  };
  // string remote_id = 1;
  void clear_remote_id();
  const std::string& remote_id() const;
  void set_remote_id(const std::string& value);
  void set_remote_id(std::string&& value);
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  std::string* mutable_remote_id();
  std::string* release_remote_id();
  void set_allocated_remote_id(std::string* remote_id);
  private:
  const std::string& _internal_remote_id() const;
  void _internal_set_remote_id(const std::string& value);
  std::string* _internal_mutable_remote_id();
  public:

  // .BluetoothCharacteristic characteristic = 2;
  bool has_characteristic() const;
  private:
  bool _internal_has_characteristic() const;
  public:
  void clear_characteristic();
  const ::BluetoothCharacteristic& characteristic() const;
  ::BluetoothCharacteristic* release_characteristic();
  ::BluetoothCharacteristic* mutable_characteristic();
  void set_allocated_characteristic(::BluetoothCharacteristic* characteristic);
  private:
  const ::BluetoothCharacteristic& _internal_characteristic() const;
  ::BluetoothCharacteristic* _internal_mutable_characteristic();
  public:
  void unsafe_arena_set_allocated_characteristic(
      ::BluetoothCharacteristic* characteristic);
  ::BluetoothCharacteristic* unsafe_arena_release_characteristic();

  // @@protoc_insertion_point(class_scope:OnCharacteristicChanged)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_id_;
  ::BluetoothCharacteristic* characteristic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// -------------------------------------------------------------------

class DeviceStateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DeviceStateResponse) */ {
 public:
  inline DeviceStateResponse() : DeviceStateResponse(nullptr) {}
  virtual ~DeviceStateResponse();

  DeviceStateResponse(const DeviceStateResponse& from);
  DeviceStateResponse(DeviceStateResponse&& from) noexcept
    : DeviceStateResponse() {
    *this = ::std::move(from);
  }

  inline DeviceStateResponse& operator=(const DeviceStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceStateResponse& operator=(DeviceStateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DeviceStateResponse& default_instance();

  static inline const DeviceStateResponse* internal_default_instance() {
    return reinterpret_cast<const DeviceStateResponse*>(
               &_DeviceStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(DeviceStateResponse& a, DeviceStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceStateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceStateResponse* New() const final {
    return CreateMaybeMessage<DeviceStateResponse>(nullptr);
  }

  DeviceStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceStateResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceStateResponse& from);
  void MergeFrom(const DeviceStateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceStateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeviceStateResponse";
  }
  protected:
  explicit DeviceStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DeviceStateResponse_BluetoothDeviceState BluetoothDeviceState;
  static constexpr BluetoothDeviceState DISCONNECTED =
    DeviceStateResponse_BluetoothDeviceState_DISCONNECTED;
  static constexpr BluetoothDeviceState CONNECTING =
    DeviceStateResponse_BluetoothDeviceState_CONNECTING;
  static constexpr BluetoothDeviceState CONNECTED =
    DeviceStateResponse_BluetoothDeviceState_CONNECTED;
  static constexpr BluetoothDeviceState DISCONNECTING =
    DeviceStateResponse_BluetoothDeviceState_DISCONNECTING;
  static inline bool BluetoothDeviceState_IsValid(int value) {
    return DeviceStateResponse_BluetoothDeviceState_IsValid(value);
  }
  static constexpr BluetoothDeviceState BluetoothDeviceState_MIN =
    DeviceStateResponse_BluetoothDeviceState_BluetoothDeviceState_MIN;
  static constexpr BluetoothDeviceState BluetoothDeviceState_MAX =
    DeviceStateResponse_BluetoothDeviceState_BluetoothDeviceState_MAX;
  static constexpr int BluetoothDeviceState_ARRAYSIZE =
    DeviceStateResponse_BluetoothDeviceState_BluetoothDeviceState_ARRAYSIZE;
  template<typename T>
  static inline const std::string& BluetoothDeviceState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BluetoothDeviceState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BluetoothDeviceState_Name.");
    return DeviceStateResponse_BluetoothDeviceState_Name(enum_t_value);
  }
  static inline bool BluetoothDeviceState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BluetoothDeviceState* value) {
    return DeviceStateResponse_BluetoothDeviceState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // string remote_id = 1;
  void clear_remote_id();
  const std::string& remote_id() const;
  void set_remote_id(const std::string& value);
  void set_remote_id(std::string&& value);
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  std::string* mutable_remote_id();
  std::string* release_remote_id();
  void set_allocated_remote_id(std::string* remote_id);
  private:
  const std::string& _internal_remote_id() const;
  void _internal_set_remote_id(const std::string& value);
  std::string* _internal_mutable_remote_id();
  public:

  // .DeviceStateResponse.BluetoothDeviceState state = 2;
  void clear_state();
  ::DeviceStateResponse_BluetoothDeviceState state() const;
  void set_state(::DeviceStateResponse_BluetoothDeviceState value);
  private:
  ::DeviceStateResponse_BluetoothDeviceState _internal_state() const;
  void _internal_set_state(::DeviceStateResponse_BluetoothDeviceState value);
  public:

  // @@protoc_insertion_point(class_scope:DeviceStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_id_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// -------------------------------------------------------------------

class ConnectedDevicesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ConnectedDevicesResponse) */ {
 public:
  inline ConnectedDevicesResponse() : ConnectedDevicesResponse(nullptr) {}
  virtual ~ConnectedDevicesResponse();

  ConnectedDevicesResponse(const ConnectedDevicesResponse& from);
  ConnectedDevicesResponse(ConnectedDevicesResponse&& from) noexcept
    : ConnectedDevicesResponse() {
    *this = ::std::move(from);
  }

  inline ConnectedDevicesResponse& operator=(const ConnectedDevicesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectedDevicesResponse& operator=(ConnectedDevicesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ConnectedDevicesResponse& default_instance();

  static inline const ConnectedDevicesResponse* internal_default_instance() {
    return reinterpret_cast<const ConnectedDevicesResponse*>(
               &_ConnectedDevicesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ConnectedDevicesResponse& a, ConnectedDevicesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectedDevicesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectedDevicesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectedDevicesResponse* New() const final {
    return CreateMaybeMessage<ConnectedDevicesResponse>(nullptr);
  }

  ConnectedDevicesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectedDevicesResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ConnectedDevicesResponse& from);
  void MergeFrom(const ConnectedDevicesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConnectedDevicesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConnectedDevicesResponse";
  }
  protected:
  explicit ConnectedDevicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 1,
  };
  // repeated .BluetoothDevice devices = 1;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::BluetoothDevice* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothDevice >*
      mutable_devices();
  private:
  const ::BluetoothDevice& _internal_devices(int index) const;
  ::BluetoothDevice* _internal_add_devices();
  public:
  const ::BluetoothDevice& devices(int index) const;
  ::BluetoothDevice* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothDevice >&
      devices() const;

  // @@protoc_insertion_point(class_scope:ConnectedDevicesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothDevice > devices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// -------------------------------------------------------------------

class MtuSizeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:MtuSizeRequest) */ {
 public:
  inline MtuSizeRequest() : MtuSizeRequest(nullptr) {}
  virtual ~MtuSizeRequest();

  MtuSizeRequest(const MtuSizeRequest& from);
  MtuSizeRequest(MtuSizeRequest&& from) noexcept
    : MtuSizeRequest() {
    *this = ::std::move(from);
  }

  inline MtuSizeRequest& operator=(const MtuSizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MtuSizeRequest& operator=(MtuSizeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MtuSizeRequest& default_instance();

  static inline const MtuSizeRequest* internal_default_instance() {
    return reinterpret_cast<const MtuSizeRequest*>(
               &_MtuSizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(MtuSizeRequest& a, MtuSizeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MtuSizeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MtuSizeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MtuSizeRequest* New() const final {
    return CreateMaybeMessage<MtuSizeRequest>(nullptr);
  }

  MtuSizeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MtuSizeRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MtuSizeRequest& from);
  void MergeFrom(const MtuSizeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MtuSizeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MtuSizeRequest";
  }
  protected:
  explicit MtuSizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kMtuFieldNumber = 2,
  };
  // string remote_id = 1;
  void clear_remote_id();
  const std::string& remote_id() const;
  void set_remote_id(const std::string& value);
  void set_remote_id(std::string&& value);
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  std::string* mutable_remote_id();
  std::string* release_remote_id();
  void set_allocated_remote_id(std::string* remote_id);
  private:
  const std::string& _internal_remote_id() const;
  void _internal_set_remote_id(const std::string& value);
  std::string* _internal_mutable_remote_id();
  public:

  // uint32 mtu = 2;
  void clear_mtu();
  ::PROTOBUF_NAMESPACE_ID::uint32 mtu() const;
  void set_mtu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mtu() const;
  void _internal_set_mtu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:MtuSizeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mtu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// -------------------------------------------------------------------

class MtuSizeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:MtuSizeResponse) */ {
 public:
  inline MtuSizeResponse() : MtuSizeResponse(nullptr) {}
  virtual ~MtuSizeResponse();

  MtuSizeResponse(const MtuSizeResponse& from);
  MtuSizeResponse(MtuSizeResponse&& from) noexcept
    : MtuSizeResponse() {
    *this = ::std::move(from);
  }

  inline MtuSizeResponse& operator=(const MtuSizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MtuSizeResponse& operator=(MtuSizeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MtuSizeResponse& default_instance();

  static inline const MtuSizeResponse* internal_default_instance() {
    return reinterpret_cast<const MtuSizeResponse*>(
               &_MtuSizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(MtuSizeResponse& a, MtuSizeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MtuSizeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MtuSizeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MtuSizeResponse* New() const final {
    return CreateMaybeMessage<MtuSizeResponse>(nullptr);
  }

  MtuSizeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MtuSizeResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MtuSizeResponse& from);
  void MergeFrom(const MtuSizeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MtuSizeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MtuSizeResponse";
  }
  protected:
  explicit MtuSizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kMtuFieldNumber = 2,
  };
  // string remote_id = 1;
  void clear_remote_id();
  const std::string& remote_id() const;
  void set_remote_id(const std::string& value);
  void set_remote_id(std::string&& value);
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  std::string* mutable_remote_id();
  std::string* release_remote_id();
  void set_allocated_remote_id(std::string* remote_id);
  private:
  const std::string& _internal_remote_id() const;
  void _internal_set_remote_id(const std::string& value);
  std::string* _internal_mutable_remote_id();
  public:

  // uint32 mtu = 2;
  void clear_mtu();
  ::PROTOBUF_NAMESPACE_ID::uint32 mtu() const;
  void set_mtu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mtu() const;
  void _internal_set_mtu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:MtuSizeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mtu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flutterblue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Int32Value

// int32 value = 1;
inline void Int32Value::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Value::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Value::value() const {
  // @@protoc_insertion_point(field_get:Int32Value.value)
  return _internal_value();
}
inline void Int32Value::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void Int32Value::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Int32Value.value)
}

// -------------------------------------------------------------------

// BluetoothState

// .BluetoothState.State state = 1;
inline void BluetoothState::clear_state() {
  state_ = 0;
}
inline ::BluetoothState_State BluetoothState::_internal_state() const {
  return static_cast< ::BluetoothState_State >(state_);
}
inline ::BluetoothState_State BluetoothState::state() const {
  // @@protoc_insertion_point(field_get:BluetoothState.state)
  return _internal_state();
}
inline void BluetoothState::_internal_set_state(::BluetoothState_State value) {
  
  state_ = value;
}
inline void BluetoothState::set_state(::BluetoothState_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:BluetoothState.state)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AdvertisementData

// string local_name = 1;
inline void AdvertisementData::clear_local_name() {
  local_name_.ClearToEmpty();
}
inline const std::string& AdvertisementData::local_name() const {
  // @@protoc_insertion_point(field_get:AdvertisementData.local_name)
  return _internal_local_name();
}
inline void AdvertisementData::set_local_name(const std::string& value) {
  _internal_set_local_name(value);
  // @@protoc_insertion_point(field_set:AdvertisementData.local_name)
}
inline std::string* AdvertisementData::mutable_local_name() {
  // @@protoc_insertion_point(field_mutable:AdvertisementData.local_name)
  return _internal_mutable_local_name();
}
inline const std::string& AdvertisementData::_internal_local_name() const {
  return local_name_.Get();
}
inline void AdvertisementData::_internal_set_local_name(const std::string& value) {
  
  local_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AdvertisementData::set_local_name(std::string&& value) {
  
  local_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AdvertisementData.local_name)
}
inline void AdvertisementData::set_local_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AdvertisementData.local_name)
}
inline void AdvertisementData::set_local_name(const char* value,
    size_t size) {
  
  local_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AdvertisementData.local_name)
}
inline std::string* AdvertisementData::_internal_mutable_local_name() {
  
  return local_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AdvertisementData::release_local_name() {
  // @@protoc_insertion_point(field_release:AdvertisementData.local_name)
  return local_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AdvertisementData::set_allocated_local_name(std::string* local_name) {
  if (local_name != nullptr) {
    
  } else {
    
  }
  local_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AdvertisementData.local_name)
}

// .Int32Value tx_power_level = 2;
inline bool AdvertisementData::_internal_has_tx_power_level() const {
  return this != internal_default_instance() && tx_power_level_ != nullptr;
}
inline bool AdvertisementData::has_tx_power_level() const {
  return _internal_has_tx_power_level();
}
inline void AdvertisementData::clear_tx_power_level() {
  if (GetArena() == nullptr && tx_power_level_ != nullptr) {
    delete tx_power_level_;
  }
  tx_power_level_ = nullptr;
}
inline const ::Int32Value& AdvertisementData::_internal_tx_power_level() const {
  const ::Int32Value* p = tx_power_level_;
  return p != nullptr ? *p : reinterpret_cast<const ::Int32Value&>(
      ::_Int32Value_default_instance_);
}
inline const ::Int32Value& AdvertisementData::tx_power_level() const {
  // @@protoc_insertion_point(field_get:AdvertisementData.tx_power_level)
  return _internal_tx_power_level();
}
inline void AdvertisementData::unsafe_arena_set_allocated_tx_power_level(
    ::Int32Value* tx_power_level) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx_power_level_);
  }
  tx_power_level_ = tx_power_level;
  if (tx_power_level) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AdvertisementData.tx_power_level)
}
inline ::Int32Value* AdvertisementData::release_tx_power_level() {
  
  ::Int32Value* temp = tx_power_level_;
  tx_power_level_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Int32Value* AdvertisementData::unsafe_arena_release_tx_power_level() {
  // @@protoc_insertion_point(field_release:AdvertisementData.tx_power_level)
  
  ::Int32Value* temp = tx_power_level_;
  tx_power_level_ = nullptr;
  return temp;
}
inline ::Int32Value* AdvertisementData::_internal_mutable_tx_power_level() {
  
  if (tx_power_level_ == nullptr) {
    auto* p = CreateMaybeMessage<::Int32Value>(GetArena());
    tx_power_level_ = p;
  }
  return tx_power_level_;
}
inline ::Int32Value* AdvertisementData::mutable_tx_power_level() {
  // @@protoc_insertion_point(field_mutable:AdvertisementData.tx_power_level)
  return _internal_mutable_tx_power_level();
}
inline void AdvertisementData::set_allocated_tx_power_level(::Int32Value* tx_power_level) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tx_power_level_;
  }
  if (tx_power_level) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tx_power_level);
    if (message_arena != submessage_arena) {
      tx_power_level = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tx_power_level, submessage_arena);
    }
    
  } else {
    
  }
  tx_power_level_ = tx_power_level;
  // @@protoc_insertion_point(field_set_allocated:AdvertisementData.tx_power_level)
}

// bool connectable = 3;
inline void AdvertisementData::clear_connectable() {
  connectable_ = false;
}
inline bool AdvertisementData::_internal_connectable() const {
  return connectable_;
}
inline bool AdvertisementData::connectable() const {
  // @@protoc_insertion_point(field_get:AdvertisementData.connectable)
  return _internal_connectable();
}
inline void AdvertisementData::_internal_set_connectable(bool value) {
  
  connectable_ = value;
}
inline void AdvertisementData::set_connectable(bool value) {
  _internal_set_connectable(value);
  // @@protoc_insertion_point(field_set:AdvertisementData.connectable)
}

// map<int32, bytes> manufacturer_data = 4;
inline int AdvertisementData::_internal_manufacturer_data_size() const {
  return manufacturer_data_.size();
}
inline int AdvertisementData::manufacturer_data_size() const {
  return _internal_manufacturer_data_size();
}
inline void AdvertisementData::clear_manufacturer_data() {
  manufacturer_data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
AdvertisementData::_internal_manufacturer_data() const {
  return manufacturer_data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
AdvertisementData::manufacturer_data() const {
  // @@protoc_insertion_point(field_map:AdvertisementData.manufacturer_data)
  return _internal_manufacturer_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
AdvertisementData::_internal_mutable_manufacturer_data() {
  return manufacturer_data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
AdvertisementData::mutable_manufacturer_data() {
  // @@protoc_insertion_point(field_mutable_map:AdvertisementData.manufacturer_data)
  return _internal_mutable_manufacturer_data();
}

// map<string, bytes> service_data = 5;
inline int AdvertisementData::_internal_service_data_size() const {
  return service_data_.size();
}
inline int AdvertisementData::service_data_size() const {
  return _internal_service_data_size();
}
inline void AdvertisementData::clear_service_data() {
  service_data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AdvertisementData::_internal_service_data() const {
  return service_data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AdvertisementData::service_data() const {
  // @@protoc_insertion_point(field_map:AdvertisementData.service_data)
  return _internal_service_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AdvertisementData::_internal_mutable_service_data() {
  return service_data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AdvertisementData::mutable_service_data() {
  // @@protoc_insertion_point(field_mutable_map:AdvertisementData.service_data)
  return _internal_mutable_service_data();
}

// repeated string service_uuids = 6;
inline int AdvertisementData::_internal_service_uuids_size() const {
  return service_uuids_.size();
}
inline int AdvertisementData::service_uuids_size() const {
  return _internal_service_uuids_size();
}
inline void AdvertisementData::clear_service_uuids() {
  service_uuids_.Clear();
}
inline std::string* AdvertisementData::add_service_uuids() {
  // @@protoc_insertion_point(field_add_mutable:AdvertisementData.service_uuids)
  return _internal_add_service_uuids();
}
inline const std::string& AdvertisementData::_internal_service_uuids(int index) const {
  return service_uuids_.Get(index);
}
inline const std::string& AdvertisementData::service_uuids(int index) const {
  // @@protoc_insertion_point(field_get:AdvertisementData.service_uuids)
  return _internal_service_uuids(index);
}
inline std::string* AdvertisementData::mutable_service_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:AdvertisementData.service_uuids)
  return service_uuids_.Mutable(index);
}
inline void AdvertisementData::set_service_uuids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:AdvertisementData.service_uuids)
  service_uuids_.Mutable(index)->assign(value);
}
inline void AdvertisementData::set_service_uuids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:AdvertisementData.service_uuids)
  service_uuids_.Mutable(index)->assign(std::move(value));
}
inline void AdvertisementData::set_service_uuids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  service_uuids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AdvertisementData.service_uuids)
}
inline void AdvertisementData::set_service_uuids(int index, const char* value, size_t size) {
  service_uuids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AdvertisementData.service_uuids)
}
inline std::string* AdvertisementData::_internal_add_service_uuids() {
  return service_uuids_.Add();
}
inline void AdvertisementData::add_service_uuids(const std::string& value) {
  service_uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AdvertisementData.service_uuids)
}
inline void AdvertisementData::add_service_uuids(std::string&& value) {
  service_uuids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AdvertisementData.service_uuids)
}
inline void AdvertisementData::add_service_uuids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  service_uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AdvertisementData.service_uuids)
}
inline void AdvertisementData::add_service_uuids(const char* value, size_t size) {
  service_uuids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AdvertisementData.service_uuids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AdvertisementData::service_uuids() const {
  // @@protoc_insertion_point(field_list:AdvertisementData.service_uuids)
  return service_uuids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AdvertisementData::mutable_service_uuids() {
  // @@protoc_insertion_point(field_mutable_list:AdvertisementData.service_uuids)
  return &service_uuids_;
}

// -------------------------------------------------------------------

// ScanSettings

// int32 android_scan_mode = 1;
inline void ScanSettings::clear_android_scan_mode() {
  android_scan_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScanSettings::_internal_android_scan_mode() const {
  return android_scan_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScanSettings::android_scan_mode() const {
  // @@protoc_insertion_point(field_get:ScanSettings.android_scan_mode)
  return _internal_android_scan_mode();
}
inline void ScanSettings::_internal_set_android_scan_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  android_scan_mode_ = value;
}
inline void ScanSettings::set_android_scan_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_android_scan_mode(value);
  // @@protoc_insertion_point(field_set:ScanSettings.android_scan_mode)
}

// repeated string service_uuids = 2;
inline int ScanSettings::_internal_service_uuids_size() const {
  return service_uuids_.size();
}
inline int ScanSettings::service_uuids_size() const {
  return _internal_service_uuids_size();
}
inline void ScanSettings::clear_service_uuids() {
  service_uuids_.Clear();
}
inline std::string* ScanSettings::add_service_uuids() {
  // @@protoc_insertion_point(field_add_mutable:ScanSettings.service_uuids)
  return _internal_add_service_uuids();
}
inline const std::string& ScanSettings::_internal_service_uuids(int index) const {
  return service_uuids_.Get(index);
}
inline const std::string& ScanSettings::service_uuids(int index) const {
  // @@protoc_insertion_point(field_get:ScanSettings.service_uuids)
  return _internal_service_uuids(index);
}
inline std::string* ScanSettings::mutable_service_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:ScanSettings.service_uuids)
  return service_uuids_.Mutable(index);
}
inline void ScanSettings::set_service_uuids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ScanSettings.service_uuids)
  service_uuids_.Mutable(index)->assign(value);
}
inline void ScanSettings::set_service_uuids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ScanSettings.service_uuids)
  service_uuids_.Mutable(index)->assign(std::move(value));
}
inline void ScanSettings::set_service_uuids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  service_uuids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ScanSettings.service_uuids)
}
inline void ScanSettings::set_service_uuids(int index, const char* value, size_t size) {
  service_uuids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ScanSettings.service_uuids)
}
inline std::string* ScanSettings::_internal_add_service_uuids() {
  return service_uuids_.Add();
}
inline void ScanSettings::add_service_uuids(const std::string& value) {
  service_uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ScanSettings.service_uuids)
}
inline void ScanSettings::add_service_uuids(std::string&& value) {
  service_uuids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ScanSettings.service_uuids)
}
inline void ScanSettings::add_service_uuids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  service_uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ScanSettings.service_uuids)
}
inline void ScanSettings::add_service_uuids(const char* value, size_t size) {
  service_uuids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ScanSettings.service_uuids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ScanSettings::service_uuids() const {
  // @@protoc_insertion_point(field_list:ScanSettings.service_uuids)
  return service_uuids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ScanSettings::mutable_service_uuids() {
  // @@protoc_insertion_point(field_mutable_list:ScanSettings.service_uuids)
  return &service_uuids_;
}

// bool allow_duplicates = 3;
inline void ScanSettings::clear_allow_duplicates() {
  allow_duplicates_ = false;
}
inline bool ScanSettings::_internal_allow_duplicates() const {
  return allow_duplicates_;
}
inline bool ScanSettings::allow_duplicates() const {
  // @@protoc_insertion_point(field_get:ScanSettings.allow_duplicates)
  return _internal_allow_duplicates();
}
inline void ScanSettings::_internal_set_allow_duplicates(bool value) {
  
  allow_duplicates_ = value;
}
inline void ScanSettings::set_allow_duplicates(bool value) {
  _internal_set_allow_duplicates(value);
  // @@protoc_insertion_point(field_set:ScanSettings.allow_duplicates)
}

// -------------------------------------------------------------------

// ScanResult

// .BluetoothDevice device = 1;
inline bool ScanResult::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool ScanResult::has_device() const {
  return _internal_has_device();
}
inline void ScanResult::clear_device() {
  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
inline const ::BluetoothDevice& ScanResult::_internal_device() const {
  const ::BluetoothDevice* p = device_;
  return p != nullptr ? *p : reinterpret_cast<const ::BluetoothDevice&>(
      ::_BluetoothDevice_default_instance_);
}
inline const ::BluetoothDevice& ScanResult::device() const {
  // @@protoc_insertion_point(field_get:ScanResult.device)
  return _internal_device();
}
inline void ScanResult::unsafe_arena_set_allocated_device(
    ::BluetoothDevice* device) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ScanResult.device)
}
inline ::BluetoothDevice* ScanResult::release_device() {
  
  ::BluetoothDevice* temp = device_;
  device_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BluetoothDevice* ScanResult::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:ScanResult.device)
  
  ::BluetoothDevice* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::BluetoothDevice* ScanResult::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::BluetoothDevice>(GetArena());
    device_ = p;
  }
  return device_;
}
inline ::BluetoothDevice* ScanResult::mutable_device() {
  // @@protoc_insertion_point(field_mutable:ScanResult.device)
  return _internal_mutable_device();
}
inline void ScanResult::set_allocated_device(::BluetoothDevice* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:ScanResult.device)
}

// .AdvertisementData advertisement_data = 2;
inline bool ScanResult::_internal_has_advertisement_data() const {
  return this != internal_default_instance() && advertisement_data_ != nullptr;
}
inline bool ScanResult::has_advertisement_data() const {
  return _internal_has_advertisement_data();
}
inline void ScanResult::clear_advertisement_data() {
  if (GetArena() == nullptr && advertisement_data_ != nullptr) {
    delete advertisement_data_;
  }
  advertisement_data_ = nullptr;
}
inline const ::AdvertisementData& ScanResult::_internal_advertisement_data() const {
  const ::AdvertisementData* p = advertisement_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::AdvertisementData&>(
      ::_AdvertisementData_default_instance_);
}
inline const ::AdvertisementData& ScanResult::advertisement_data() const {
  // @@protoc_insertion_point(field_get:ScanResult.advertisement_data)
  return _internal_advertisement_data();
}
inline void ScanResult::unsafe_arena_set_allocated_advertisement_data(
    ::AdvertisementData* advertisement_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advertisement_data_);
  }
  advertisement_data_ = advertisement_data;
  if (advertisement_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ScanResult.advertisement_data)
}
inline ::AdvertisementData* ScanResult::release_advertisement_data() {
  
  ::AdvertisementData* temp = advertisement_data_;
  advertisement_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AdvertisementData* ScanResult::unsafe_arena_release_advertisement_data() {
  // @@protoc_insertion_point(field_release:ScanResult.advertisement_data)
  
  ::AdvertisementData* temp = advertisement_data_;
  advertisement_data_ = nullptr;
  return temp;
}
inline ::AdvertisementData* ScanResult::_internal_mutable_advertisement_data() {
  
  if (advertisement_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::AdvertisementData>(GetArena());
    advertisement_data_ = p;
  }
  return advertisement_data_;
}
inline ::AdvertisementData* ScanResult::mutable_advertisement_data() {
  // @@protoc_insertion_point(field_mutable:ScanResult.advertisement_data)
  return _internal_mutable_advertisement_data();
}
inline void ScanResult::set_allocated_advertisement_data(::AdvertisementData* advertisement_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete advertisement_data_;
  }
  if (advertisement_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(advertisement_data);
    if (message_arena != submessage_arena) {
      advertisement_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advertisement_data, submessage_arena);
    }
    
  } else {
    
  }
  advertisement_data_ = advertisement_data;
  // @@protoc_insertion_point(field_set_allocated:ScanResult.advertisement_data)
}

// int32 rssi = 3;
inline void ScanResult::clear_rssi() {
  rssi_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScanResult::_internal_rssi() const {
  return rssi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScanResult::rssi() const {
  // @@protoc_insertion_point(field_get:ScanResult.rssi)
  return _internal_rssi();
}
inline void ScanResult::_internal_set_rssi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rssi_ = value;
}
inline void ScanResult::set_rssi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rssi(value);
  // @@protoc_insertion_point(field_set:ScanResult.rssi)
}

// -------------------------------------------------------------------

// ConnectRequest

// string remote_id = 1;
inline void ConnectRequest::clear_remote_id() {
  remote_id_.ClearToEmpty();
}
inline const std::string& ConnectRequest::remote_id() const {
  // @@protoc_insertion_point(field_get:ConnectRequest.remote_id)
  return _internal_remote_id();
}
inline void ConnectRequest::set_remote_id(const std::string& value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:ConnectRequest.remote_id)
}
inline std::string* ConnectRequest::mutable_remote_id() {
  // @@protoc_insertion_point(field_mutable:ConnectRequest.remote_id)
  return _internal_mutable_remote_id();
}
inline const std::string& ConnectRequest::_internal_remote_id() const {
  return remote_id_.Get();
}
inline void ConnectRequest::_internal_set_remote_id(const std::string& value) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConnectRequest::set_remote_id(std::string&& value) {
  
  remote_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConnectRequest.remote_id)
}
inline void ConnectRequest::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ConnectRequest.remote_id)
}
inline void ConnectRequest::set_remote_id(const char* value,
    size_t size) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConnectRequest.remote_id)
}
inline std::string* ConnectRequest::_internal_mutable_remote_id() {
  
  return remote_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConnectRequest::release_remote_id() {
  // @@protoc_insertion_point(field_release:ConnectRequest.remote_id)
  return remote_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConnectRequest::set_allocated_remote_id(std::string* remote_id) {
  if (remote_id != nullptr) {
    
  } else {
    
  }
  remote_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConnectRequest.remote_id)
}

// bool android_auto_connect = 2;
inline void ConnectRequest::clear_android_auto_connect() {
  android_auto_connect_ = false;
}
inline bool ConnectRequest::_internal_android_auto_connect() const {
  return android_auto_connect_;
}
inline bool ConnectRequest::android_auto_connect() const {
  // @@protoc_insertion_point(field_get:ConnectRequest.android_auto_connect)
  return _internal_android_auto_connect();
}
inline void ConnectRequest::_internal_set_android_auto_connect(bool value) {
  
  android_auto_connect_ = value;
}
inline void ConnectRequest::set_android_auto_connect(bool value) {
  _internal_set_android_auto_connect(value);
  // @@protoc_insertion_point(field_set:ConnectRequest.android_auto_connect)
}

// -------------------------------------------------------------------

// BluetoothDevice

// string remote_id = 1;
inline void BluetoothDevice::clear_remote_id() {
  remote_id_.ClearToEmpty();
}
inline const std::string& BluetoothDevice::remote_id() const {
  // @@protoc_insertion_point(field_get:BluetoothDevice.remote_id)
  return _internal_remote_id();
}
inline void BluetoothDevice::set_remote_id(const std::string& value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:BluetoothDevice.remote_id)
}
inline std::string* BluetoothDevice::mutable_remote_id() {
  // @@protoc_insertion_point(field_mutable:BluetoothDevice.remote_id)
  return _internal_mutable_remote_id();
}
inline const std::string& BluetoothDevice::_internal_remote_id() const {
  return remote_id_.Get();
}
inline void BluetoothDevice::_internal_set_remote_id(const std::string& value) {
  
  remote_id_.Set(nullptr, value, GetArena());
}
inline void BluetoothDevice::set_remote_id(std::string&& value) {
  
  remote_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BluetoothDevice.remote_id)
}
inline void BluetoothDevice::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BluetoothDevice.remote_id)
}
inline void BluetoothDevice::set_remote_id(const char* value,
    size_t size) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BluetoothDevice.remote_id)
}
inline std::string* BluetoothDevice::_internal_mutable_remote_id() {
  
  return remote_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BluetoothDevice::release_remote_id() {
  // @@protoc_insertion_point(field_release:BluetoothDevice.remote_id)
  return remote_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BluetoothDevice::set_allocated_remote_id(std::string* remote_id) {
  if (remote_id != nullptr) {
    
  } else {
    
  }
  remote_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BluetoothDevice.remote_id)
}

// string name = 2;
inline void BluetoothDevice::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& BluetoothDevice::name() const {
  // @@protoc_insertion_point(field_get:BluetoothDevice.name)
  return _internal_name();
}
inline void BluetoothDevice::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:BluetoothDevice.name)
}
inline std::string* BluetoothDevice::mutable_name() {
  // @@protoc_insertion_point(field_mutable:BluetoothDevice.name)
  return _internal_mutable_name();
}
inline const std::string& BluetoothDevice::_internal_name() const {
  return name_.Get();
}
inline void BluetoothDevice::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BluetoothDevice::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BluetoothDevice.name)
}
inline void BluetoothDevice::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(nullptr, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BluetoothDevice.name)
}
inline void BluetoothDevice::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BluetoothDevice.name)
}
inline std::string* BluetoothDevice::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BluetoothDevice::release_name() {
  // @@protoc_insertion_point(field_release:BluetoothDevice.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BluetoothDevice::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BluetoothDevice.name)
}

// .BluetoothDevice.Type type = 3;
inline void BluetoothDevice::clear_type() {
  type_ = 0;
}
inline ::BluetoothDevice_Type BluetoothDevice::_internal_type() const {
  return static_cast< ::BluetoothDevice_Type >(type_);
}
inline ::BluetoothDevice_Type BluetoothDevice::type() const {
  // @@protoc_insertion_point(field_get:BluetoothDevice.type)
  return _internal_type();
}
inline void BluetoothDevice::_internal_set_type(::BluetoothDevice_Type value) {
  
  type_ = value;
}
inline void BluetoothDevice::set_type(::BluetoothDevice_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:BluetoothDevice.type)
}

// -------------------------------------------------------------------

// BluetoothService

// string uuid = 1;
inline void BluetoothService::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& BluetoothService::uuid() const {
  // @@protoc_insertion_point(field_get:BluetoothService.uuid)
  return _internal_uuid();
}
inline void BluetoothService::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:BluetoothService.uuid)
}
inline std::string* BluetoothService::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:BluetoothService.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& BluetoothService::_internal_uuid() const {
  return uuid_.Get();
}
inline void BluetoothService::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BluetoothService::set_uuid(std::string&& value) {
  
  uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BluetoothService.uuid)
}
inline void BluetoothService::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BluetoothService.uuid)
}
inline void BluetoothService::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BluetoothService.uuid)
}
inline std::string* BluetoothService::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BluetoothService::release_uuid() {
  // @@protoc_insertion_point(field_release:BluetoothService.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BluetoothService::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BluetoothService.uuid)
}

// string remote_id = 2;
inline void BluetoothService::clear_remote_id() {
  remote_id_.ClearToEmpty();
}
inline const std::string& BluetoothService::remote_id() const {
  // @@protoc_insertion_point(field_get:BluetoothService.remote_id)
  return _internal_remote_id();
}
inline void BluetoothService::set_remote_id(const std::string& value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:BluetoothService.remote_id)
}
inline std::string* BluetoothService::mutable_remote_id() {
  // @@protoc_insertion_point(field_mutable:BluetoothService.remote_id)
  return _internal_mutable_remote_id();
}
inline const std::string& BluetoothService::_internal_remote_id() const {
  return remote_id_.Get();
}
inline void BluetoothService::_internal_set_remote_id(const std::string& value) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BluetoothService::set_remote_id(std::string&& value) {
  
  remote_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BluetoothService.remote_id)
}
inline void BluetoothService::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BluetoothService.remote_id)
}
inline void BluetoothService::set_remote_id(const char* value,
    size_t size) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BluetoothService.remote_id)
}
inline std::string* BluetoothService::_internal_mutable_remote_id() {
  
  return remote_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BluetoothService::release_remote_id() {
  // @@protoc_insertion_point(field_release:BluetoothService.remote_id)
  return remote_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BluetoothService::set_allocated_remote_id(std::string* remote_id) {
  if (remote_id != nullptr) {
    
  } else {
    
  }
  remote_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BluetoothService.remote_id)
}

// bool is_primary = 3;
inline void BluetoothService::clear_is_primary() {
  is_primary_ = false;
}
inline bool BluetoothService::_internal_is_primary() const {
  return is_primary_;
}
inline bool BluetoothService::is_primary() const {
  // @@protoc_insertion_point(field_get:BluetoothService.is_primary)
  return _internal_is_primary();
}
inline void BluetoothService::_internal_set_is_primary(bool value) {
  
  is_primary_ = value;
}
inline void BluetoothService::set_is_primary(bool value) {
  _internal_set_is_primary(value);
  // @@protoc_insertion_point(field_set:BluetoothService.is_primary)
}

// repeated .BluetoothCharacteristic characteristics = 4;
inline int BluetoothService::_internal_characteristics_size() const {
  return characteristics_.size();
}
inline int BluetoothService::characteristics_size() const {
  return _internal_characteristics_size();
}
inline void BluetoothService::clear_characteristics() {
  characteristics_.Clear();
}
inline ::BluetoothCharacteristic* BluetoothService::mutable_characteristics(int index) {
  // @@protoc_insertion_point(field_mutable:BluetoothService.characteristics)
  return characteristics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothCharacteristic >*
BluetoothService::mutable_characteristics() {
  // @@protoc_insertion_point(field_mutable_list:BluetoothService.characteristics)
  return &characteristics_;
}
inline const ::BluetoothCharacteristic& BluetoothService::_internal_characteristics(int index) const {
  return characteristics_.Get(index);
}
inline const ::BluetoothCharacteristic& BluetoothService::characteristics(int index) const {
  // @@protoc_insertion_point(field_get:BluetoothService.characteristics)
  return _internal_characteristics(index);
}
inline ::BluetoothCharacteristic* BluetoothService::_internal_add_characteristics() {
  return characteristics_.Add();
}
inline ::BluetoothCharacteristic* BluetoothService::add_characteristics() {
  // @@protoc_insertion_point(field_add:BluetoothService.characteristics)
  return _internal_add_characteristics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothCharacteristic >&
BluetoothService::characteristics() const {
  // @@protoc_insertion_point(field_list:BluetoothService.characteristics)
  return characteristics_;
}

// repeated .BluetoothService included_services = 5;
inline int BluetoothService::_internal_included_services_size() const {
  return included_services_.size();
}
inline int BluetoothService::included_services_size() const {
  return _internal_included_services_size();
}
inline void BluetoothService::clear_included_services() {
  included_services_.Clear();
}
inline ::BluetoothService* BluetoothService::mutable_included_services(int index) {
  // @@protoc_insertion_point(field_mutable:BluetoothService.included_services)
  return included_services_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothService >*
BluetoothService::mutable_included_services() {
  // @@protoc_insertion_point(field_mutable_list:BluetoothService.included_services)
  return &included_services_;
}
inline const ::BluetoothService& BluetoothService::_internal_included_services(int index) const {
  return included_services_.Get(index);
}
inline const ::BluetoothService& BluetoothService::included_services(int index) const {
  // @@protoc_insertion_point(field_get:BluetoothService.included_services)
  return _internal_included_services(index);
}
inline ::BluetoothService* BluetoothService::_internal_add_included_services() {
  return included_services_.Add();
}
inline ::BluetoothService* BluetoothService::add_included_services() {
  // @@protoc_insertion_point(field_add:BluetoothService.included_services)
  return _internal_add_included_services();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothService >&
BluetoothService::included_services() const {
  // @@protoc_insertion_point(field_list:BluetoothService.included_services)
  return included_services_;
}

// -------------------------------------------------------------------

// BluetoothCharacteristic

// string uuid = 1;
inline void BluetoothCharacteristic::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& BluetoothCharacteristic::uuid() const {
  // @@protoc_insertion_point(field_get:BluetoothCharacteristic.uuid)
  return _internal_uuid();
}
inline void BluetoothCharacteristic::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:BluetoothCharacteristic.uuid)
}
inline std::string* BluetoothCharacteristic::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:BluetoothCharacteristic.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& BluetoothCharacteristic::_internal_uuid() const {
  return uuid_.Get();
}
inline void BluetoothCharacteristic::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BluetoothCharacteristic::set_uuid(std::string&& value) {
  
  uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BluetoothCharacteristic.uuid)
}
inline void BluetoothCharacteristic::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BluetoothCharacteristic.uuid)
}
inline void BluetoothCharacteristic::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BluetoothCharacteristic.uuid)
}
inline std::string* BluetoothCharacteristic::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BluetoothCharacteristic::release_uuid() {
  // @@protoc_insertion_point(field_release:BluetoothCharacteristic.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BluetoothCharacteristic::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BluetoothCharacteristic.uuid)
}

// string remote_id = 2;
inline void BluetoothCharacteristic::clear_remote_id() {
  remote_id_.ClearToEmpty();
}
inline const std::string& BluetoothCharacteristic::remote_id() const {
  // @@protoc_insertion_point(field_get:BluetoothCharacteristic.remote_id)
  return _internal_remote_id();
}
inline void BluetoothCharacteristic::set_remote_id(const std::string& value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:BluetoothCharacteristic.remote_id)
}
inline std::string* BluetoothCharacteristic::mutable_remote_id() {
  // @@protoc_insertion_point(field_mutable:BluetoothCharacteristic.remote_id)
  return _internal_mutable_remote_id();
}
inline const std::string& BluetoothCharacteristic::_internal_remote_id() const {
  return remote_id_.Get();
}
inline void BluetoothCharacteristic::_internal_set_remote_id(const std::string& value) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BluetoothCharacteristic::set_remote_id(std::string&& value) {
  
  remote_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BluetoothCharacteristic.remote_id)
}
inline void BluetoothCharacteristic::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BluetoothCharacteristic.remote_id)
}
inline void BluetoothCharacteristic::set_remote_id(const char* value,
    size_t size) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BluetoothCharacteristic.remote_id)
}
inline std::string* BluetoothCharacteristic::_internal_mutable_remote_id() {
  
  return remote_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BluetoothCharacteristic::release_remote_id() {
  // @@protoc_insertion_point(field_release:BluetoothCharacteristic.remote_id)
  return remote_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BluetoothCharacteristic::set_allocated_remote_id(std::string* remote_id) {
  if (remote_id != nullptr) {
    
  } else {
    
  }
  remote_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BluetoothCharacteristic.remote_id)
}

// string serviceUuid = 3;
inline void BluetoothCharacteristic::clear_serviceuuid() {
  serviceuuid_.ClearToEmpty();
}
inline const std::string& BluetoothCharacteristic::serviceuuid() const {
  // @@protoc_insertion_point(field_get:BluetoothCharacteristic.serviceUuid)
  return _internal_serviceuuid();
}
inline void BluetoothCharacteristic::set_serviceuuid(const std::string& value) {
  _internal_set_serviceuuid(value);
  // @@protoc_insertion_point(field_set:BluetoothCharacteristic.serviceUuid)
}
inline std::string* BluetoothCharacteristic::mutable_serviceuuid() {
  // @@protoc_insertion_point(field_mutable:BluetoothCharacteristic.serviceUuid)
  return _internal_mutable_serviceuuid();
}
inline const std::string& BluetoothCharacteristic::_internal_serviceuuid() const {
  return serviceuuid_.Get();
}
inline void BluetoothCharacteristic::_internal_set_serviceuuid(const std::string& value) {
  
  serviceuuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BluetoothCharacteristic::set_serviceuuid(std::string&& value) {
  
  serviceuuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BluetoothCharacteristic.serviceUuid)
}
inline void BluetoothCharacteristic::set_serviceuuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serviceuuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BluetoothCharacteristic.serviceUuid)
}
inline void BluetoothCharacteristic::set_serviceuuid(const char* value,
    size_t size) {
  
  serviceuuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BluetoothCharacteristic.serviceUuid)
}
inline std::string* BluetoothCharacteristic::_internal_mutable_serviceuuid() {
  
  return serviceuuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BluetoothCharacteristic::release_serviceuuid() {
  // @@protoc_insertion_point(field_release:BluetoothCharacteristic.serviceUuid)
  return serviceuuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BluetoothCharacteristic::set_allocated_serviceuuid(std::string* serviceuuid) {
  if (serviceuuid != nullptr) {
    
  } else {
    
  }
  serviceuuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serviceuuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BluetoothCharacteristic.serviceUuid)
}

// string secondaryServiceUuid = 4;
inline void BluetoothCharacteristic::clear_secondaryserviceuuid() {
  secondaryserviceuuid_.ClearToEmpty();
}
inline const std::string& BluetoothCharacteristic::secondaryserviceuuid() const {
  // @@protoc_insertion_point(field_get:BluetoothCharacteristic.secondaryServiceUuid)
  return _internal_secondaryserviceuuid();
}
inline void BluetoothCharacteristic::set_secondaryserviceuuid(const std::string& value) {
  _internal_set_secondaryserviceuuid(value);
  // @@protoc_insertion_point(field_set:BluetoothCharacteristic.secondaryServiceUuid)
}
inline std::string* BluetoothCharacteristic::mutable_secondaryserviceuuid() {
  // @@protoc_insertion_point(field_mutable:BluetoothCharacteristic.secondaryServiceUuid)
  return _internal_mutable_secondaryserviceuuid();
}
inline const std::string& BluetoothCharacteristic::_internal_secondaryserviceuuid() const {
  return secondaryserviceuuid_.Get();
}
inline void BluetoothCharacteristic::_internal_set_secondaryserviceuuid(const std::string& value) {
  
  secondaryserviceuuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BluetoothCharacteristic::set_secondaryserviceuuid(std::string&& value) {
  
  secondaryserviceuuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BluetoothCharacteristic.secondaryServiceUuid)
}
inline void BluetoothCharacteristic::set_secondaryserviceuuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secondaryserviceuuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BluetoothCharacteristic.secondaryServiceUuid)
}
inline void BluetoothCharacteristic::set_secondaryserviceuuid(const char* value,
    size_t size) {
  
  secondaryserviceuuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BluetoothCharacteristic.secondaryServiceUuid)
}
inline std::string* BluetoothCharacteristic::_internal_mutable_secondaryserviceuuid() {
  
  return secondaryserviceuuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BluetoothCharacteristic::release_secondaryserviceuuid() {
  // @@protoc_insertion_point(field_release:BluetoothCharacteristic.secondaryServiceUuid)
  return secondaryserviceuuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BluetoothCharacteristic::set_allocated_secondaryserviceuuid(std::string* secondaryserviceuuid) {
  if (secondaryserviceuuid != nullptr) {
    
  } else {
    
  }
  secondaryserviceuuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secondaryserviceuuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BluetoothCharacteristic.secondaryServiceUuid)
}

// repeated .BluetoothDescriptor descriptors = 5;
inline int BluetoothCharacteristic::_internal_descriptors_size() const {
  return descriptors_.size();
}
inline int BluetoothCharacteristic::descriptors_size() const {
  return _internal_descriptors_size();
}
inline void BluetoothCharacteristic::clear_descriptors() {
  descriptors_.Clear();
}
inline ::BluetoothDescriptor* BluetoothCharacteristic::mutable_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:BluetoothCharacteristic.descriptors)
  return descriptors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothDescriptor >*
BluetoothCharacteristic::mutable_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:BluetoothCharacteristic.descriptors)
  return &descriptors_;
}
inline const ::BluetoothDescriptor& BluetoothCharacteristic::_internal_descriptors(int index) const {
  return descriptors_.Get(index);
}
inline const ::BluetoothDescriptor& BluetoothCharacteristic::descriptors(int index) const {
  // @@protoc_insertion_point(field_get:BluetoothCharacteristic.descriptors)
  return _internal_descriptors(index);
}
inline ::BluetoothDescriptor* BluetoothCharacteristic::_internal_add_descriptors() {
  return descriptors_.Add();
}
inline ::BluetoothDescriptor* BluetoothCharacteristic::add_descriptors() {
  // @@protoc_insertion_point(field_add:BluetoothCharacteristic.descriptors)
  return _internal_add_descriptors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothDescriptor >&
BluetoothCharacteristic::descriptors() const {
  // @@protoc_insertion_point(field_list:BluetoothCharacteristic.descriptors)
  return descriptors_;
}

// .CharacteristicProperties properties = 6;
inline bool BluetoothCharacteristic::_internal_has_properties() const {
  return this != internal_default_instance() && properties_ != nullptr;
}
inline bool BluetoothCharacteristic::has_properties() const {
  return _internal_has_properties();
}
inline void BluetoothCharacteristic::clear_properties() {
  if (GetArena() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
}
inline const ::CharacteristicProperties& BluetoothCharacteristic::_internal_properties() const {
  const ::CharacteristicProperties* p = properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::CharacteristicProperties&>(
      ::_CharacteristicProperties_default_instance_);
}
inline const ::CharacteristicProperties& BluetoothCharacteristic::properties() const {
  // @@protoc_insertion_point(field_get:BluetoothCharacteristic.properties)
  return _internal_properties();
}
inline void BluetoothCharacteristic::unsafe_arena_set_allocated_properties(
    ::CharacteristicProperties* properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  properties_ = properties;
  if (properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BluetoothCharacteristic.properties)
}
inline ::CharacteristicProperties* BluetoothCharacteristic::release_properties() {
  
  ::CharacteristicProperties* temp = properties_;
  properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CharacteristicProperties* BluetoothCharacteristic::unsafe_arena_release_properties() {
  // @@protoc_insertion_point(field_release:BluetoothCharacteristic.properties)
  
  ::CharacteristicProperties* temp = properties_;
  properties_ = nullptr;
  return temp;
}
inline ::CharacteristicProperties* BluetoothCharacteristic::_internal_mutable_properties() {
  
  if (properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::CharacteristicProperties>(GetArena());
    properties_ = p;
  }
  return properties_;
}
inline ::CharacteristicProperties* BluetoothCharacteristic::mutable_properties() {
  // @@protoc_insertion_point(field_mutable:BluetoothCharacteristic.properties)
  return _internal_mutable_properties();
}
inline void BluetoothCharacteristic::set_allocated_properties(::CharacteristicProperties* properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete properties_;
  }
  if (properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(properties);
    if (message_arena != submessage_arena) {
      properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, properties, submessage_arena);
    }
    
  } else {
    
  }
  properties_ = properties;
  // @@protoc_insertion_point(field_set_allocated:BluetoothCharacteristic.properties)
}

// bytes value = 7;
inline void BluetoothCharacteristic::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& BluetoothCharacteristic::value() const {
  // @@protoc_insertion_point(field_get:BluetoothCharacteristic.value)
  return _internal_value();
}
inline void BluetoothCharacteristic::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:BluetoothCharacteristic.value)
}
inline std::string* BluetoothCharacteristic::mutable_value() {
  // @@protoc_insertion_point(field_mutable:BluetoothCharacteristic.value)
  return _internal_mutable_value();
}
inline const std::string& BluetoothCharacteristic::_internal_value() const {
  return value_.Get();
}
inline void BluetoothCharacteristic::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BluetoothCharacteristic::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BluetoothCharacteristic.value)
}
inline void BluetoothCharacteristic::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BluetoothCharacteristic.value)
}
inline void BluetoothCharacteristic::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BluetoothCharacteristic.value)
}
inline std::string* BluetoothCharacteristic::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BluetoothCharacteristic::release_value() {
  // @@protoc_insertion_point(field_release:BluetoothCharacteristic.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BluetoothCharacteristic::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BluetoothCharacteristic.value)
}

// -------------------------------------------------------------------

// BluetoothDescriptor

// string uuid = 1;
inline void BluetoothDescriptor::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& BluetoothDescriptor::uuid() const {
  // @@protoc_insertion_point(field_get:BluetoothDescriptor.uuid)
  return _internal_uuid();
}
inline void BluetoothDescriptor::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:BluetoothDescriptor.uuid)
}
inline std::string* BluetoothDescriptor::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:BluetoothDescriptor.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& BluetoothDescriptor::_internal_uuid() const {
  return uuid_.Get();
}
inline void BluetoothDescriptor::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BluetoothDescriptor::set_uuid(std::string&& value) {
  
  uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BluetoothDescriptor.uuid)
}
inline void BluetoothDescriptor::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BluetoothDescriptor.uuid)
}
inline void BluetoothDescriptor::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BluetoothDescriptor.uuid)
}
inline std::string* BluetoothDescriptor::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BluetoothDescriptor::release_uuid() {
  // @@protoc_insertion_point(field_release:BluetoothDescriptor.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BluetoothDescriptor::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BluetoothDescriptor.uuid)
}

// string remote_id = 2;
inline void BluetoothDescriptor::clear_remote_id() {
  remote_id_.ClearToEmpty();
}
inline const std::string& BluetoothDescriptor::remote_id() const {
  // @@protoc_insertion_point(field_get:BluetoothDescriptor.remote_id)
  return _internal_remote_id();
}
inline void BluetoothDescriptor::set_remote_id(const std::string& value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:BluetoothDescriptor.remote_id)
}
inline std::string* BluetoothDescriptor::mutable_remote_id() {
  // @@protoc_insertion_point(field_mutable:BluetoothDescriptor.remote_id)
  return _internal_mutable_remote_id();
}
inline const std::string& BluetoothDescriptor::_internal_remote_id() const {
  return remote_id_.Get();
}
inline void BluetoothDescriptor::_internal_set_remote_id(const std::string& value) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BluetoothDescriptor::set_remote_id(std::string&& value) {
  
  remote_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BluetoothDescriptor.remote_id)
}
inline void BluetoothDescriptor::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BluetoothDescriptor.remote_id)
}
inline void BluetoothDescriptor::set_remote_id(const char* value,
    size_t size) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BluetoothDescriptor.remote_id)
}
inline std::string* BluetoothDescriptor::_internal_mutable_remote_id() {
  
  return remote_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BluetoothDescriptor::release_remote_id() {
  // @@protoc_insertion_point(field_release:BluetoothDescriptor.remote_id)
  return remote_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BluetoothDescriptor::set_allocated_remote_id(std::string* remote_id) {
  if (remote_id != nullptr) {
    
  } else {
    
  }
  remote_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BluetoothDescriptor.remote_id)
}

// string serviceUuid = 3;
inline void BluetoothDescriptor::clear_serviceuuid() {
  serviceuuid_.ClearToEmpty();
}
inline const std::string& BluetoothDescriptor::serviceuuid() const {
  // @@protoc_insertion_point(field_get:BluetoothDescriptor.serviceUuid)
  return _internal_serviceuuid();
}
inline void BluetoothDescriptor::set_serviceuuid(const std::string& value) {
  _internal_set_serviceuuid(value);
  // @@protoc_insertion_point(field_set:BluetoothDescriptor.serviceUuid)
}
inline std::string* BluetoothDescriptor::mutable_serviceuuid() {
  // @@protoc_insertion_point(field_mutable:BluetoothDescriptor.serviceUuid)
  return _internal_mutable_serviceuuid();
}
inline const std::string& BluetoothDescriptor::_internal_serviceuuid() const {
  return serviceuuid_.Get();
}
inline void BluetoothDescriptor::_internal_set_serviceuuid(const std::string& value) {
  
  serviceuuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BluetoothDescriptor::set_serviceuuid(std::string&& value) {
  
  serviceuuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BluetoothDescriptor.serviceUuid)
}
inline void BluetoothDescriptor::set_serviceuuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serviceuuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BluetoothDescriptor.serviceUuid)
}
inline void BluetoothDescriptor::set_serviceuuid(const char* value,
    size_t size) {
  
  serviceuuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BluetoothDescriptor.serviceUuid)
}
inline std::string* BluetoothDescriptor::_internal_mutable_serviceuuid() {
  
  return serviceuuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BluetoothDescriptor::release_serviceuuid() {
  // @@protoc_insertion_point(field_release:BluetoothDescriptor.serviceUuid)
  return serviceuuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BluetoothDescriptor::set_allocated_serviceuuid(std::string* serviceuuid) {
  if (serviceuuid != nullptr) {
    
  } else {
    
  }
  serviceuuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serviceuuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BluetoothDescriptor.serviceUuid)
}

// string characteristicUuid = 4;
inline void BluetoothDescriptor::clear_characteristicuuid() {
  characteristicuuid_.ClearToEmpty();
}
inline const std::string& BluetoothDescriptor::characteristicuuid() const {
  // @@protoc_insertion_point(field_get:BluetoothDescriptor.characteristicUuid)
  return _internal_characteristicuuid();
}
inline void BluetoothDescriptor::set_characteristicuuid(const std::string& value) {
  _internal_set_characteristicuuid(value);
  // @@protoc_insertion_point(field_set:BluetoothDescriptor.characteristicUuid)
}
inline std::string* BluetoothDescriptor::mutable_characteristicuuid() {
  // @@protoc_insertion_point(field_mutable:BluetoothDescriptor.characteristicUuid)
  return _internal_mutable_characteristicuuid();
}
inline const std::string& BluetoothDescriptor::_internal_characteristicuuid() const {
  return characteristicuuid_.Get();
}
inline void BluetoothDescriptor::_internal_set_characteristicuuid(const std::string& value) {
  
  characteristicuuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BluetoothDescriptor::set_characteristicuuid(std::string&& value) {
  
  characteristicuuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BluetoothDescriptor.characteristicUuid)
}
inline void BluetoothDescriptor::set_characteristicuuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  characteristicuuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BluetoothDescriptor.characteristicUuid)
}
inline void BluetoothDescriptor::set_characteristicuuid(const char* value,
    size_t size) {
  
  characteristicuuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BluetoothDescriptor.characteristicUuid)
}
inline std::string* BluetoothDescriptor::_internal_mutable_characteristicuuid() {
  
  return characteristicuuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BluetoothDescriptor::release_characteristicuuid() {
  // @@protoc_insertion_point(field_release:BluetoothDescriptor.characteristicUuid)
  return characteristicuuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BluetoothDescriptor::set_allocated_characteristicuuid(std::string* characteristicuuid) {
  if (characteristicuuid != nullptr) {
    
  } else {
    
  }
  characteristicuuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), characteristicuuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BluetoothDescriptor.characteristicUuid)
}

// bytes value = 5;
inline void BluetoothDescriptor::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& BluetoothDescriptor::value() const {
  // @@protoc_insertion_point(field_get:BluetoothDescriptor.value)
  return _internal_value();
}
inline void BluetoothDescriptor::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:BluetoothDescriptor.value)
}
inline std::string* BluetoothDescriptor::mutable_value() {
  // @@protoc_insertion_point(field_mutable:BluetoothDescriptor.value)
  return _internal_mutable_value();
}
inline const std::string& BluetoothDescriptor::_internal_value() const {
  return value_.Get();
}
inline void BluetoothDescriptor::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BluetoothDescriptor::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BluetoothDescriptor.value)
}
inline void BluetoothDescriptor::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BluetoothDescriptor.value)
}
inline void BluetoothDescriptor::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BluetoothDescriptor.value)
}
inline std::string* BluetoothDescriptor::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BluetoothDescriptor::release_value() {
  // @@protoc_insertion_point(field_release:BluetoothDescriptor.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BluetoothDescriptor::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BluetoothDescriptor.value)
}

// -------------------------------------------------------------------

// CharacteristicProperties

// bool broadcast = 1;
inline void CharacteristicProperties::clear_broadcast() {
  broadcast_ = false;
}
inline bool CharacteristicProperties::_internal_broadcast() const {
  return broadcast_;
}
inline bool CharacteristicProperties::broadcast() const {
  // @@protoc_insertion_point(field_get:CharacteristicProperties.broadcast)
  return _internal_broadcast();
}
inline void CharacteristicProperties::_internal_set_broadcast(bool value) {
  
  broadcast_ = value;
}
inline void CharacteristicProperties::set_broadcast(bool value) {
  _internal_set_broadcast(value);
  // @@protoc_insertion_point(field_set:CharacteristicProperties.broadcast)
}

// bool read = 2;
inline void CharacteristicProperties::clear_read() {
  read_ = false;
}
inline bool CharacteristicProperties::_internal_read() const {
  return read_;
}
inline bool CharacteristicProperties::read() const {
  // @@protoc_insertion_point(field_get:CharacteristicProperties.read)
  return _internal_read();
}
inline void CharacteristicProperties::_internal_set_read(bool value) {
  
  read_ = value;
}
inline void CharacteristicProperties::set_read(bool value) {
  _internal_set_read(value);
  // @@protoc_insertion_point(field_set:CharacteristicProperties.read)
}

// bool write_without_response = 3;
inline void CharacteristicProperties::clear_write_without_response() {
  write_without_response_ = false;
}
inline bool CharacteristicProperties::_internal_write_without_response() const {
  return write_without_response_;
}
inline bool CharacteristicProperties::write_without_response() const {
  // @@protoc_insertion_point(field_get:CharacteristicProperties.write_without_response)
  return _internal_write_without_response();
}
inline void CharacteristicProperties::_internal_set_write_without_response(bool value) {
  
  write_without_response_ = value;
}
inline void CharacteristicProperties::set_write_without_response(bool value) {
  _internal_set_write_without_response(value);
  // @@protoc_insertion_point(field_set:CharacteristicProperties.write_without_response)
}

// bool write = 4;
inline void CharacteristicProperties::clear_write() {
  write_ = false;
}
inline bool CharacteristicProperties::_internal_write() const {
  return write_;
}
inline bool CharacteristicProperties::write() const {
  // @@protoc_insertion_point(field_get:CharacteristicProperties.write)
  return _internal_write();
}
inline void CharacteristicProperties::_internal_set_write(bool value) {
  
  write_ = value;
}
inline void CharacteristicProperties::set_write(bool value) {
  _internal_set_write(value);
  // @@protoc_insertion_point(field_set:CharacteristicProperties.write)
}

// bool notify = 5;
inline void CharacteristicProperties::clear_notify() {
  notify_ = false;
}
inline bool CharacteristicProperties::_internal_notify() const {
  return notify_;
}
inline bool CharacteristicProperties::notify() const {
  // @@protoc_insertion_point(field_get:CharacteristicProperties.notify)
  return _internal_notify();
}
inline void CharacteristicProperties::_internal_set_notify(bool value) {
  
  notify_ = value;
}
inline void CharacteristicProperties::set_notify(bool value) {
  _internal_set_notify(value);
  // @@protoc_insertion_point(field_set:CharacteristicProperties.notify)
}

// bool indicate = 6;
inline void CharacteristicProperties::clear_indicate() {
  indicate_ = false;
}
inline bool CharacteristicProperties::_internal_indicate() const {
  return indicate_;
}
inline bool CharacteristicProperties::indicate() const {
  // @@protoc_insertion_point(field_get:CharacteristicProperties.indicate)
  return _internal_indicate();
}
inline void CharacteristicProperties::_internal_set_indicate(bool value) {
  
  indicate_ = value;
}
inline void CharacteristicProperties::set_indicate(bool value) {
  _internal_set_indicate(value);
  // @@protoc_insertion_point(field_set:CharacteristicProperties.indicate)
}

// bool authenticated_signed_writes = 7;
inline void CharacteristicProperties::clear_authenticated_signed_writes() {
  authenticated_signed_writes_ = false;
}
inline bool CharacteristicProperties::_internal_authenticated_signed_writes() const {
  return authenticated_signed_writes_;
}
inline bool CharacteristicProperties::authenticated_signed_writes() const {
  // @@protoc_insertion_point(field_get:CharacteristicProperties.authenticated_signed_writes)
  return _internal_authenticated_signed_writes();
}
inline void CharacteristicProperties::_internal_set_authenticated_signed_writes(bool value) {
  
  authenticated_signed_writes_ = value;
}
inline void CharacteristicProperties::set_authenticated_signed_writes(bool value) {
  _internal_set_authenticated_signed_writes(value);
  // @@protoc_insertion_point(field_set:CharacteristicProperties.authenticated_signed_writes)
}

// bool extended_properties = 8;
inline void CharacteristicProperties::clear_extended_properties() {
  extended_properties_ = false;
}
inline bool CharacteristicProperties::_internal_extended_properties() const {
  return extended_properties_;
}
inline bool CharacteristicProperties::extended_properties() const {
  // @@protoc_insertion_point(field_get:CharacteristicProperties.extended_properties)
  return _internal_extended_properties();
}
inline void CharacteristicProperties::_internal_set_extended_properties(bool value) {
  
  extended_properties_ = value;
}
inline void CharacteristicProperties::set_extended_properties(bool value) {
  _internal_set_extended_properties(value);
  // @@protoc_insertion_point(field_set:CharacteristicProperties.extended_properties)
}

// bool notify_encryption_required = 9;
inline void CharacteristicProperties::clear_notify_encryption_required() {
  notify_encryption_required_ = false;
}
inline bool CharacteristicProperties::_internal_notify_encryption_required() const {
  return notify_encryption_required_;
}
inline bool CharacteristicProperties::notify_encryption_required() const {
  // @@protoc_insertion_point(field_get:CharacteristicProperties.notify_encryption_required)
  return _internal_notify_encryption_required();
}
inline void CharacteristicProperties::_internal_set_notify_encryption_required(bool value) {
  
  notify_encryption_required_ = value;
}
inline void CharacteristicProperties::set_notify_encryption_required(bool value) {
  _internal_set_notify_encryption_required(value);
  // @@protoc_insertion_point(field_set:CharacteristicProperties.notify_encryption_required)
}

// bool indicate_encryption_required = 10;
inline void CharacteristicProperties::clear_indicate_encryption_required() {
  indicate_encryption_required_ = false;
}
inline bool CharacteristicProperties::_internal_indicate_encryption_required() const {
  return indicate_encryption_required_;
}
inline bool CharacteristicProperties::indicate_encryption_required() const {
  // @@protoc_insertion_point(field_get:CharacteristicProperties.indicate_encryption_required)
  return _internal_indicate_encryption_required();
}
inline void CharacteristicProperties::_internal_set_indicate_encryption_required(bool value) {
  
  indicate_encryption_required_ = value;
}
inline void CharacteristicProperties::set_indicate_encryption_required(bool value) {
  _internal_set_indicate_encryption_required(value);
  // @@protoc_insertion_point(field_set:CharacteristicProperties.indicate_encryption_required)
}

// -------------------------------------------------------------------

// DiscoverServicesResult

// string remote_id = 1;
inline void DiscoverServicesResult::clear_remote_id() {
  remote_id_.ClearToEmpty();
}
inline const std::string& DiscoverServicesResult::remote_id() const {
  // @@protoc_insertion_point(field_get:DiscoverServicesResult.remote_id)
  return _internal_remote_id();
}
inline void DiscoverServicesResult::set_remote_id(const std::string& value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:DiscoverServicesResult.remote_id)
}
inline std::string* DiscoverServicesResult::mutable_remote_id() {
  // @@protoc_insertion_point(field_mutable:DiscoverServicesResult.remote_id)
  return _internal_mutable_remote_id();
}
inline const std::string& DiscoverServicesResult::_internal_remote_id() const {
  return remote_id_.Get();
}
inline void DiscoverServicesResult::_internal_set_remote_id(const std::string& value) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DiscoverServicesResult::set_remote_id(std::string&& value) {
  
  remote_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DiscoverServicesResult.remote_id)
}
inline void DiscoverServicesResult::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DiscoverServicesResult.remote_id)
}
inline void DiscoverServicesResult::set_remote_id(const char* value,
    size_t size) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DiscoverServicesResult.remote_id)
}
inline std::string* DiscoverServicesResult::_internal_mutable_remote_id() {
  
  return remote_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DiscoverServicesResult::release_remote_id() {
  // @@protoc_insertion_point(field_release:DiscoverServicesResult.remote_id)
  return remote_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DiscoverServicesResult::set_allocated_remote_id(std::string* remote_id) {
  if (remote_id != nullptr) {
    
  } else {
    
  }
  remote_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DiscoverServicesResult.remote_id)
}

// repeated .BluetoothService services = 2;
inline int DiscoverServicesResult::_internal_services_size() const {
  return services_.size();
}
inline int DiscoverServicesResult::services_size() const {
  return _internal_services_size();
}
inline void DiscoverServicesResult::clear_services() {
  services_.Clear();
}
inline ::BluetoothService* DiscoverServicesResult::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:DiscoverServicesResult.services)
  return services_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothService >*
DiscoverServicesResult::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:DiscoverServicesResult.services)
  return &services_;
}
inline const ::BluetoothService& DiscoverServicesResult::_internal_services(int index) const {
  return services_.Get(index);
}
inline const ::BluetoothService& DiscoverServicesResult::services(int index) const {
  // @@protoc_insertion_point(field_get:DiscoverServicesResult.services)
  return _internal_services(index);
}
inline ::BluetoothService* DiscoverServicesResult::_internal_add_services() {
  return services_.Add();
}
inline ::BluetoothService* DiscoverServicesResult::add_services() {
  // @@protoc_insertion_point(field_add:DiscoverServicesResult.services)
  return _internal_add_services();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothService >&
DiscoverServicesResult::services() const {
  // @@protoc_insertion_point(field_list:DiscoverServicesResult.services)
  return services_;
}

// -------------------------------------------------------------------

// ReadCharacteristicRequest

// string remote_id = 1;
inline void ReadCharacteristicRequest::clear_remote_id() {
  remote_id_.ClearToEmpty();
}
inline const std::string& ReadCharacteristicRequest::remote_id() const {
  // @@protoc_insertion_point(field_get:ReadCharacteristicRequest.remote_id)
  return _internal_remote_id();
}
inline void ReadCharacteristicRequest::set_remote_id(const std::string& value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:ReadCharacteristicRequest.remote_id)
}
inline std::string* ReadCharacteristicRequest::mutable_remote_id() {
  // @@protoc_insertion_point(field_mutable:ReadCharacteristicRequest.remote_id)
  return _internal_mutable_remote_id();
}
inline const std::string& ReadCharacteristicRequest::_internal_remote_id() const {
  return remote_id_.Get();
}
inline void ReadCharacteristicRequest::_internal_set_remote_id(const std::string& value) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadCharacteristicRequest::set_remote_id(std::string&& value) {
  
  remote_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ReadCharacteristicRequest.remote_id)
}
inline void ReadCharacteristicRequest::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ReadCharacteristicRequest.remote_id)
}
inline void ReadCharacteristicRequest::set_remote_id(const char* value,
    size_t size) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ReadCharacteristicRequest.remote_id)
}
inline std::string* ReadCharacteristicRequest::_internal_mutable_remote_id() {
  
  return remote_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadCharacteristicRequest::release_remote_id() {
  // @@protoc_insertion_point(field_release:ReadCharacteristicRequest.remote_id)
  return remote_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadCharacteristicRequest::set_allocated_remote_id(std::string* remote_id) {
  if (remote_id != nullptr) {
    
  } else {
    
  }
  remote_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ReadCharacteristicRequest.remote_id)
}

// string characteristic_uuid = 2;
inline void ReadCharacteristicRequest::clear_characteristic_uuid() {
  characteristic_uuid_.ClearToEmpty();
}
inline const std::string& ReadCharacteristicRequest::characteristic_uuid() const {
  // @@protoc_insertion_point(field_get:ReadCharacteristicRequest.characteristic_uuid)
  return _internal_characteristic_uuid();
}
inline void ReadCharacteristicRequest::set_characteristic_uuid(const std::string& value) {
  _internal_set_characteristic_uuid(value);
  // @@protoc_insertion_point(field_set:ReadCharacteristicRequest.characteristic_uuid)
}
inline std::string* ReadCharacteristicRequest::mutable_characteristic_uuid() {
  // @@protoc_insertion_point(field_mutable:ReadCharacteristicRequest.characteristic_uuid)
  return _internal_mutable_characteristic_uuid();
}
inline const std::string& ReadCharacteristicRequest::_internal_characteristic_uuid() const {
  return characteristic_uuid_.Get();
}
inline void ReadCharacteristicRequest::_internal_set_characteristic_uuid(const std::string& value) {
  
  characteristic_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadCharacteristicRequest::set_characteristic_uuid(std::string&& value) {
  
  characteristic_uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ReadCharacteristicRequest.characteristic_uuid)
}
inline void ReadCharacteristicRequest::set_characteristic_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  characteristic_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ReadCharacteristicRequest.characteristic_uuid)
}
inline void ReadCharacteristicRequest::set_characteristic_uuid(const char* value,
    size_t size) {
  
  characteristic_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ReadCharacteristicRequest.characteristic_uuid)
}
inline std::string* ReadCharacteristicRequest::_internal_mutable_characteristic_uuid() {
  
  return characteristic_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadCharacteristicRequest::release_characteristic_uuid() {
  // @@protoc_insertion_point(field_release:ReadCharacteristicRequest.characteristic_uuid)
  return characteristic_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadCharacteristicRequest::set_allocated_characteristic_uuid(std::string* characteristic_uuid) {
  if (characteristic_uuid != nullptr) {
    
  } else {
    
  }
  characteristic_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), characteristic_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ReadCharacteristicRequest.characteristic_uuid)
}

// string service_uuid = 3;
inline void ReadCharacteristicRequest::clear_service_uuid() {
  service_uuid_.ClearToEmpty();
}
inline const std::string& ReadCharacteristicRequest::service_uuid() const {
  // @@protoc_insertion_point(field_get:ReadCharacteristicRequest.service_uuid)
  return _internal_service_uuid();
}
inline void ReadCharacteristicRequest::set_service_uuid(const std::string& value) {
  _internal_set_service_uuid(value);
  // @@protoc_insertion_point(field_set:ReadCharacteristicRequest.service_uuid)
}
inline std::string* ReadCharacteristicRequest::mutable_service_uuid() {
  // @@protoc_insertion_point(field_mutable:ReadCharacteristicRequest.service_uuid)
  return _internal_mutable_service_uuid();
}
inline const std::string& ReadCharacteristicRequest::_internal_service_uuid() const {
  return service_uuid_.Get();
}
inline void ReadCharacteristicRequest::_internal_set_service_uuid(const std::string& value) {
  
  service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadCharacteristicRequest::set_service_uuid(std::string&& value) {
  
  service_uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ReadCharacteristicRequest.service_uuid)
}
inline void ReadCharacteristicRequest::set_service_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ReadCharacteristicRequest.service_uuid)
}
inline void ReadCharacteristicRequest::set_service_uuid(const char* value,
    size_t size) {
  
  service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ReadCharacteristicRequest.service_uuid)
}
inline std::string* ReadCharacteristicRequest::_internal_mutable_service_uuid() {
  
  return service_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadCharacteristicRequest::release_service_uuid() {
  // @@protoc_insertion_point(field_release:ReadCharacteristicRequest.service_uuid)
  return service_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadCharacteristicRequest::set_allocated_service_uuid(std::string* service_uuid) {
  if (service_uuid != nullptr) {
    
  } else {
    
  }
  service_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ReadCharacteristicRequest.service_uuid)
}

// string secondary_service_uuid = 4;
inline void ReadCharacteristicRequest::clear_secondary_service_uuid() {
  secondary_service_uuid_.ClearToEmpty();
}
inline const std::string& ReadCharacteristicRequest::secondary_service_uuid() const {
  // @@protoc_insertion_point(field_get:ReadCharacteristicRequest.secondary_service_uuid)
  return _internal_secondary_service_uuid();
}
inline void ReadCharacteristicRequest::set_secondary_service_uuid(const std::string& value) {
  _internal_set_secondary_service_uuid(value);
  // @@protoc_insertion_point(field_set:ReadCharacteristicRequest.secondary_service_uuid)
}
inline std::string* ReadCharacteristicRequest::mutable_secondary_service_uuid() {
  // @@protoc_insertion_point(field_mutable:ReadCharacteristicRequest.secondary_service_uuid)
  return _internal_mutable_secondary_service_uuid();
}
inline const std::string& ReadCharacteristicRequest::_internal_secondary_service_uuid() const {
  return secondary_service_uuid_.Get();
}
inline void ReadCharacteristicRequest::_internal_set_secondary_service_uuid(const std::string& value) {
  
  secondary_service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadCharacteristicRequest::set_secondary_service_uuid(std::string&& value) {
  
  secondary_service_uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ReadCharacteristicRequest.secondary_service_uuid)
}
inline void ReadCharacteristicRequest::set_secondary_service_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secondary_service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ReadCharacteristicRequest.secondary_service_uuid)
}
inline void ReadCharacteristicRequest::set_secondary_service_uuid(const char* value,
    size_t size) {
  
  secondary_service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ReadCharacteristicRequest.secondary_service_uuid)
}
inline std::string* ReadCharacteristicRequest::_internal_mutable_secondary_service_uuid() {
  
  return secondary_service_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadCharacteristicRequest::release_secondary_service_uuid() {
  // @@protoc_insertion_point(field_release:ReadCharacteristicRequest.secondary_service_uuid)
  return secondary_service_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadCharacteristicRequest::set_allocated_secondary_service_uuid(std::string* secondary_service_uuid) {
  if (secondary_service_uuid != nullptr) {
    
  } else {
    
  }
  secondary_service_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secondary_service_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ReadCharacteristicRequest.secondary_service_uuid)
}

// -------------------------------------------------------------------

// ReadCharacteristicResponse

// string remote_id = 1;
inline void ReadCharacteristicResponse::clear_remote_id() {
  remote_id_.ClearToEmpty();
}
inline const std::string& ReadCharacteristicResponse::remote_id() const {
  // @@protoc_insertion_point(field_get:ReadCharacteristicResponse.remote_id)
  return _internal_remote_id();
}
inline void ReadCharacteristicResponse::set_remote_id(const std::string& value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:ReadCharacteristicResponse.remote_id)
}
inline std::string* ReadCharacteristicResponse::mutable_remote_id() {
  // @@protoc_insertion_point(field_mutable:ReadCharacteristicResponse.remote_id)
  return _internal_mutable_remote_id();
}
inline const std::string& ReadCharacteristicResponse::_internal_remote_id() const {
  return remote_id_.Get();
}
inline void ReadCharacteristicResponse::_internal_set_remote_id(const std::string& value) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadCharacteristicResponse::set_remote_id(std::string&& value) {
  
  remote_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ReadCharacteristicResponse.remote_id)
}
inline void ReadCharacteristicResponse::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ReadCharacteristicResponse.remote_id)
}
inline void ReadCharacteristicResponse::set_remote_id(const char* value,
    size_t size) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ReadCharacteristicResponse.remote_id)
}
inline std::string* ReadCharacteristicResponse::_internal_mutable_remote_id() {
  
  return remote_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadCharacteristicResponse::release_remote_id() {
  // @@protoc_insertion_point(field_release:ReadCharacteristicResponse.remote_id)
  return remote_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadCharacteristicResponse::set_allocated_remote_id(std::string* remote_id) {
  if (remote_id != nullptr) {
    
  } else {
    
  }
  remote_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ReadCharacteristicResponse.remote_id)
}

// .BluetoothCharacteristic characteristic = 2;
inline bool ReadCharacteristicResponse::_internal_has_characteristic() const {
  return this != internal_default_instance() && characteristic_ != nullptr;
}
inline bool ReadCharacteristicResponse::has_characteristic() const {
  return _internal_has_characteristic();
}
inline void ReadCharacteristicResponse::clear_characteristic() {
  if (GetArena() == nullptr && characteristic_ != nullptr) {
    delete characteristic_;
  }
  characteristic_ = nullptr;
}
inline const ::BluetoothCharacteristic& ReadCharacteristicResponse::_internal_characteristic() const {
  const ::BluetoothCharacteristic* p = characteristic_;
  return p != nullptr ? *p : reinterpret_cast<const ::BluetoothCharacteristic&>(
      ::_BluetoothCharacteristic_default_instance_);
}
inline const ::BluetoothCharacteristic& ReadCharacteristicResponse::characteristic() const {
  // @@protoc_insertion_point(field_get:ReadCharacteristicResponse.characteristic)
  return _internal_characteristic();
}
inline void ReadCharacteristicResponse::unsafe_arena_set_allocated_characteristic(
    ::BluetoothCharacteristic* characteristic) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(characteristic_);
  }
  characteristic_ = characteristic;
  if (characteristic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ReadCharacteristicResponse.characteristic)
}
inline ::BluetoothCharacteristic* ReadCharacteristicResponse::release_characteristic() {
  
  ::BluetoothCharacteristic* temp = characteristic_;
  characteristic_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BluetoothCharacteristic* ReadCharacteristicResponse::unsafe_arena_release_characteristic() {
  // @@protoc_insertion_point(field_release:ReadCharacteristicResponse.characteristic)
  
  ::BluetoothCharacteristic* temp = characteristic_;
  characteristic_ = nullptr;
  return temp;
}
inline ::BluetoothCharacteristic* ReadCharacteristicResponse::_internal_mutable_characteristic() {
  
  if (characteristic_ == nullptr) {
    auto* p = CreateMaybeMessage<::BluetoothCharacteristic>(GetArena());
    characteristic_ = p;
  }
  return characteristic_;
}
inline ::BluetoothCharacteristic* ReadCharacteristicResponse::mutable_characteristic() {
  // @@protoc_insertion_point(field_mutable:ReadCharacteristicResponse.characteristic)
  return _internal_mutable_characteristic();
}
inline void ReadCharacteristicResponse::set_allocated_characteristic(::BluetoothCharacteristic* characteristic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete characteristic_;
  }
  if (characteristic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(characteristic);
    if (message_arena != submessage_arena) {
      characteristic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, characteristic, submessage_arena);
    }
    
  } else {
    
  }
  characteristic_ = characteristic;
  // @@protoc_insertion_point(field_set_allocated:ReadCharacteristicResponse.characteristic)
}

// -------------------------------------------------------------------

// ReadDescriptorRequest

// string remote_id = 1;
inline void ReadDescriptorRequest::clear_remote_id() {
  remote_id_.ClearToEmpty();
}
inline const std::string& ReadDescriptorRequest::remote_id() const {
  // @@protoc_insertion_point(field_get:ReadDescriptorRequest.remote_id)
  return _internal_remote_id();
}
inline void ReadDescriptorRequest::set_remote_id(const std::string& value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:ReadDescriptorRequest.remote_id)
}
inline std::string* ReadDescriptorRequest::mutable_remote_id() {
  // @@protoc_insertion_point(field_mutable:ReadDescriptorRequest.remote_id)
  return _internal_mutable_remote_id();
}
inline const std::string& ReadDescriptorRequest::_internal_remote_id() const {
  return remote_id_.Get();
}
inline void ReadDescriptorRequest::_internal_set_remote_id(const std::string& value) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadDescriptorRequest::set_remote_id(std::string&& value) {
  
  remote_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ReadDescriptorRequest.remote_id)
}
inline void ReadDescriptorRequest::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ReadDescriptorRequest.remote_id)
}
inline void ReadDescriptorRequest::set_remote_id(const char* value,
    size_t size) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ReadDescriptorRequest.remote_id)
}
inline std::string* ReadDescriptorRequest::_internal_mutable_remote_id() {
  
  return remote_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadDescriptorRequest::release_remote_id() {
  // @@protoc_insertion_point(field_release:ReadDescriptorRequest.remote_id)
  return remote_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadDescriptorRequest::set_allocated_remote_id(std::string* remote_id) {
  if (remote_id != nullptr) {
    
  } else {
    
  }
  remote_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ReadDescriptorRequest.remote_id)
}

// string descriptor_uuid = 2;
inline void ReadDescriptorRequest::clear_descriptor_uuid() {
  descriptor_uuid_.ClearToEmpty();
}
inline const std::string& ReadDescriptorRequest::descriptor_uuid() const {
  // @@protoc_insertion_point(field_get:ReadDescriptorRequest.descriptor_uuid)
  return _internal_descriptor_uuid();
}
inline void ReadDescriptorRequest::set_descriptor_uuid(const std::string& value) {
  _internal_set_descriptor_uuid(value);
  // @@protoc_insertion_point(field_set:ReadDescriptorRequest.descriptor_uuid)
}
inline std::string* ReadDescriptorRequest::mutable_descriptor_uuid() {
  // @@protoc_insertion_point(field_mutable:ReadDescriptorRequest.descriptor_uuid)
  return _internal_mutable_descriptor_uuid();
}
inline const std::string& ReadDescriptorRequest::_internal_descriptor_uuid() const {
  return descriptor_uuid_.Get();
}
inline void ReadDescriptorRequest::_internal_set_descriptor_uuid(const std::string& value) {
  
  descriptor_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadDescriptorRequest::set_descriptor_uuid(std::string&& value) {
  
  descriptor_uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ReadDescriptorRequest.descriptor_uuid)
}
inline void ReadDescriptorRequest::set_descriptor_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  descriptor_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ReadDescriptorRequest.descriptor_uuid)
}
inline void ReadDescriptorRequest::set_descriptor_uuid(const char* value,
    size_t size) {
  
  descriptor_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ReadDescriptorRequest.descriptor_uuid)
}
inline std::string* ReadDescriptorRequest::_internal_mutable_descriptor_uuid() {
  
  return descriptor_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadDescriptorRequest::release_descriptor_uuid() {
  // @@protoc_insertion_point(field_release:ReadDescriptorRequest.descriptor_uuid)
  return descriptor_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadDescriptorRequest::set_allocated_descriptor_uuid(std::string* descriptor_uuid) {
  if (descriptor_uuid != nullptr) {
    
  } else {
    
  }
  descriptor_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), descriptor_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ReadDescriptorRequest.descriptor_uuid)
}

// string service_uuid = 3;
inline void ReadDescriptorRequest::clear_service_uuid() {
  service_uuid_.ClearToEmpty();
}
inline const std::string& ReadDescriptorRequest::service_uuid() const {
  // @@protoc_insertion_point(field_get:ReadDescriptorRequest.service_uuid)
  return _internal_service_uuid();
}
inline void ReadDescriptorRequest::set_service_uuid(const std::string& value) {
  _internal_set_service_uuid(value);
  // @@protoc_insertion_point(field_set:ReadDescriptorRequest.service_uuid)
}
inline std::string* ReadDescriptorRequest::mutable_service_uuid() {
  // @@protoc_insertion_point(field_mutable:ReadDescriptorRequest.service_uuid)
  return _internal_mutable_service_uuid();
}
inline const std::string& ReadDescriptorRequest::_internal_service_uuid() const {
  return service_uuid_.Get();
}
inline void ReadDescriptorRequest::_internal_set_service_uuid(const std::string& value) {
  
  service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadDescriptorRequest::set_service_uuid(std::string&& value) {
  
  service_uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ReadDescriptorRequest.service_uuid)
}
inline void ReadDescriptorRequest::set_service_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ReadDescriptorRequest.service_uuid)
}
inline void ReadDescriptorRequest::set_service_uuid(const char* value,
    size_t size) {
  
  service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ReadDescriptorRequest.service_uuid)
}
inline std::string* ReadDescriptorRequest::_internal_mutable_service_uuid() {
  
  return service_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadDescriptorRequest::release_service_uuid() {
  // @@protoc_insertion_point(field_release:ReadDescriptorRequest.service_uuid)
  return service_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadDescriptorRequest::set_allocated_service_uuid(std::string* service_uuid) {
  if (service_uuid != nullptr) {
    
  } else {
    
  }
  service_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ReadDescriptorRequest.service_uuid)
}

// string secondary_service_uuid = 4;
inline void ReadDescriptorRequest::clear_secondary_service_uuid() {
  secondary_service_uuid_.ClearToEmpty();
}
inline const std::string& ReadDescriptorRequest::secondary_service_uuid() const {
  // @@protoc_insertion_point(field_get:ReadDescriptorRequest.secondary_service_uuid)
  return _internal_secondary_service_uuid();
}
inline void ReadDescriptorRequest::set_secondary_service_uuid(const std::string& value) {
  _internal_set_secondary_service_uuid(value);
  // @@protoc_insertion_point(field_set:ReadDescriptorRequest.secondary_service_uuid)
}
inline std::string* ReadDescriptorRequest::mutable_secondary_service_uuid() {
  // @@protoc_insertion_point(field_mutable:ReadDescriptorRequest.secondary_service_uuid)
  return _internal_mutable_secondary_service_uuid();
}
inline const std::string& ReadDescriptorRequest::_internal_secondary_service_uuid() const {
  return secondary_service_uuid_.Get();
}
inline void ReadDescriptorRequest::_internal_set_secondary_service_uuid(const std::string& value) {
  
  secondary_service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadDescriptorRequest::set_secondary_service_uuid(std::string&& value) {
  
  secondary_service_uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ReadDescriptorRequest.secondary_service_uuid)
}
inline void ReadDescriptorRequest::set_secondary_service_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secondary_service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ReadDescriptorRequest.secondary_service_uuid)
}
inline void ReadDescriptorRequest::set_secondary_service_uuid(const char* value,
    size_t size) {
  
  secondary_service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ReadDescriptorRequest.secondary_service_uuid)
}
inline std::string* ReadDescriptorRequest::_internal_mutable_secondary_service_uuid() {
  
  return secondary_service_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadDescriptorRequest::release_secondary_service_uuid() {
  // @@protoc_insertion_point(field_release:ReadDescriptorRequest.secondary_service_uuid)
  return secondary_service_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadDescriptorRequest::set_allocated_secondary_service_uuid(std::string* secondary_service_uuid) {
  if (secondary_service_uuid != nullptr) {
    
  } else {
    
  }
  secondary_service_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secondary_service_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ReadDescriptorRequest.secondary_service_uuid)
}

// string characteristic_uuid = 5;
inline void ReadDescriptorRequest::clear_characteristic_uuid() {
  characteristic_uuid_.ClearToEmpty();
}
inline const std::string& ReadDescriptorRequest::characteristic_uuid() const {
  // @@protoc_insertion_point(field_get:ReadDescriptorRequest.characteristic_uuid)
  return _internal_characteristic_uuid();
}
inline void ReadDescriptorRequest::set_characteristic_uuid(const std::string& value) {
  _internal_set_characteristic_uuid(value);
  // @@protoc_insertion_point(field_set:ReadDescriptorRequest.characteristic_uuid)
}
inline std::string* ReadDescriptorRequest::mutable_characteristic_uuid() {
  // @@protoc_insertion_point(field_mutable:ReadDescriptorRequest.characteristic_uuid)
  return _internal_mutable_characteristic_uuid();
}
inline const std::string& ReadDescriptorRequest::_internal_characteristic_uuid() const {
  return characteristic_uuid_.Get();
}
inline void ReadDescriptorRequest::_internal_set_characteristic_uuid(const std::string& value) {
  
  characteristic_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadDescriptorRequest::set_characteristic_uuid(std::string&& value) {
  
  characteristic_uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ReadDescriptorRequest.characteristic_uuid)
}
inline void ReadDescriptorRequest::set_characteristic_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  characteristic_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ReadDescriptorRequest.characteristic_uuid)
}
inline void ReadDescriptorRequest::set_characteristic_uuid(const char* value,
    size_t size) {
  
  characteristic_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ReadDescriptorRequest.characteristic_uuid)
}
inline std::string* ReadDescriptorRequest::_internal_mutable_characteristic_uuid() {
  
  return characteristic_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadDescriptorRequest::release_characteristic_uuid() {
  // @@protoc_insertion_point(field_release:ReadDescriptorRequest.characteristic_uuid)
  return characteristic_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadDescriptorRequest::set_allocated_characteristic_uuid(std::string* characteristic_uuid) {
  if (characteristic_uuid != nullptr) {
    
  } else {
    
  }
  characteristic_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), characteristic_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ReadDescriptorRequest.characteristic_uuid)
}

// -------------------------------------------------------------------

// ReadDescriptorResponse

// .ReadDescriptorRequest request = 1;
inline bool ReadDescriptorResponse::_internal_has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline bool ReadDescriptorResponse::has_request() const {
  return _internal_has_request();
}
inline void ReadDescriptorResponse::clear_request() {
  if (GetArena() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
}
inline const ::ReadDescriptorRequest& ReadDescriptorResponse::_internal_request() const {
  const ::ReadDescriptorRequest* p = request_;
  return p != nullptr ? *p : reinterpret_cast<const ::ReadDescriptorRequest&>(
      ::_ReadDescriptorRequest_default_instance_);
}
inline const ::ReadDescriptorRequest& ReadDescriptorResponse::request() const {
  // @@protoc_insertion_point(field_get:ReadDescriptorResponse.request)
  return _internal_request();
}
inline void ReadDescriptorResponse::unsafe_arena_set_allocated_request(
    ::ReadDescriptorRequest* request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ReadDescriptorResponse.request)
}
inline ::ReadDescriptorRequest* ReadDescriptorResponse::release_request() {
  
  ::ReadDescriptorRequest* temp = request_;
  request_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ReadDescriptorRequest* ReadDescriptorResponse::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:ReadDescriptorResponse.request)
  
  ::ReadDescriptorRequest* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::ReadDescriptorRequest* ReadDescriptorResponse::_internal_mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::ReadDescriptorRequest>(GetArena());
    request_ = p;
  }
  return request_;
}
inline ::ReadDescriptorRequest* ReadDescriptorResponse::mutable_request() {
  // @@protoc_insertion_point(field_mutable:ReadDescriptorResponse.request)
  return _internal_mutable_request();
}
inline void ReadDescriptorResponse::set_allocated_request(::ReadDescriptorRequest* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:ReadDescriptorResponse.request)
}

// bytes value = 2;
inline void ReadDescriptorResponse::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& ReadDescriptorResponse::value() const {
  // @@protoc_insertion_point(field_get:ReadDescriptorResponse.value)
  return _internal_value();
}
inline void ReadDescriptorResponse::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:ReadDescriptorResponse.value)
}
inline std::string* ReadDescriptorResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable:ReadDescriptorResponse.value)
  return _internal_mutable_value();
}
inline const std::string& ReadDescriptorResponse::_internal_value() const {
  return value_.Get();
}
inline void ReadDescriptorResponse::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadDescriptorResponse::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ReadDescriptorResponse.value)
}
inline void ReadDescriptorResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ReadDescriptorResponse.value)
}
inline void ReadDescriptorResponse::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ReadDescriptorResponse.value)
}
inline std::string* ReadDescriptorResponse::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadDescriptorResponse::release_value() {
  // @@protoc_insertion_point(field_release:ReadDescriptorResponse.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadDescriptorResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ReadDescriptorResponse.value)
}

// -------------------------------------------------------------------

// WriteCharacteristicRequest

// string remote_id = 1;
inline void WriteCharacteristicRequest::clear_remote_id() {
  remote_id_.ClearToEmpty();
}
inline const std::string& WriteCharacteristicRequest::remote_id() const {
  // @@protoc_insertion_point(field_get:WriteCharacteristicRequest.remote_id)
  return _internal_remote_id();
}
inline void WriteCharacteristicRequest::set_remote_id(const std::string& value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:WriteCharacteristicRequest.remote_id)
}
inline std::string* WriteCharacteristicRequest::mutable_remote_id() {
  // @@protoc_insertion_point(field_mutable:WriteCharacteristicRequest.remote_id)
  return _internal_mutable_remote_id();
}
inline const std::string& WriteCharacteristicRequest::_internal_remote_id() const {
  return remote_id_.Get();
}
inline void WriteCharacteristicRequest::_internal_set_remote_id(const std::string& value) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteCharacteristicRequest::set_remote_id(std::string&& value) {
  
  remote_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WriteCharacteristicRequest.remote_id)
}
inline void WriteCharacteristicRequest::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:WriteCharacteristicRequest.remote_id)
}
inline void WriteCharacteristicRequest::set_remote_id(const char* value,
    size_t size) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WriteCharacteristicRequest.remote_id)
}
inline std::string* WriteCharacteristicRequest::_internal_mutable_remote_id() {
  
  return remote_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteCharacteristicRequest::release_remote_id() {
  // @@protoc_insertion_point(field_release:WriteCharacteristicRequest.remote_id)
  return remote_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteCharacteristicRequest::set_allocated_remote_id(std::string* remote_id) {
  if (remote_id != nullptr) {
    
  } else {
    
  }
  remote_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WriteCharacteristicRequest.remote_id)
}

// string characteristic_uuid = 2;
inline void WriteCharacteristicRequest::clear_characteristic_uuid() {
  characteristic_uuid_.ClearToEmpty();
}
inline const std::string& WriteCharacteristicRequest::characteristic_uuid() const {
  // @@protoc_insertion_point(field_get:WriteCharacteristicRequest.characteristic_uuid)
  return _internal_characteristic_uuid();
}
inline void WriteCharacteristicRequest::set_characteristic_uuid(const std::string& value) {
  _internal_set_characteristic_uuid(value);
  // @@protoc_insertion_point(field_set:WriteCharacteristicRequest.characteristic_uuid)
}
inline std::string* WriteCharacteristicRequest::mutable_characteristic_uuid() {
  // @@protoc_insertion_point(field_mutable:WriteCharacteristicRequest.characteristic_uuid)
  return _internal_mutable_characteristic_uuid();
}
inline const std::string& WriteCharacteristicRequest::_internal_characteristic_uuid() const {
  return characteristic_uuid_.Get();
}
inline void WriteCharacteristicRequest::_internal_set_characteristic_uuid(const std::string& value) {
  
  characteristic_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteCharacteristicRequest::set_characteristic_uuid(std::string&& value) {
  
  characteristic_uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WriteCharacteristicRequest.characteristic_uuid)
}
inline void WriteCharacteristicRequest::set_characteristic_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  characteristic_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:WriteCharacteristicRequest.characteristic_uuid)
}
inline void WriteCharacteristicRequest::set_characteristic_uuid(const char* value,
    size_t size) {
  
  characteristic_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WriteCharacteristicRequest.characteristic_uuid)
}
inline std::string* WriteCharacteristicRequest::_internal_mutable_characteristic_uuid() {
  
  return characteristic_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteCharacteristicRequest::release_characteristic_uuid() {
  // @@protoc_insertion_point(field_release:WriteCharacteristicRequest.characteristic_uuid)
  return characteristic_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteCharacteristicRequest::set_allocated_characteristic_uuid(std::string* characteristic_uuid) {
  if (characteristic_uuid != nullptr) {
    
  } else {
    
  }
  characteristic_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), characteristic_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WriteCharacteristicRequest.characteristic_uuid)
}

// string service_uuid = 3;
inline void WriteCharacteristicRequest::clear_service_uuid() {
  service_uuid_.ClearToEmpty();
}
inline const std::string& WriteCharacteristicRequest::service_uuid() const {
  // @@protoc_insertion_point(field_get:WriteCharacteristicRequest.service_uuid)
  return _internal_service_uuid();
}
inline void WriteCharacteristicRequest::set_service_uuid(const std::string& value) {
  _internal_set_service_uuid(value);
  // @@protoc_insertion_point(field_set:WriteCharacteristicRequest.service_uuid)
}
inline std::string* WriteCharacteristicRequest::mutable_service_uuid() {
  // @@protoc_insertion_point(field_mutable:WriteCharacteristicRequest.service_uuid)
  return _internal_mutable_service_uuid();
}
inline const std::string& WriteCharacteristicRequest::_internal_service_uuid() const {
  return service_uuid_.Get();
}
inline void WriteCharacteristicRequest::_internal_set_service_uuid(const std::string& value) {
  
  service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteCharacteristicRequest::set_service_uuid(std::string&& value) {
  
  service_uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WriteCharacteristicRequest.service_uuid)
}
inline void WriteCharacteristicRequest::set_service_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:WriteCharacteristicRequest.service_uuid)
}
inline void WriteCharacteristicRequest::set_service_uuid(const char* value,
    size_t size) {
  
  service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WriteCharacteristicRequest.service_uuid)
}
inline std::string* WriteCharacteristicRequest::_internal_mutable_service_uuid() {
  
  return service_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteCharacteristicRequest::release_service_uuid() {
  // @@protoc_insertion_point(field_release:WriteCharacteristicRequest.service_uuid)
  return service_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteCharacteristicRequest::set_allocated_service_uuid(std::string* service_uuid) {
  if (service_uuid != nullptr) {
    
  } else {
    
  }
  service_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WriteCharacteristicRequest.service_uuid)
}

// string secondary_service_uuid = 4;
inline void WriteCharacteristicRequest::clear_secondary_service_uuid() {
  secondary_service_uuid_.ClearToEmpty();
}
inline const std::string& WriteCharacteristicRequest::secondary_service_uuid() const {
  // @@protoc_insertion_point(field_get:WriteCharacteristicRequest.secondary_service_uuid)
  return _internal_secondary_service_uuid();
}
inline void WriteCharacteristicRequest::set_secondary_service_uuid(const std::string& value) {
  _internal_set_secondary_service_uuid(value);
  // @@protoc_insertion_point(field_set:WriteCharacteristicRequest.secondary_service_uuid)
}
inline std::string* WriteCharacteristicRequest::mutable_secondary_service_uuid() {
  // @@protoc_insertion_point(field_mutable:WriteCharacteristicRequest.secondary_service_uuid)
  return _internal_mutable_secondary_service_uuid();
}
inline const std::string& WriteCharacteristicRequest::_internal_secondary_service_uuid() const {
  return secondary_service_uuid_.Get();
}
inline void WriteCharacteristicRequest::_internal_set_secondary_service_uuid(const std::string& value) {
  
  secondary_service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteCharacteristicRequest::set_secondary_service_uuid(std::string&& value) {
  
  secondary_service_uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WriteCharacteristicRequest.secondary_service_uuid)
}
inline void WriteCharacteristicRequest::set_secondary_service_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secondary_service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:WriteCharacteristicRequest.secondary_service_uuid)
}
inline void WriteCharacteristicRequest::set_secondary_service_uuid(const char* value,
    size_t size) {
  
  secondary_service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WriteCharacteristicRequest.secondary_service_uuid)
}
inline std::string* WriteCharacteristicRequest::_internal_mutable_secondary_service_uuid() {
  
  return secondary_service_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteCharacteristicRequest::release_secondary_service_uuid() {
  // @@protoc_insertion_point(field_release:WriteCharacteristicRequest.secondary_service_uuid)
  return secondary_service_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteCharacteristicRequest::set_allocated_secondary_service_uuid(std::string* secondary_service_uuid) {
  if (secondary_service_uuid != nullptr) {
    
  } else {
    
  }
  secondary_service_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secondary_service_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WriteCharacteristicRequest.secondary_service_uuid)
}

// .WriteCharacteristicRequest.WriteType write_type = 5;
inline void WriteCharacteristicRequest::clear_write_type() {
  write_type_ = 0;
}
inline ::WriteCharacteristicRequest_WriteType WriteCharacteristicRequest::_internal_write_type() const {
  return static_cast< ::WriteCharacteristicRequest_WriteType >(write_type_);
}
inline ::WriteCharacteristicRequest_WriteType WriteCharacteristicRequest::write_type() const {
  // @@protoc_insertion_point(field_get:WriteCharacteristicRequest.write_type)
  return _internal_write_type();
}
inline void WriteCharacteristicRequest::_internal_set_write_type(::WriteCharacteristicRequest_WriteType value) {
  
  write_type_ = value;
}
inline void WriteCharacteristicRequest::set_write_type(::WriteCharacteristicRequest_WriteType value) {
  _internal_set_write_type(value);
  // @@protoc_insertion_point(field_set:WriteCharacteristicRequest.write_type)
}

// bytes value = 6;
inline void WriteCharacteristicRequest::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& WriteCharacteristicRequest::value() const {
  // @@protoc_insertion_point(field_get:WriteCharacteristicRequest.value)
  return _internal_value();
}
inline void WriteCharacteristicRequest::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:WriteCharacteristicRequest.value)
}
inline std::string* WriteCharacteristicRequest::mutable_value() {
  // @@protoc_insertion_point(field_mutable:WriteCharacteristicRequest.value)
  return _internal_mutable_value();
}
inline const std::string& WriteCharacteristicRequest::_internal_value() const {
  return value_.Get();
}
inline void WriteCharacteristicRequest::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteCharacteristicRequest::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WriteCharacteristicRequest.value)
}
inline void WriteCharacteristicRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:WriteCharacteristicRequest.value)
}
inline void WriteCharacteristicRequest::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WriteCharacteristicRequest.value)
}
inline std::string* WriteCharacteristicRequest::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteCharacteristicRequest::release_value() {
  // @@protoc_insertion_point(field_release:WriteCharacteristicRequest.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteCharacteristicRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WriteCharacteristicRequest.value)
}

// -------------------------------------------------------------------

// WriteCharacteristicResponse

// .WriteCharacteristicRequest request = 1;
inline bool WriteCharacteristicResponse::_internal_has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline bool WriteCharacteristicResponse::has_request() const {
  return _internal_has_request();
}
inline void WriteCharacteristicResponse::clear_request() {
  if (GetArena() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
}
inline const ::WriteCharacteristicRequest& WriteCharacteristicResponse::_internal_request() const {
  const ::WriteCharacteristicRequest* p = request_;
  return p != nullptr ? *p : reinterpret_cast<const ::WriteCharacteristicRequest&>(
      ::_WriteCharacteristicRequest_default_instance_);
}
inline const ::WriteCharacteristicRequest& WriteCharacteristicResponse::request() const {
  // @@protoc_insertion_point(field_get:WriteCharacteristicResponse.request)
  return _internal_request();
}
inline void WriteCharacteristicResponse::unsafe_arena_set_allocated_request(
    ::WriteCharacteristicRequest* request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WriteCharacteristicResponse.request)
}
inline ::WriteCharacteristicRequest* WriteCharacteristicResponse::release_request() {
  
  ::WriteCharacteristicRequest* temp = request_;
  request_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::WriteCharacteristicRequest* WriteCharacteristicResponse::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:WriteCharacteristicResponse.request)
  
  ::WriteCharacteristicRequest* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::WriteCharacteristicRequest* WriteCharacteristicResponse::_internal_mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::WriteCharacteristicRequest>(GetArena());
    request_ = p;
  }
  return request_;
}
inline ::WriteCharacteristicRequest* WriteCharacteristicResponse::mutable_request() {
  // @@protoc_insertion_point(field_mutable:WriteCharacteristicResponse.request)
  return _internal_mutable_request();
}
inline void WriteCharacteristicResponse::set_allocated_request(::WriteCharacteristicRequest* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:WriteCharacteristicResponse.request)
}

// bool success = 2;
inline void WriteCharacteristicResponse::clear_success() {
  success_ = false;
}
inline bool WriteCharacteristicResponse::_internal_success() const {
  return success_;
}
inline bool WriteCharacteristicResponse::success() const {
  // @@protoc_insertion_point(field_get:WriteCharacteristicResponse.success)
  return _internal_success();
}
inline void WriteCharacteristicResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void WriteCharacteristicResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:WriteCharacteristicResponse.success)
}

// -------------------------------------------------------------------

// WriteDescriptorRequest

// string remote_id = 1;
inline void WriteDescriptorRequest::clear_remote_id() {
  remote_id_.ClearToEmpty();
}
inline const std::string& WriteDescriptorRequest::remote_id() const {
  // @@protoc_insertion_point(field_get:WriteDescriptorRequest.remote_id)
  return _internal_remote_id();
}
inline void WriteDescriptorRequest::set_remote_id(const std::string& value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:WriteDescriptorRequest.remote_id)
}
inline std::string* WriteDescriptorRequest::mutable_remote_id() {
  // @@protoc_insertion_point(field_mutable:WriteDescriptorRequest.remote_id)
  return _internal_mutable_remote_id();
}
inline const std::string& WriteDescriptorRequest::_internal_remote_id() const {
  return remote_id_.Get();
}
inline void WriteDescriptorRequest::_internal_set_remote_id(const std::string& value) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteDescriptorRequest::set_remote_id(std::string&& value) {
  
  remote_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WriteDescriptorRequest.remote_id)
}
inline void WriteDescriptorRequest::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:WriteDescriptorRequest.remote_id)
}
inline void WriteDescriptorRequest::set_remote_id(const char* value,
    size_t size) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WriteDescriptorRequest.remote_id)
}
inline std::string* WriteDescriptorRequest::_internal_mutable_remote_id() {
  
  return remote_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteDescriptorRequest::release_remote_id() {
  // @@protoc_insertion_point(field_release:WriteDescriptorRequest.remote_id)
  return remote_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteDescriptorRequest::set_allocated_remote_id(std::string* remote_id) {
  if (remote_id != nullptr) {
    
  } else {
    
  }
  remote_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WriteDescriptorRequest.remote_id)
}

// string descriptor_uuid = 2;
inline void WriteDescriptorRequest::clear_descriptor_uuid() {
  descriptor_uuid_.ClearToEmpty();
}
inline const std::string& WriteDescriptorRequest::descriptor_uuid() const {
  // @@protoc_insertion_point(field_get:WriteDescriptorRequest.descriptor_uuid)
  return _internal_descriptor_uuid();
}
inline void WriteDescriptorRequest::set_descriptor_uuid(const std::string& value) {
  _internal_set_descriptor_uuid(value);
  // @@protoc_insertion_point(field_set:WriteDescriptorRequest.descriptor_uuid)
}
inline std::string* WriteDescriptorRequest::mutable_descriptor_uuid() {
  // @@protoc_insertion_point(field_mutable:WriteDescriptorRequest.descriptor_uuid)
  return _internal_mutable_descriptor_uuid();
}
inline const std::string& WriteDescriptorRequest::_internal_descriptor_uuid() const {
  return descriptor_uuid_.Get();
}
inline void WriteDescriptorRequest::_internal_set_descriptor_uuid(const std::string& value) {
  
  descriptor_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteDescriptorRequest::set_descriptor_uuid(std::string&& value) {
  
  descriptor_uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WriteDescriptorRequest.descriptor_uuid)
}
inline void WriteDescriptorRequest::set_descriptor_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  descriptor_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:WriteDescriptorRequest.descriptor_uuid)
}
inline void WriteDescriptorRequest::set_descriptor_uuid(const char* value,
    size_t size) {
  
  descriptor_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WriteDescriptorRequest.descriptor_uuid)
}
inline std::string* WriteDescriptorRequest::_internal_mutable_descriptor_uuid() {
  
  return descriptor_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteDescriptorRequest::release_descriptor_uuid() {
  // @@protoc_insertion_point(field_release:WriteDescriptorRequest.descriptor_uuid)
  return descriptor_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteDescriptorRequest::set_allocated_descriptor_uuid(std::string* descriptor_uuid) {
  if (descriptor_uuid != nullptr) {
    
  } else {
    
  }
  descriptor_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), descriptor_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WriteDescriptorRequest.descriptor_uuid)
}

// string service_uuid = 3;
inline void WriteDescriptorRequest::clear_service_uuid() {
  service_uuid_.ClearToEmpty();
}
inline const std::string& WriteDescriptorRequest::service_uuid() const {
  // @@protoc_insertion_point(field_get:WriteDescriptorRequest.service_uuid)
  return _internal_service_uuid();
}
inline void WriteDescriptorRequest::set_service_uuid(const std::string& value) {
  _internal_set_service_uuid(value);
  // @@protoc_insertion_point(field_set:WriteDescriptorRequest.service_uuid)
}
inline std::string* WriteDescriptorRequest::mutable_service_uuid() {
  // @@protoc_insertion_point(field_mutable:WriteDescriptorRequest.service_uuid)
  return _internal_mutable_service_uuid();
}
inline const std::string& WriteDescriptorRequest::_internal_service_uuid() const {
  return service_uuid_.Get();
}
inline void WriteDescriptorRequest::_internal_set_service_uuid(const std::string& value) {
  
  service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteDescriptorRequest::set_service_uuid(std::string&& value) {
  
  service_uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WriteDescriptorRequest.service_uuid)
}
inline void WriteDescriptorRequest::set_service_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:WriteDescriptorRequest.service_uuid)
}
inline void WriteDescriptorRequest::set_service_uuid(const char* value,
    size_t size) {
  
  service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WriteDescriptorRequest.service_uuid)
}
inline std::string* WriteDescriptorRequest::_internal_mutable_service_uuid() {
  
  return service_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteDescriptorRequest::release_service_uuid() {
  // @@protoc_insertion_point(field_release:WriteDescriptorRequest.service_uuid)
  return service_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteDescriptorRequest::set_allocated_service_uuid(std::string* service_uuid) {
  if (service_uuid != nullptr) {
    
  } else {
    
  }
  service_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WriteDescriptorRequest.service_uuid)
}

// string secondary_service_uuid = 4;
inline void WriteDescriptorRequest::clear_secondary_service_uuid() {
  secondary_service_uuid_.ClearToEmpty();
}
inline const std::string& WriteDescriptorRequest::secondary_service_uuid() const {
  // @@protoc_insertion_point(field_get:WriteDescriptorRequest.secondary_service_uuid)
  return _internal_secondary_service_uuid();
}
inline void WriteDescriptorRequest::set_secondary_service_uuid(const std::string& value) {
  _internal_set_secondary_service_uuid(value);
  // @@protoc_insertion_point(field_set:WriteDescriptorRequest.secondary_service_uuid)
}
inline std::string* WriteDescriptorRequest::mutable_secondary_service_uuid() {
  // @@protoc_insertion_point(field_mutable:WriteDescriptorRequest.secondary_service_uuid)
  return _internal_mutable_secondary_service_uuid();
}
inline const std::string& WriteDescriptorRequest::_internal_secondary_service_uuid() const {
  return secondary_service_uuid_.Get();
}
inline void WriteDescriptorRequest::_internal_set_secondary_service_uuid(const std::string& value) {
  
  secondary_service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteDescriptorRequest::set_secondary_service_uuid(std::string&& value) {
  
  secondary_service_uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WriteDescriptorRequest.secondary_service_uuid)
}
inline void WriteDescriptorRequest::set_secondary_service_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secondary_service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:WriteDescriptorRequest.secondary_service_uuid)
}
inline void WriteDescriptorRequest::set_secondary_service_uuid(const char* value,
    size_t size) {
  
  secondary_service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WriteDescriptorRequest.secondary_service_uuid)
}
inline std::string* WriteDescriptorRequest::_internal_mutable_secondary_service_uuid() {
  
  return secondary_service_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteDescriptorRequest::release_secondary_service_uuid() {
  // @@protoc_insertion_point(field_release:WriteDescriptorRequest.secondary_service_uuid)
  return secondary_service_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteDescriptorRequest::set_allocated_secondary_service_uuid(std::string* secondary_service_uuid) {
  if (secondary_service_uuid != nullptr) {
    
  } else {
    
  }
  secondary_service_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secondary_service_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WriteDescriptorRequest.secondary_service_uuid)
}

// string characteristic_uuid = 5;
inline void WriteDescriptorRequest::clear_characteristic_uuid() {
  characteristic_uuid_.ClearToEmpty();
}
inline const std::string& WriteDescriptorRequest::characteristic_uuid() const {
  // @@protoc_insertion_point(field_get:WriteDescriptorRequest.characteristic_uuid)
  return _internal_characteristic_uuid();
}
inline void WriteDescriptorRequest::set_characteristic_uuid(const std::string& value) {
  _internal_set_characteristic_uuid(value);
  // @@protoc_insertion_point(field_set:WriteDescriptorRequest.characteristic_uuid)
}
inline std::string* WriteDescriptorRequest::mutable_characteristic_uuid() {
  // @@protoc_insertion_point(field_mutable:WriteDescriptorRequest.characteristic_uuid)
  return _internal_mutable_characteristic_uuid();
}
inline const std::string& WriteDescriptorRequest::_internal_characteristic_uuid() const {
  return characteristic_uuid_.Get();
}
inline void WriteDescriptorRequest::_internal_set_characteristic_uuid(const std::string& value) {
  
  characteristic_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteDescriptorRequest::set_characteristic_uuid(std::string&& value) {
  
  characteristic_uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WriteDescriptorRequest.characteristic_uuid)
}
inline void WriteDescriptorRequest::set_characteristic_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  characteristic_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:WriteDescriptorRequest.characteristic_uuid)
}
inline void WriteDescriptorRequest::set_characteristic_uuid(const char* value,
    size_t size) {
  
  characteristic_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WriteDescriptorRequest.characteristic_uuid)
}
inline std::string* WriteDescriptorRequest::_internal_mutable_characteristic_uuid() {
  
  return characteristic_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteDescriptorRequest::release_characteristic_uuid() {
  // @@protoc_insertion_point(field_release:WriteDescriptorRequest.characteristic_uuid)
  return characteristic_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteDescriptorRequest::set_allocated_characteristic_uuid(std::string* characteristic_uuid) {
  if (characteristic_uuid != nullptr) {
    
  } else {
    
  }
  characteristic_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), characteristic_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WriteDescriptorRequest.characteristic_uuid)
}

// bytes value = 6;
inline void WriteDescriptorRequest::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& WriteDescriptorRequest::value() const {
  // @@protoc_insertion_point(field_get:WriteDescriptorRequest.value)
  return _internal_value();
}
inline void WriteDescriptorRequest::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:WriteDescriptorRequest.value)
}
inline std::string* WriteDescriptorRequest::mutable_value() {
  // @@protoc_insertion_point(field_mutable:WriteDescriptorRequest.value)
  return _internal_mutable_value();
}
inline const std::string& WriteDescriptorRequest::_internal_value() const {
  return value_.Get();
}
inline void WriteDescriptorRequest::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteDescriptorRequest::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WriteDescriptorRequest.value)
}
inline void WriteDescriptorRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:WriteDescriptorRequest.value)
}
inline void WriteDescriptorRequest::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WriteDescriptorRequest.value)
}
inline std::string* WriteDescriptorRequest::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteDescriptorRequest::release_value() {
  // @@protoc_insertion_point(field_release:WriteDescriptorRequest.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteDescriptorRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WriteDescriptorRequest.value)
}

// -------------------------------------------------------------------

// WriteDescriptorResponse

// .WriteDescriptorRequest request = 1;
inline bool WriteDescriptorResponse::_internal_has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline bool WriteDescriptorResponse::has_request() const {
  return _internal_has_request();
}
inline void WriteDescriptorResponse::clear_request() {
  if (GetArena() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
}
inline const ::WriteDescriptorRequest& WriteDescriptorResponse::_internal_request() const {
  const ::WriteDescriptorRequest* p = request_;
  return p != nullptr ? *p : reinterpret_cast<const ::WriteDescriptorRequest&>(
      ::_WriteDescriptorRequest_default_instance_);
}
inline const ::WriteDescriptorRequest& WriteDescriptorResponse::request() const {
  // @@protoc_insertion_point(field_get:WriteDescriptorResponse.request)
  return _internal_request();
}
inline void WriteDescriptorResponse::unsafe_arena_set_allocated_request(
    ::WriteDescriptorRequest* request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WriteDescriptorResponse.request)
}
inline ::WriteDescriptorRequest* WriteDescriptorResponse::release_request() {
  
  ::WriteDescriptorRequest* temp = request_;
  request_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::WriteDescriptorRequest* WriteDescriptorResponse::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:WriteDescriptorResponse.request)
  
  ::WriteDescriptorRequest* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::WriteDescriptorRequest* WriteDescriptorResponse::_internal_mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::WriteDescriptorRequest>(GetArena());
    request_ = p;
  }
  return request_;
}
inline ::WriteDescriptorRequest* WriteDescriptorResponse::mutable_request() {
  // @@protoc_insertion_point(field_mutable:WriteDescriptorResponse.request)
  return _internal_mutable_request();
}
inline void WriteDescriptorResponse::set_allocated_request(::WriteDescriptorRequest* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:WriteDescriptorResponse.request)
}

// bool success = 2;
inline void WriteDescriptorResponse::clear_success() {
  success_ = false;
}
inline bool WriteDescriptorResponse::_internal_success() const {
  return success_;
}
inline bool WriteDescriptorResponse::success() const {
  // @@protoc_insertion_point(field_get:WriteDescriptorResponse.success)
  return _internal_success();
}
inline void WriteDescriptorResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void WriteDescriptorResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:WriteDescriptorResponse.success)
}

// -------------------------------------------------------------------

// SetNotificationRequest

// string remote_id = 1;
inline void SetNotificationRequest::clear_remote_id() {
  remote_id_.ClearToEmpty();
}
inline const std::string& SetNotificationRequest::remote_id() const {
  // @@protoc_insertion_point(field_get:SetNotificationRequest.remote_id)
  return _internal_remote_id();
}
inline void SetNotificationRequest::set_remote_id(const std::string& value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:SetNotificationRequest.remote_id)
}
inline std::string* SetNotificationRequest::mutable_remote_id() {
  // @@protoc_insertion_point(field_mutable:SetNotificationRequest.remote_id)
  return _internal_mutable_remote_id();
}
inline const std::string& SetNotificationRequest::_internal_remote_id() const {
  return remote_id_.Get();
}
inline void SetNotificationRequest::_internal_set_remote_id(const std::string& value) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetNotificationRequest::set_remote_id(std::string&& value) {
  
  remote_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SetNotificationRequest.remote_id)
}
inline void SetNotificationRequest::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SetNotificationRequest.remote_id)
}
inline void SetNotificationRequest::set_remote_id(const char* value,
    size_t size) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SetNotificationRequest.remote_id)
}
inline std::string* SetNotificationRequest::_internal_mutable_remote_id() {
  
  return remote_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetNotificationRequest::release_remote_id() {
  // @@protoc_insertion_point(field_release:SetNotificationRequest.remote_id)
  return remote_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetNotificationRequest::set_allocated_remote_id(std::string* remote_id) {
  if (remote_id != nullptr) {
    
  } else {
    
  }
  remote_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SetNotificationRequest.remote_id)
}

// string service_uuid = 2;
inline void SetNotificationRequest::clear_service_uuid() {
  service_uuid_.ClearToEmpty();
}
inline const std::string& SetNotificationRequest::service_uuid() const {
  // @@protoc_insertion_point(field_get:SetNotificationRequest.service_uuid)
  return _internal_service_uuid();
}
inline void SetNotificationRequest::set_service_uuid(const std::string& value) {
  _internal_set_service_uuid(value);
  // @@protoc_insertion_point(field_set:SetNotificationRequest.service_uuid)
}
inline std::string* SetNotificationRequest::mutable_service_uuid() {
  // @@protoc_insertion_point(field_mutable:SetNotificationRequest.service_uuid)
  return _internal_mutable_service_uuid();
}
inline const std::string& SetNotificationRequest::_internal_service_uuid() const {
  return service_uuid_.Get();
}
inline void SetNotificationRequest::_internal_set_service_uuid(const std::string& value) {
  
  service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetNotificationRequest::set_service_uuid(std::string&& value) {
  
  service_uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SetNotificationRequest.service_uuid)
}
inline void SetNotificationRequest::set_service_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SetNotificationRequest.service_uuid)
}
inline void SetNotificationRequest::set_service_uuid(const char* value,
    size_t size) {
  
  service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SetNotificationRequest.service_uuid)
}
inline std::string* SetNotificationRequest::_internal_mutable_service_uuid() {
  
  return service_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetNotificationRequest::release_service_uuid() {
  // @@protoc_insertion_point(field_release:SetNotificationRequest.service_uuid)
  return service_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetNotificationRequest::set_allocated_service_uuid(std::string* service_uuid) {
  if (service_uuid != nullptr) {
    
  } else {
    
  }
  service_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SetNotificationRequest.service_uuid)
}

// string secondary_service_uuid = 3;
inline void SetNotificationRequest::clear_secondary_service_uuid() {
  secondary_service_uuid_.ClearToEmpty();
}
inline const std::string& SetNotificationRequest::secondary_service_uuid() const {
  // @@protoc_insertion_point(field_get:SetNotificationRequest.secondary_service_uuid)
  return _internal_secondary_service_uuid();
}
inline void SetNotificationRequest::set_secondary_service_uuid(const std::string& value) {
  _internal_set_secondary_service_uuid(value);
  // @@protoc_insertion_point(field_set:SetNotificationRequest.secondary_service_uuid)
}
inline std::string* SetNotificationRequest::mutable_secondary_service_uuid() {
  // @@protoc_insertion_point(field_mutable:SetNotificationRequest.secondary_service_uuid)
  return _internal_mutable_secondary_service_uuid();
}
inline const std::string& SetNotificationRequest::_internal_secondary_service_uuid() const {
  return secondary_service_uuid_.Get();
}
inline void SetNotificationRequest::_internal_set_secondary_service_uuid(const std::string& value) {
  
  secondary_service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetNotificationRequest::set_secondary_service_uuid(std::string&& value) {
  
  secondary_service_uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SetNotificationRequest.secondary_service_uuid)
}
inline void SetNotificationRequest::set_secondary_service_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secondary_service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SetNotificationRequest.secondary_service_uuid)
}
inline void SetNotificationRequest::set_secondary_service_uuid(const char* value,
    size_t size) {
  
  secondary_service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SetNotificationRequest.secondary_service_uuid)
}
inline std::string* SetNotificationRequest::_internal_mutable_secondary_service_uuid() {
  
  return secondary_service_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetNotificationRequest::release_secondary_service_uuid() {
  // @@protoc_insertion_point(field_release:SetNotificationRequest.secondary_service_uuid)
  return secondary_service_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetNotificationRequest::set_allocated_secondary_service_uuid(std::string* secondary_service_uuid) {
  if (secondary_service_uuid != nullptr) {
    
  } else {
    
  }
  secondary_service_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secondary_service_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SetNotificationRequest.secondary_service_uuid)
}

// string characteristic_uuid = 4;
inline void SetNotificationRequest::clear_characteristic_uuid() {
  characteristic_uuid_.ClearToEmpty();
}
inline const std::string& SetNotificationRequest::characteristic_uuid() const {
  // @@protoc_insertion_point(field_get:SetNotificationRequest.characteristic_uuid)
  return _internal_characteristic_uuid();
}
inline void SetNotificationRequest::set_characteristic_uuid(const std::string& value) {
  _internal_set_characteristic_uuid(value);
  // @@protoc_insertion_point(field_set:SetNotificationRequest.characteristic_uuid)
}
inline std::string* SetNotificationRequest::mutable_characteristic_uuid() {
  // @@protoc_insertion_point(field_mutable:SetNotificationRequest.characteristic_uuid)
  return _internal_mutable_characteristic_uuid();
}
inline const std::string& SetNotificationRequest::_internal_characteristic_uuid() const {
  return characteristic_uuid_.Get();
}
inline void SetNotificationRequest::_internal_set_characteristic_uuid(const std::string& value) {
  
  characteristic_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetNotificationRequest::set_characteristic_uuid(std::string&& value) {
  
  characteristic_uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SetNotificationRequest.characteristic_uuid)
}
inline void SetNotificationRequest::set_characteristic_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  characteristic_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SetNotificationRequest.characteristic_uuid)
}
inline void SetNotificationRequest::set_characteristic_uuid(const char* value,
    size_t size) {
  
  characteristic_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SetNotificationRequest.characteristic_uuid)
}
inline std::string* SetNotificationRequest::_internal_mutable_characteristic_uuid() {
  
  return characteristic_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetNotificationRequest::release_characteristic_uuid() {
  // @@protoc_insertion_point(field_release:SetNotificationRequest.characteristic_uuid)
  return characteristic_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetNotificationRequest::set_allocated_characteristic_uuid(std::string* characteristic_uuid) {
  if (characteristic_uuid != nullptr) {
    
  } else {
    
  }
  characteristic_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), characteristic_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SetNotificationRequest.characteristic_uuid)
}

// bool enable = 5;
inline void SetNotificationRequest::clear_enable() {
  enable_ = false;
}
inline bool SetNotificationRequest::_internal_enable() const {
  return enable_;
}
inline bool SetNotificationRequest::enable() const {
  // @@protoc_insertion_point(field_get:SetNotificationRequest.enable)
  return _internal_enable();
}
inline void SetNotificationRequest::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void SetNotificationRequest::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:SetNotificationRequest.enable)
}

// -------------------------------------------------------------------

// SetNotificationResponse

// string remote_id = 1;
inline void SetNotificationResponse::clear_remote_id() {
  remote_id_.ClearToEmpty();
}
inline const std::string& SetNotificationResponse::remote_id() const {
  // @@protoc_insertion_point(field_get:SetNotificationResponse.remote_id)
  return _internal_remote_id();
}
inline void SetNotificationResponse::set_remote_id(const std::string& value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:SetNotificationResponse.remote_id)
}
inline std::string* SetNotificationResponse::mutable_remote_id() {
  // @@protoc_insertion_point(field_mutable:SetNotificationResponse.remote_id)
  return _internal_mutable_remote_id();
}
inline const std::string& SetNotificationResponse::_internal_remote_id() const {
  return remote_id_.Get();
}
inline void SetNotificationResponse::_internal_set_remote_id(const std::string& value) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetNotificationResponse::set_remote_id(std::string&& value) {
  
  remote_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SetNotificationResponse.remote_id)
}
inline void SetNotificationResponse::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SetNotificationResponse.remote_id)
}
inline void SetNotificationResponse::set_remote_id(const char* value,
    size_t size) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SetNotificationResponse.remote_id)
}
inline std::string* SetNotificationResponse::_internal_mutable_remote_id() {
  
  return remote_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetNotificationResponse::release_remote_id() {
  // @@protoc_insertion_point(field_release:SetNotificationResponse.remote_id)
  return remote_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetNotificationResponse::set_allocated_remote_id(std::string* remote_id) {
  if (remote_id != nullptr) {
    
  } else {
    
  }
  remote_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SetNotificationResponse.remote_id)
}

// .BluetoothCharacteristic characteristic = 2;
inline bool SetNotificationResponse::_internal_has_characteristic() const {
  return this != internal_default_instance() && characteristic_ != nullptr;
}
inline bool SetNotificationResponse::has_characteristic() const {
  return _internal_has_characteristic();
}
inline void SetNotificationResponse::clear_characteristic() {
  if (GetArena() == nullptr && characteristic_ != nullptr) {
    delete characteristic_;
  }
  characteristic_ = nullptr;
}
inline const ::BluetoothCharacteristic& SetNotificationResponse::_internal_characteristic() const {
  const ::BluetoothCharacteristic* p = characteristic_;
  return p != nullptr ? *p : reinterpret_cast<const ::BluetoothCharacteristic&>(
      ::_BluetoothCharacteristic_default_instance_);
}
inline const ::BluetoothCharacteristic& SetNotificationResponse::characteristic() const {
  // @@protoc_insertion_point(field_get:SetNotificationResponse.characteristic)
  return _internal_characteristic();
}
inline void SetNotificationResponse::unsafe_arena_set_allocated_characteristic(
    ::BluetoothCharacteristic* characteristic) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(characteristic_);
  }
  characteristic_ = characteristic;
  if (characteristic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SetNotificationResponse.characteristic)
}
inline ::BluetoothCharacteristic* SetNotificationResponse::release_characteristic() {
  
  ::BluetoothCharacteristic* temp = characteristic_;
  characteristic_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BluetoothCharacteristic* SetNotificationResponse::unsafe_arena_release_characteristic() {
  // @@protoc_insertion_point(field_release:SetNotificationResponse.characteristic)
  
  ::BluetoothCharacteristic* temp = characteristic_;
  characteristic_ = nullptr;
  return temp;
}
inline ::BluetoothCharacteristic* SetNotificationResponse::_internal_mutable_characteristic() {
  
  if (characteristic_ == nullptr) {
    auto* p = CreateMaybeMessage<::BluetoothCharacteristic>(GetArena());
    characteristic_ = p;
  }
  return characteristic_;
}
inline ::BluetoothCharacteristic* SetNotificationResponse::mutable_characteristic() {
  // @@protoc_insertion_point(field_mutable:SetNotificationResponse.characteristic)
  return _internal_mutable_characteristic();
}
inline void SetNotificationResponse::set_allocated_characteristic(::BluetoothCharacteristic* characteristic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete characteristic_;
  }
  if (characteristic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(characteristic);
    if (message_arena != submessage_arena) {
      characteristic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, characteristic, submessage_arena);
    }
    
  } else {
    
  }
  characteristic_ = characteristic;
  // @@protoc_insertion_point(field_set_allocated:SetNotificationResponse.characteristic)
}

// bool success = 3;
inline void SetNotificationResponse::clear_success() {
  success_ = false;
}
inline bool SetNotificationResponse::_internal_success() const {
  return success_;
}
inline bool SetNotificationResponse::success() const {
  // @@protoc_insertion_point(field_get:SetNotificationResponse.success)
  return _internal_success();
}
inline void SetNotificationResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void SetNotificationResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:SetNotificationResponse.success)
}

// -------------------------------------------------------------------

// OnCharacteristicChanged

// string remote_id = 1;
inline void OnCharacteristicChanged::clear_remote_id() {
  remote_id_.ClearToEmpty();
}
inline const std::string& OnCharacteristicChanged::remote_id() const {
  // @@protoc_insertion_point(field_get:OnCharacteristicChanged.remote_id)
  return _internal_remote_id();
}
inline void OnCharacteristicChanged::set_remote_id(const std::string& value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:OnCharacteristicChanged.remote_id)
}
inline std::string* OnCharacteristicChanged::mutable_remote_id() {
  // @@protoc_insertion_point(field_mutable:OnCharacteristicChanged.remote_id)
  return _internal_mutable_remote_id();
}
inline const std::string& OnCharacteristicChanged::_internal_remote_id() const {
  return remote_id_.Get();
}
inline void OnCharacteristicChanged::_internal_set_remote_id(const std::string& value) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnCharacteristicChanged::set_remote_id(std::string&& value) {
  
  remote_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OnCharacteristicChanged.remote_id)
}
inline void OnCharacteristicChanged::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:OnCharacteristicChanged.remote_id)
}
inline void OnCharacteristicChanged::set_remote_id(const char* value,
    size_t size) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OnCharacteristicChanged.remote_id)
}
inline std::string* OnCharacteristicChanged::_internal_mutable_remote_id() {
  
  return remote_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnCharacteristicChanged::release_remote_id() {
  // @@protoc_insertion_point(field_release:OnCharacteristicChanged.remote_id)
  return remote_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnCharacteristicChanged::set_allocated_remote_id(std::string* remote_id) {
  if (remote_id != nullptr) {
    
  } else {
    
  }
  remote_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OnCharacteristicChanged.remote_id)
}

// .BluetoothCharacteristic characteristic = 2;
inline bool OnCharacteristicChanged::_internal_has_characteristic() const {
  return this != internal_default_instance() && characteristic_ != nullptr;
}
inline bool OnCharacteristicChanged::has_characteristic() const {
  return _internal_has_characteristic();
}
inline void OnCharacteristicChanged::clear_characteristic() {
  if (GetArena() == nullptr && characteristic_ != nullptr) {
    delete characteristic_;
  }
  characteristic_ = nullptr;
}
inline const ::BluetoothCharacteristic& OnCharacteristicChanged::_internal_characteristic() const {
  const ::BluetoothCharacteristic* p = characteristic_;
  return p != nullptr ? *p : reinterpret_cast<const ::BluetoothCharacteristic&>(
      ::_BluetoothCharacteristic_default_instance_);
}
inline const ::BluetoothCharacteristic& OnCharacteristicChanged::characteristic() const {
  // @@protoc_insertion_point(field_get:OnCharacteristicChanged.characteristic)
  return _internal_characteristic();
}
inline void OnCharacteristicChanged::unsafe_arena_set_allocated_characteristic(
    ::BluetoothCharacteristic* characteristic) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(characteristic_);
  }
  characteristic_ = characteristic;
  if (characteristic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OnCharacteristicChanged.characteristic)
}
inline ::BluetoothCharacteristic* OnCharacteristicChanged::release_characteristic() {
  
  ::BluetoothCharacteristic* temp = characteristic_;
  characteristic_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BluetoothCharacteristic* OnCharacteristicChanged::unsafe_arena_release_characteristic() {
  // @@protoc_insertion_point(field_release:OnCharacteristicChanged.characteristic)
  
  ::BluetoothCharacteristic* temp = characteristic_;
  characteristic_ = nullptr;
  return temp;
}
inline ::BluetoothCharacteristic* OnCharacteristicChanged::_internal_mutable_characteristic() {
  
  if (characteristic_ == nullptr) {
    auto* p = CreateMaybeMessage<::BluetoothCharacteristic>(GetArena());
    characteristic_ = p;
  }
  return characteristic_;
}
inline ::BluetoothCharacteristic* OnCharacteristicChanged::mutable_characteristic() {
  // @@protoc_insertion_point(field_mutable:OnCharacteristicChanged.characteristic)
  return _internal_mutable_characteristic();
}
inline void OnCharacteristicChanged::set_allocated_characteristic(::BluetoothCharacteristic* characteristic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete characteristic_;
  }
  if (characteristic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(characteristic);
    if (message_arena != submessage_arena) {
      characteristic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, characteristic, submessage_arena);
    }
    
  } else {
    
  }
  characteristic_ = characteristic;
  // @@protoc_insertion_point(field_set_allocated:OnCharacteristicChanged.characteristic)
}

// -------------------------------------------------------------------

// DeviceStateResponse

// string remote_id = 1;
inline void DeviceStateResponse::clear_remote_id() {
  remote_id_.ClearToEmpty();
}
inline const std::string& DeviceStateResponse::remote_id() const {
  // @@protoc_insertion_point(field_get:DeviceStateResponse.remote_id)
  return _internal_remote_id();
}
inline void DeviceStateResponse::set_remote_id(const std::string& value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:DeviceStateResponse.remote_id)
}
inline std::string* DeviceStateResponse::mutable_remote_id() {
  // @@protoc_insertion_point(field_mutable:DeviceStateResponse.remote_id)
  return _internal_mutable_remote_id();
}
inline const std::string& DeviceStateResponse::_internal_remote_id() const {
  return remote_id_.Get();
}
inline void DeviceStateResponse::_internal_set_remote_id(const std::string& value) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeviceStateResponse::set_remote_id(std::string&& value) {
  
  remote_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DeviceStateResponse.remote_id)
}
inline void DeviceStateResponse::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DeviceStateResponse.remote_id)
}
inline void DeviceStateResponse::set_remote_id(const char* value,
    size_t size) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DeviceStateResponse.remote_id)
}
inline std::string* DeviceStateResponse::_internal_mutable_remote_id() {
  
  return remote_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeviceStateResponse::release_remote_id() {
  // @@protoc_insertion_point(field_release:DeviceStateResponse.remote_id)
  return remote_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceStateResponse::set_allocated_remote_id(std::string* remote_id) {
  if (remote_id != nullptr) {
    
  } else {
    
  }
  remote_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DeviceStateResponse.remote_id)
}

// .DeviceStateResponse.BluetoothDeviceState state = 2;
inline void DeviceStateResponse::clear_state() {
  state_ = 0;
}
inline ::DeviceStateResponse_BluetoothDeviceState DeviceStateResponse::_internal_state() const {
  return static_cast< ::DeviceStateResponse_BluetoothDeviceState >(state_);
}
inline ::DeviceStateResponse_BluetoothDeviceState DeviceStateResponse::state() const {
  // @@protoc_insertion_point(field_get:DeviceStateResponse.state)
  return _internal_state();
}
inline void DeviceStateResponse::_internal_set_state(::DeviceStateResponse_BluetoothDeviceState value) {
  
  state_ = value;
}
inline void DeviceStateResponse::set_state(::DeviceStateResponse_BluetoothDeviceState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:DeviceStateResponse.state)
}

// -------------------------------------------------------------------

// ConnectedDevicesResponse

// repeated .BluetoothDevice devices = 1;
inline int ConnectedDevicesResponse::_internal_devices_size() const {
  return devices_.size();
}
inline int ConnectedDevicesResponse::devices_size() const {
  return _internal_devices_size();
}
inline void ConnectedDevicesResponse::clear_devices() {
  devices_.Clear();
}
inline ::BluetoothDevice* ConnectedDevicesResponse::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:ConnectedDevicesResponse.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothDevice >*
ConnectedDevicesResponse::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:ConnectedDevicesResponse.devices)
  return &devices_;
}
inline const ::BluetoothDevice& ConnectedDevicesResponse::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::BluetoothDevice& ConnectedDevicesResponse::devices(int index) const {
  // @@protoc_insertion_point(field_get:ConnectedDevicesResponse.devices)
  return _internal_devices(index);
}
inline ::BluetoothDevice* ConnectedDevicesResponse::_internal_add_devices() {
  return devices_.Add();
}
inline ::BluetoothDevice* ConnectedDevicesResponse::add_devices() {
  // @@protoc_insertion_point(field_add:ConnectedDevicesResponse.devices)
  return _internal_add_devices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothDevice >&
ConnectedDevicesResponse::devices() const {
  // @@protoc_insertion_point(field_list:ConnectedDevicesResponse.devices)
  return devices_;
}

// -------------------------------------------------------------------

// MtuSizeRequest

// string remote_id = 1;
inline void MtuSizeRequest::clear_remote_id() {
  remote_id_.ClearToEmpty();
}
inline const std::string& MtuSizeRequest::remote_id() const {
  // @@protoc_insertion_point(field_get:MtuSizeRequest.remote_id)
  return _internal_remote_id();
}
inline void MtuSizeRequest::set_remote_id(const std::string& value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:MtuSizeRequest.remote_id)
}
inline std::string* MtuSizeRequest::mutable_remote_id() {
  // @@protoc_insertion_point(field_mutable:MtuSizeRequest.remote_id)
  return _internal_mutable_remote_id();
}
inline const std::string& MtuSizeRequest::_internal_remote_id() const {
  return remote_id_.Get();
}
inline void MtuSizeRequest::_internal_set_remote_id(const std::string& value) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MtuSizeRequest::set_remote_id(std::string&& value) {
  
  remote_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MtuSizeRequest.remote_id)
}
inline void MtuSizeRequest::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MtuSizeRequest.remote_id)
}
inline void MtuSizeRequest::set_remote_id(const char* value,
    size_t size) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MtuSizeRequest.remote_id)
}
inline std::string* MtuSizeRequest::_internal_mutable_remote_id() {
  
  return remote_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MtuSizeRequest::release_remote_id() {
  // @@protoc_insertion_point(field_release:MtuSizeRequest.remote_id)
  return remote_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MtuSizeRequest::set_allocated_remote_id(std::string* remote_id) {
  if (remote_id != nullptr) {
    
  } else {
    
  }
  remote_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MtuSizeRequest.remote_id)
}

// uint32 mtu = 2;
inline void MtuSizeRequest::clear_mtu() {
  mtu_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MtuSizeRequest::_internal_mtu() const {
  return mtu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MtuSizeRequest::mtu() const {
  // @@protoc_insertion_point(field_get:MtuSizeRequest.mtu)
  return _internal_mtu();
}
inline void MtuSizeRequest::_internal_set_mtu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mtu_ = value;
}
inline void MtuSizeRequest::set_mtu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mtu(value);
  // @@protoc_insertion_point(field_set:MtuSizeRequest.mtu)
}

// -------------------------------------------------------------------

// MtuSizeResponse

// string remote_id = 1;
inline void MtuSizeResponse::clear_remote_id() {
  remote_id_.ClearToEmpty();
}
inline const std::string& MtuSizeResponse::remote_id() const {
  // @@protoc_insertion_point(field_get:MtuSizeResponse.remote_id)
  return _internal_remote_id();
}
inline void MtuSizeResponse::set_remote_id(const std::string& value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:MtuSizeResponse.remote_id)
}
inline std::string* MtuSizeResponse::mutable_remote_id() {
  // @@protoc_insertion_point(field_mutable:MtuSizeResponse.remote_id)
  return _internal_mutable_remote_id();
}
inline const std::string& MtuSizeResponse::_internal_remote_id() const {
  return remote_id_.Get();
}
inline void MtuSizeResponse::_internal_set_remote_id(const std::string& value) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MtuSizeResponse::set_remote_id(std::string&& value) {
  
  remote_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MtuSizeResponse.remote_id)
}
inline void MtuSizeResponse::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MtuSizeResponse.remote_id)
}
inline void MtuSizeResponse::set_remote_id(const char* value,
    size_t size) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MtuSizeResponse.remote_id)
}
inline std::string* MtuSizeResponse::_internal_mutable_remote_id() {
  
  return remote_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MtuSizeResponse::release_remote_id() {
  // @@protoc_insertion_point(field_release:MtuSizeResponse.remote_id)
  return remote_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MtuSizeResponse::set_allocated_remote_id(std::string* remote_id) {
  if (remote_id != nullptr) {
    
  } else {
    
  }
  remote_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MtuSizeResponse.remote_id)
}

// uint32 mtu = 2;
inline void MtuSizeResponse::clear_mtu() {
  mtu_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MtuSizeResponse::_internal_mtu() const {
  return mtu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MtuSizeResponse::mtu() const {
  // @@protoc_insertion_point(field_get:MtuSizeResponse.mtu)
  return _internal_mtu();
}
inline void MtuSizeResponse::_internal_set_mtu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mtu_ = value;
}
inline void MtuSizeResponse::set_mtu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mtu(value);
  // @@protoc_insertion_point(field_set:MtuSizeResponse.mtu)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::BluetoothState_State> : ::std::true_type {};
template <> struct is_proto_enum< ::BluetoothDevice_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::WriteCharacteristicRequest_WriteType> : ::std::true_type {};
template <> struct is_proto_enum< ::DeviceStateResponse_BluetoothDeviceState> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flutterblue_2eproto
