// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flutterblue.proto

#ifndef PROTOBUF_INCLUDED_flutterblue_2eproto
#define PROTOBUF_INCLUDED_flutterblue_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_flutterblue_2eproto 

namespace protobuf_flutterblue_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[29];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_flutterblue_2eproto
class AdvertisementData;
class AdvertisementDataDefaultTypeInternal;
extern AdvertisementDataDefaultTypeInternal _AdvertisementData_default_instance_;
class AdvertisementData_ManufacturerDataEntry_DoNotUse;
class AdvertisementData_ManufacturerDataEntry_DoNotUseDefaultTypeInternal;
extern AdvertisementData_ManufacturerDataEntry_DoNotUseDefaultTypeInternal _AdvertisementData_ManufacturerDataEntry_DoNotUse_default_instance_;
class AdvertisementData_ServiceDataEntry_DoNotUse;
class AdvertisementData_ServiceDataEntry_DoNotUseDefaultTypeInternal;
extern AdvertisementData_ServiceDataEntry_DoNotUseDefaultTypeInternal _AdvertisementData_ServiceDataEntry_DoNotUse_default_instance_;
class BluetoothCharacteristic;
class BluetoothCharacteristicDefaultTypeInternal;
extern BluetoothCharacteristicDefaultTypeInternal _BluetoothCharacteristic_default_instance_;
class BluetoothDescriptor;
class BluetoothDescriptorDefaultTypeInternal;
extern BluetoothDescriptorDefaultTypeInternal _BluetoothDescriptor_default_instance_;
class BluetoothDevice;
class BluetoothDeviceDefaultTypeInternal;
extern BluetoothDeviceDefaultTypeInternal _BluetoothDevice_default_instance_;
class BluetoothService;
class BluetoothServiceDefaultTypeInternal;
extern BluetoothServiceDefaultTypeInternal _BluetoothService_default_instance_;
class BluetoothState;
class BluetoothStateDefaultTypeInternal;
extern BluetoothStateDefaultTypeInternal _BluetoothState_default_instance_;
class CharacteristicProperties;
class CharacteristicPropertiesDefaultTypeInternal;
extern CharacteristicPropertiesDefaultTypeInternal _CharacteristicProperties_default_instance_;
class ConnectRequest;
class ConnectRequestDefaultTypeInternal;
extern ConnectRequestDefaultTypeInternal _ConnectRequest_default_instance_;
class ConnectedDevicesResponse;
class ConnectedDevicesResponseDefaultTypeInternal;
extern ConnectedDevicesResponseDefaultTypeInternal _ConnectedDevicesResponse_default_instance_;
class DeviceStateResponse;
class DeviceStateResponseDefaultTypeInternal;
extern DeviceStateResponseDefaultTypeInternal _DeviceStateResponse_default_instance_;
class DiscoverServicesResult;
class DiscoverServicesResultDefaultTypeInternal;
extern DiscoverServicesResultDefaultTypeInternal _DiscoverServicesResult_default_instance_;
class Int32Value;
class Int32ValueDefaultTypeInternal;
extern Int32ValueDefaultTypeInternal _Int32Value_default_instance_;
class MtuSizeRequest;
class MtuSizeRequestDefaultTypeInternal;
extern MtuSizeRequestDefaultTypeInternal _MtuSizeRequest_default_instance_;
class MtuSizeResponse;
class MtuSizeResponseDefaultTypeInternal;
extern MtuSizeResponseDefaultTypeInternal _MtuSizeResponse_default_instance_;
class OnCharacteristicChanged;
class OnCharacteristicChangedDefaultTypeInternal;
extern OnCharacteristicChangedDefaultTypeInternal _OnCharacteristicChanged_default_instance_;
class ReadCharacteristicRequest;
class ReadCharacteristicRequestDefaultTypeInternal;
extern ReadCharacteristicRequestDefaultTypeInternal _ReadCharacteristicRequest_default_instance_;
class ReadCharacteristicResponse;
class ReadCharacteristicResponseDefaultTypeInternal;
extern ReadCharacteristicResponseDefaultTypeInternal _ReadCharacteristicResponse_default_instance_;
class ReadDescriptorRequest;
class ReadDescriptorRequestDefaultTypeInternal;
extern ReadDescriptorRequestDefaultTypeInternal _ReadDescriptorRequest_default_instance_;
class ReadDescriptorResponse;
class ReadDescriptorResponseDefaultTypeInternal;
extern ReadDescriptorResponseDefaultTypeInternal _ReadDescriptorResponse_default_instance_;
class ScanResult;
class ScanResultDefaultTypeInternal;
extern ScanResultDefaultTypeInternal _ScanResult_default_instance_;
class ScanSettings;
class ScanSettingsDefaultTypeInternal;
extern ScanSettingsDefaultTypeInternal _ScanSettings_default_instance_;
class SetNotificationRequest;
class SetNotificationRequestDefaultTypeInternal;
extern SetNotificationRequestDefaultTypeInternal _SetNotificationRequest_default_instance_;
class SetNotificationResponse;
class SetNotificationResponseDefaultTypeInternal;
extern SetNotificationResponseDefaultTypeInternal _SetNotificationResponse_default_instance_;
class WriteCharacteristicRequest;
class WriteCharacteristicRequestDefaultTypeInternal;
extern WriteCharacteristicRequestDefaultTypeInternal _WriteCharacteristicRequest_default_instance_;
class WriteCharacteristicResponse;
class WriteCharacteristicResponseDefaultTypeInternal;
extern WriteCharacteristicResponseDefaultTypeInternal _WriteCharacteristicResponse_default_instance_;
class WriteDescriptorRequest;
class WriteDescriptorRequestDefaultTypeInternal;
extern WriteDescriptorRequestDefaultTypeInternal _WriteDescriptorRequest_default_instance_;
class WriteDescriptorResponse;
class WriteDescriptorResponseDefaultTypeInternal;
extern WriteDescriptorResponseDefaultTypeInternal _WriteDescriptorResponse_default_instance_;
namespace google {
namespace protobuf {
template<> ::AdvertisementData* Arena::CreateMaybeMessage<::AdvertisementData>(Arena*);
template<> ::AdvertisementData_ManufacturerDataEntry_DoNotUse* Arena::CreateMaybeMessage<::AdvertisementData_ManufacturerDataEntry_DoNotUse>(Arena*);
template<> ::AdvertisementData_ServiceDataEntry_DoNotUse* Arena::CreateMaybeMessage<::AdvertisementData_ServiceDataEntry_DoNotUse>(Arena*);
template<> ::BluetoothCharacteristic* Arena::CreateMaybeMessage<::BluetoothCharacteristic>(Arena*);
template<> ::BluetoothDescriptor* Arena::CreateMaybeMessage<::BluetoothDescriptor>(Arena*);
template<> ::BluetoothDevice* Arena::CreateMaybeMessage<::BluetoothDevice>(Arena*);
template<> ::BluetoothService* Arena::CreateMaybeMessage<::BluetoothService>(Arena*);
template<> ::BluetoothState* Arena::CreateMaybeMessage<::BluetoothState>(Arena*);
template<> ::CharacteristicProperties* Arena::CreateMaybeMessage<::CharacteristicProperties>(Arena*);
template<> ::ConnectRequest* Arena::CreateMaybeMessage<::ConnectRequest>(Arena*);
template<> ::ConnectedDevicesResponse* Arena::CreateMaybeMessage<::ConnectedDevicesResponse>(Arena*);
template<> ::DeviceStateResponse* Arena::CreateMaybeMessage<::DeviceStateResponse>(Arena*);
template<> ::DiscoverServicesResult* Arena::CreateMaybeMessage<::DiscoverServicesResult>(Arena*);
template<> ::Int32Value* Arena::CreateMaybeMessage<::Int32Value>(Arena*);
template<> ::MtuSizeRequest* Arena::CreateMaybeMessage<::MtuSizeRequest>(Arena*);
template<> ::MtuSizeResponse* Arena::CreateMaybeMessage<::MtuSizeResponse>(Arena*);
template<> ::OnCharacteristicChanged* Arena::CreateMaybeMessage<::OnCharacteristicChanged>(Arena*);
template<> ::ReadCharacteristicRequest* Arena::CreateMaybeMessage<::ReadCharacteristicRequest>(Arena*);
template<> ::ReadCharacteristicResponse* Arena::CreateMaybeMessage<::ReadCharacteristicResponse>(Arena*);
template<> ::ReadDescriptorRequest* Arena::CreateMaybeMessage<::ReadDescriptorRequest>(Arena*);
template<> ::ReadDescriptorResponse* Arena::CreateMaybeMessage<::ReadDescriptorResponse>(Arena*);
template<> ::ScanResult* Arena::CreateMaybeMessage<::ScanResult>(Arena*);
template<> ::ScanSettings* Arena::CreateMaybeMessage<::ScanSettings>(Arena*);
template<> ::SetNotificationRequest* Arena::CreateMaybeMessage<::SetNotificationRequest>(Arena*);
template<> ::SetNotificationResponse* Arena::CreateMaybeMessage<::SetNotificationResponse>(Arena*);
template<> ::WriteCharacteristicRequest* Arena::CreateMaybeMessage<::WriteCharacteristicRequest>(Arena*);
template<> ::WriteCharacteristicResponse* Arena::CreateMaybeMessage<::WriteCharacteristicResponse>(Arena*);
template<> ::WriteDescriptorRequest* Arena::CreateMaybeMessage<::WriteDescriptorRequest>(Arena*);
template<> ::WriteDescriptorResponse* Arena::CreateMaybeMessage<::WriteDescriptorResponse>(Arena*);
}  // namespace protobuf
}  // namespace google

enum BluetoothState_State {
  BluetoothState_State_UNKNOWN = 0,
  BluetoothState_State_UNAVAILABLE = 1,
  BluetoothState_State_UNAUTHORIZED = 2,
  BluetoothState_State_TURNING_ON = 3,
  BluetoothState_State_ON = 4,
  BluetoothState_State_TURNING_OFF = 5,
  BluetoothState_State_OFF = 6,
  BluetoothState_State_BluetoothState_State_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BluetoothState_State_BluetoothState_State_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BluetoothState_State_IsValid(int value);
const BluetoothState_State BluetoothState_State_State_MIN = BluetoothState_State_UNKNOWN;
const BluetoothState_State BluetoothState_State_State_MAX = BluetoothState_State_OFF;
const int BluetoothState_State_State_ARRAYSIZE = BluetoothState_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* BluetoothState_State_descriptor();
inline const ::std::string& BluetoothState_State_Name(BluetoothState_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    BluetoothState_State_descriptor(), value);
}
inline bool BluetoothState_State_Parse(
    const ::std::string& name, BluetoothState_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BluetoothState_State>(
    BluetoothState_State_descriptor(), name, value);
}
enum BluetoothDevice_Type {
  BluetoothDevice_Type_UNKNOWN = 0,
  BluetoothDevice_Type_CLASSIC = 1,
  BluetoothDevice_Type_LE = 2,
  BluetoothDevice_Type_DUAL = 3,
  BluetoothDevice_Type_BluetoothDevice_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BluetoothDevice_Type_BluetoothDevice_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BluetoothDevice_Type_IsValid(int value);
const BluetoothDevice_Type BluetoothDevice_Type_Type_MIN = BluetoothDevice_Type_UNKNOWN;
const BluetoothDevice_Type BluetoothDevice_Type_Type_MAX = BluetoothDevice_Type_DUAL;
const int BluetoothDevice_Type_Type_ARRAYSIZE = BluetoothDevice_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* BluetoothDevice_Type_descriptor();
inline const ::std::string& BluetoothDevice_Type_Name(BluetoothDevice_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    BluetoothDevice_Type_descriptor(), value);
}
inline bool BluetoothDevice_Type_Parse(
    const ::std::string& name, BluetoothDevice_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BluetoothDevice_Type>(
    BluetoothDevice_Type_descriptor(), name, value);
}
enum WriteCharacteristicRequest_WriteType {
  WriteCharacteristicRequest_WriteType_WITH_RESPONSE = 0,
  WriteCharacteristicRequest_WriteType_WITHOUT_RESPONSE = 1,
  WriteCharacteristicRequest_WriteType_WriteCharacteristicRequest_WriteType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  WriteCharacteristicRequest_WriteType_WriteCharacteristicRequest_WriteType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool WriteCharacteristicRequest_WriteType_IsValid(int value);
const WriteCharacteristicRequest_WriteType WriteCharacteristicRequest_WriteType_WriteType_MIN = WriteCharacteristicRequest_WriteType_WITH_RESPONSE;
const WriteCharacteristicRequest_WriteType WriteCharacteristicRequest_WriteType_WriteType_MAX = WriteCharacteristicRequest_WriteType_WITHOUT_RESPONSE;
const int WriteCharacteristicRequest_WriteType_WriteType_ARRAYSIZE = WriteCharacteristicRequest_WriteType_WriteType_MAX + 1;

const ::google::protobuf::EnumDescriptor* WriteCharacteristicRequest_WriteType_descriptor();
inline const ::std::string& WriteCharacteristicRequest_WriteType_Name(WriteCharacteristicRequest_WriteType value) {
  return ::google::protobuf::internal::NameOfEnum(
    WriteCharacteristicRequest_WriteType_descriptor(), value);
}
inline bool WriteCharacteristicRequest_WriteType_Parse(
    const ::std::string& name, WriteCharacteristicRequest_WriteType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WriteCharacteristicRequest_WriteType>(
    WriteCharacteristicRequest_WriteType_descriptor(), name, value);
}
enum DeviceStateResponse_BluetoothDeviceState {
  DeviceStateResponse_BluetoothDeviceState_DISCONNECTED = 0,
  DeviceStateResponse_BluetoothDeviceState_CONNECTING = 1,
  DeviceStateResponse_BluetoothDeviceState_CONNECTED = 2,
  DeviceStateResponse_BluetoothDeviceState_DISCONNECTING = 3,
  DeviceStateResponse_BluetoothDeviceState_DeviceStateResponse_BluetoothDeviceState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DeviceStateResponse_BluetoothDeviceState_DeviceStateResponse_BluetoothDeviceState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DeviceStateResponse_BluetoothDeviceState_IsValid(int value);
const DeviceStateResponse_BluetoothDeviceState DeviceStateResponse_BluetoothDeviceState_BluetoothDeviceState_MIN = DeviceStateResponse_BluetoothDeviceState_DISCONNECTED;
const DeviceStateResponse_BluetoothDeviceState DeviceStateResponse_BluetoothDeviceState_BluetoothDeviceState_MAX = DeviceStateResponse_BluetoothDeviceState_DISCONNECTING;
const int DeviceStateResponse_BluetoothDeviceState_BluetoothDeviceState_ARRAYSIZE = DeviceStateResponse_BluetoothDeviceState_BluetoothDeviceState_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeviceStateResponse_BluetoothDeviceState_descriptor();
inline const ::std::string& DeviceStateResponse_BluetoothDeviceState_Name(DeviceStateResponse_BluetoothDeviceState value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeviceStateResponse_BluetoothDeviceState_descriptor(), value);
}
inline bool DeviceStateResponse_BluetoothDeviceState_Parse(
    const ::std::string& name, DeviceStateResponse_BluetoothDeviceState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeviceStateResponse_BluetoothDeviceState>(
    DeviceStateResponse_BluetoothDeviceState_descriptor(), name, value);
}
// ===================================================================

class Int32Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Int32Value) */ {
 public:
  Int32Value();
  virtual ~Int32Value();

  Int32Value(const Int32Value& from);

  inline Int32Value& operator=(const Int32Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Int32Value(Int32Value&& from) noexcept
    : Int32Value() {
    *this = ::std::move(from);
  }

  inline Int32Value& operator=(Int32Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Int32Value& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Int32Value* internal_default_instance() {
    return reinterpret_cast<const Int32Value*>(
               &_Int32Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Int32Value* other);
  friend void swap(Int32Value& a, Int32Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Int32Value* New() const final {
    return CreateMaybeMessage<Int32Value>(NULL);
  }

  Int32Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Int32Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Int32Value& from);
  void MergeFrom(const Int32Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Int32Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Int32Value)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BluetoothState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BluetoothState) */ {
 public:
  BluetoothState();
  virtual ~BluetoothState();

  BluetoothState(const BluetoothState& from);

  inline BluetoothState& operator=(const BluetoothState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BluetoothState(BluetoothState&& from) noexcept
    : BluetoothState() {
    *this = ::std::move(from);
  }

  inline BluetoothState& operator=(BluetoothState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BluetoothState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BluetoothState* internal_default_instance() {
    return reinterpret_cast<const BluetoothState*>(
               &_BluetoothState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BluetoothState* other);
  friend void swap(BluetoothState& a, BluetoothState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BluetoothState* New() const final {
    return CreateMaybeMessage<BluetoothState>(NULL);
  }

  BluetoothState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BluetoothState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BluetoothState& from);
  void MergeFrom(const BluetoothState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BluetoothState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BluetoothState_State State;
  static const State UNKNOWN =
    BluetoothState_State_UNKNOWN;
  static const State UNAVAILABLE =
    BluetoothState_State_UNAVAILABLE;
  static const State UNAUTHORIZED =
    BluetoothState_State_UNAUTHORIZED;
  static const State TURNING_ON =
    BluetoothState_State_TURNING_ON;
  static const State ON =
    BluetoothState_State_ON;
  static const State TURNING_OFF =
    BluetoothState_State_TURNING_OFF;
  static const State OFF =
    BluetoothState_State_OFF;
  static inline bool State_IsValid(int value) {
    return BluetoothState_State_IsValid(value);
  }
  static const State State_MIN =
    BluetoothState_State_State_MIN;
  static const State State_MAX =
    BluetoothState_State_State_MAX;
  static const int State_ARRAYSIZE =
    BluetoothState_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return BluetoothState_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return BluetoothState_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return BluetoothState_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .BluetoothState.State state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::BluetoothState_State state() const;
  void set_state(::BluetoothState_State value);

  // @@protoc_insertion_point(class_scope:BluetoothState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdvertisementData_ManufacturerDataEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<AdvertisementData_ManufacturerDataEntry_DoNotUse, 
    ::google::protobuf::int32, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<AdvertisementData_ManufacturerDataEntry_DoNotUse, 
    ::google::protobuf::int32, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  AdvertisementData_ManufacturerDataEntry_DoNotUse();
  AdvertisementData_ManufacturerDataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const AdvertisementData_ManufacturerDataEntry_DoNotUse& other);
  static const AdvertisementData_ManufacturerDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AdvertisementData_ManufacturerDataEntry_DoNotUse*>(&_AdvertisementData_ManufacturerDataEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class AdvertisementData_ServiceDataEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<AdvertisementData_ServiceDataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<AdvertisementData_ServiceDataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  AdvertisementData_ServiceDataEntry_DoNotUse();
  AdvertisementData_ServiceDataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const AdvertisementData_ServiceDataEntry_DoNotUse& other);
  static const AdvertisementData_ServiceDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AdvertisementData_ServiceDataEntry_DoNotUse*>(&_AdvertisementData_ServiceDataEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class AdvertisementData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AdvertisementData) */ {
 public:
  AdvertisementData();
  virtual ~AdvertisementData();

  AdvertisementData(const AdvertisementData& from);

  inline AdvertisementData& operator=(const AdvertisementData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdvertisementData(AdvertisementData&& from) noexcept
    : AdvertisementData() {
    *this = ::std::move(from);
  }

  inline AdvertisementData& operator=(AdvertisementData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AdvertisementData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdvertisementData* internal_default_instance() {
    return reinterpret_cast<const AdvertisementData*>(
               &_AdvertisementData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(AdvertisementData* other);
  friend void swap(AdvertisementData& a, AdvertisementData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdvertisementData* New() const final {
    return CreateMaybeMessage<AdvertisementData>(NULL);
  }

  AdvertisementData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdvertisementData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AdvertisementData& from);
  void MergeFrom(const AdvertisementData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdvertisementData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int32, bytes> manufacturer_data = 4;
  int manufacturer_data_size() const;
  void clear_manufacturer_data();
  static const int kManufacturerDataFieldNumber = 4;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >&
      manufacturer_data() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >*
      mutable_manufacturer_data();

  // map<string, bytes> service_data = 5;
  int service_data_size() const;
  void clear_service_data();
  static const int kServiceDataFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      service_data() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_service_data();

  // repeated string service_uuids = 6;
  int service_uuids_size() const;
  void clear_service_uuids();
  static const int kServiceUuidsFieldNumber = 6;
  const ::std::string& service_uuids(int index) const;
  ::std::string* mutable_service_uuids(int index);
  void set_service_uuids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_service_uuids(int index, ::std::string&& value);
  #endif
  void set_service_uuids(int index, const char* value);
  void set_service_uuids(int index, const char* value, size_t size);
  ::std::string* add_service_uuids();
  void add_service_uuids(const ::std::string& value);
  #if LANG_CXX11
  void add_service_uuids(::std::string&& value);
  #endif
  void add_service_uuids(const char* value);
  void add_service_uuids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& service_uuids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_service_uuids();

  // string local_name = 1;
  void clear_local_name();
  static const int kLocalNameFieldNumber = 1;
  const ::std::string& local_name() const;
  void set_local_name(const ::std::string& value);
  #if LANG_CXX11
  void set_local_name(::std::string&& value);
  #endif
  void set_local_name(const char* value);
  void set_local_name(const char* value, size_t size);
  ::std::string* mutable_local_name();
  ::std::string* release_local_name();
  void set_allocated_local_name(::std::string* local_name);

  // .Int32Value tx_power_level = 2;
  bool has_tx_power_level() const;
  void clear_tx_power_level();
  static const int kTxPowerLevelFieldNumber = 2;
  private:
  const ::Int32Value& _internal_tx_power_level() const;
  public:
  const ::Int32Value& tx_power_level() const;
  ::Int32Value* release_tx_power_level();
  ::Int32Value* mutable_tx_power_level();
  void set_allocated_tx_power_level(::Int32Value* tx_power_level);

  // bool connectable = 3;
  void clear_connectable();
  static const int kConnectableFieldNumber = 3;
  bool connectable() const;
  void set_connectable(bool value);

  // @@protoc_insertion_point(class_scope:AdvertisementData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      AdvertisementData_ManufacturerDataEntry_DoNotUse,
      ::google::protobuf::int32, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
      0 > manufacturer_data_;
  ::google::protobuf::internal::MapField<
      AdvertisementData_ServiceDataEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
      0 > service_data_;
  ::google::protobuf::RepeatedPtrField< ::std::string> service_uuids_;
  ::google::protobuf::internal::ArenaStringPtr local_name_;
  ::Int32Value* tx_power_level_;
  bool connectable_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScanSettings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ScanSettings) */ {
 public:
  ScanSettings();
  virtual ~ScanSettings();

  ScanSettings(const ScanSettings& from);

  inline ScanSettings& operator=(const ScanSettings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScanSettings(ScanSettings&& from) noexcept
    : ScanSettings() {
    *this = ::std::move(from);
  }

  inline ScanSettings& operator=(ScanSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScanSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScanSettings* internal_default_instance() {
    return reinterpret_cast<const ScanSettings*>(
               &_ScanSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ScanSettings* other);
  friend void swap(ScanSettings& a, ScanSettings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScanSettings* New() const final {
    return CreateMaybeMessage<ScanSettings>(NULL);
  }

  ScanSettings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScanSettings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScanSettings& from);
  void MergeFrom(const ScanSettings& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string service_uuids = 2;
  int service_uuids_size() const;
  void clear_service_uuids();
  static const int kServiceUuidsFieldNumber = 2;
  const ::std::string& service_uuids(int index) const;
  ::std::string* mutable_service_uuids(int index);
  void set_service_uuids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_service_uuids(int index, ::std::string&& value);
  #endif
  void set_service_uuids(int index, const char* value);
  void set_service_uuids(int index, const char* value, size_t size);
  ::std::string* add_service_uuids();
  void add_service_uuids(const ::std::string& value);
  #if LANG_CXX11
  void add_service_uuids(::std::string&& value);
  #endif
  void add_service_uuids(const char* value);
  void add_service_uuids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& service_uuids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_service_uuids();

  // int32 android_scan_mode = 1;
  void clear_android_scan_mode();
  static const int kAndroidScanModeFieldNumber = 1;
  ::google::protobuf::int32 android_scan_mode() const;
  void set_android_scan_mode(::google::protobuf::int32 value);

  // bool allow_duplicates = 3;
  void clear_allow_duplicates();
  static const int kAllowDuplicatesFieldNumber = 3;
  bool allow_duplicates() const;
  void set_allow_duplicates(bool value);

  // @@protoc_insertion_point(class_scope:ScanSettings)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> service_uuids_;
  ::google::protobuf::int32 android_scan_mode_;
  bool allow_duplicates_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScanResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ScanResult) */ {
 public:
  ScanResult();
  virtual ~ScanResult();

  ScanResult(const ScanResult& from);

  inline ScanResult& operator=(const ScanResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScanResult(ScanResult&& from) noexcept
    : ScanResult() {
    *this = ::std::move(from);
  }

  inline ScanResult& operator=(ScanResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScanResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScanResult* internal_default_instance() {
    return reinterpret_cast<const ScanResult*>(
               &_ScanResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ScanResult* other);
  friend void swap(ScanResult& a, ScanResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScanResult* New() const final {
    return CreateMaybeMessage<ScanResult>(NULL);
  }

  ScanResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScanResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScanResult& from);
  void MergeFrom(const ScanResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .BluetoothDevice device = 1;
  bool has_device() const;
  void clear_device();
  static const int kDeviceFieldNumber = 1;
  private:
  const ::BluetoothDevice& _internal_device() const;
  public:
  const ::BluetoothDevice& device() const;
  ::BluetoothDevice* release_device();
  ::BluetoothDevice* mutable_device();
  void set_allocated_device(::BluetoothDevice* device);

  // .AdvertisementData advertisement_data = 2;
  bool has_advertisement_data() const;
  void clear_advertisement_data();
  static const int kAdvertisementDataFieldNumber = 2;
  private:
  const ::AdvertisementData& _internal_advertisement_data() const;
  public:
  const ::AdvertisementData& advertisement_data() const;
  ::AdvertisementData* release_advertisement_data();
  ::AdvertisementData* mutable_advertisement_data();
  void set_allocated_advertisement_data(::AdvertisementData* advertisement_data);

  // int32 rssi = 3;
  void clear_rssi();
  static const int kRssiFieldNumber = 3;
  ::google::protobuf::int32 rssi() const;
  void set_rssi(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ScanResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::BluetoothDevice* device_;
  ::AdvertisementData* advertisement_data_;
  ::google::protobuf::int32 rssi_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConnectRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ConnectRequest) */ {
 public:
  ConnectRequest();
  virtual ~ConnectRequest();

  ConnectRequest(const ConnectRequest& from);

  inline ConnectRequest& operator=(const ConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectRequest(ConnectRequest&& from) noexcept
    : ConnectRequest() {
    *this = ::std::move(from);
  }

  inline ConnectRequest& operator=(ConnectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectRequest* internal_default_instance() {
    return reinterpret_cast<const ConnectRequest*>(
               &_ConnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ConnectRequest* other);
  friend void swap(ConnectRequest& a, ConnectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectRequest* New() const final {
    return CreateMaybeMessage<ConnectRequest>(NULL);
  }

  ConnectRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConnectRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConnectRequest& from);
  void MergeFrom(const ConnectRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string remote_id = 1;
  void clear_remote_id();
  static const int kRemoteIdFieldNumber = 1;
  const ::std::string& remote_id() const;
  void set_remote_id(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_id(::std::string&& value);
  #endif
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  ::std::string* mutable_remote_id();
  ::std::string* release_remote_id();
  void set_allocated_remote_id(::std::string* remote_id);

  // bool android_auto_connect = 2;
  void clear_android_auto_connect();
  static const int kAndroidAutoConnectFieldNumber = 2;
  bool android_auto_connect() const;
  void set_android_auto_connect(bool value);

  // @@protoc_insertion_point(class_scope:ConnectRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr remote_id_;
  bool android_auto_connect_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BluetoothDevice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BluetoothDevice) */ {
 public:
  BluetoothDevice();
  virtual ~BluetoothDevice();

  BluetoothDevice(const BluetoothDevice& from);

  inline BluetoothDevice& operator=(const BluetoothDevice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BluetoothDevice(BluetoothDevice&& from) noexcept
    : BluetoothDevice() {
    *this = ::std::move(from);
  }

  inline BluetoothDevice& operator=(BluetoothDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BluetoothDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BluetoothDevice* internal_default_instance() {
    return reinterpret_cast<const BluetoothDevice*>(
               &_BluetoothDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(BluetoothDevice* other);
  friend void swap(BluetoothDevice& a, BluetoothDevice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BluetoothDevice* New() const final {
    return CreateMaybeMessage<BluetoothDevice>(NULL);
  }

  BluetoothDevice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BluetoothDevice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BluetoothDevice& from);
  void MergeFrom(const BluetoothDevice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BluetoothDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BluetoothDevice_Type Type;
  static const Type UNKNOWN =
    BluetoothDevice_Type_UNKNOWN;
  static const Type CLASSIC =
    BluetoothDevice_Type_CLASSIC;
  static const Type LE =
    BluetoothDevice_Type_LE;
  static const Type DUAL =
    BluetoothDevice_Type_DUAL;
  static inline bool Type_IsValid(int value) {
    return BluetoothDevice_Type_IsValid(value);
  }
  static const Type Type_MIN =
    BluetoothDevice_Type_Type_MIN;
  static const Type Type_MAX =
    BluetoothDevice_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    BluetoothDevice_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return BluetoothDevice_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return BluetoothDevice_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return BluetoothDevice_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string remote_id = 1;
  void clear_remote_id();
  static const int kRemoteIdFieldNumber = 1;
  const ::std::string& remote_id() const;
  void set_remote_id(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_id(::std::string&& value);
  #endif
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  ::std::string* mutable_remote_id();
  ::std::string* release_remote_id();
  void set_allocated_remote_id(::std::string* remote_id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .BluetoothDevice.Type type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::BluetoothDevice_Type type() const;
  void set_type(::BluetoothDevice_Type value);

  // @@protoc_insertion_point(class_scope:BluetoothDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr remote_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BluetoothService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BluetoothService) */ {
 public:
  BluetoothService();
  virtual ~BluetoothService();

  BluetoothService(const BluetoothService& from);

  inline BluetoothService& operator=(const BluetoothService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BluetoothService(BluetoothService&& from) noexcept
    : BluetoothService() {
    *this = ::std::move(from);
  }

  inline BluetoothService& operator=(BluetoothService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BluetoothService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BluetoothService* internal_default_instance() {
    return reinterpret_cast<const BluetoothService*>(
               &_BluetoothService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(BluetoothService* other);
  friend void swap(BluetoothService& a, BluetoothService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BluetoothService* New() const final {
    return CreateMaybeMessage<BluetoothService>(NULL);
  }

  BluetoothService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BluetoothService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BluetoothService& from);
  void MergeFrom(const BluetoothService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BluetoothService* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BluetoothCharacteristic characteristics = 4;
  int characteristics_size() const;
  void clear_characteristics();
  static const int kCharacteristicsFieldNumber = 4;
  ::BluetoothCharacteristic* mutable_characteristics(int index);
  ::google::protobuf::RepeatedPtrField< ::BluetoothCharacteristic >*
      mutable_characteristics();
  const ::BluetoothCharacteristic& characteristics(int index) const;
  ::BluetoothCharacteristic* add_characteristics();
  const ::google::protobuf::RepeatedPtrField< ::BluetoothCharacteristic >&
      characteristics() const;

  // repeated .BluetoothService included_services = 5;
  int included_services_size() const;
  void clear_included_services();
  static const int kIncludedServicesFieldNumber = 5;
  ::BluetoothService* mutable_included_services(int index);
  ::google::protobuf::RepeatedPtrField< ::BluetoothService >*
      mutable_included_services();
  const ::BluetoothService& included_services(int index) const;
  ::BluetoothService* add_included_services();
  const ::google::protobuf::RepeatedPtrField< ::BluetoothService >&
      included_services() const;

  // string uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // string remote_id = 2;
  void clear_remote_id();
  static const int kRemoteIdFieldNumber = 2;
  const ::std::string& remote_id() const;
  void set_remote_id(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_id(::std::string&& value);
  #endif
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  ::std::string* mutable_remote_id();
  ::std::string* release_remote_id();
  void set_allocated_remote_id(::std::string* remote_id);

  // bool is_primary = 3;
  void clear_is_primary();
  static const int kIsPrimaryFieldNumber = 3;
  bool is_primary() const;
  void set_is_primary(bool value);

  // @@protoc_insertion_point(class_scope:BluetoothService)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::BluetoothCharacteristic > characteristics_;
  ::google::protobuf::RepeatedPtrField< ::BluetoothService > included_services_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr remote_id_;
  bool is_primary_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BluetoothCharacteristic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BluetoothCharacteristic) */ {
 public:
  BluetoothCharacteristic();
  virtual ~BluetoothCharacteristic();

  BluetoothCharacteristic(const BluetoothCharacteristic& from);

  inline BluetoothCharacteristic& operator=(const BluetoothCharacteristic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BluetoothCharacteristic(BluetoothCharacteristic&& from) noexcept
    : BluetoothCharacteristic() {
    *this = ::std::move(from);
  }

  inline BluetoothCharacteristic& operator=(BluetoothCharacteristic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BluetoothCharacteristic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BluetoothCharacteristic* internal_default_instance() {
    return reinterpret_cast<const BluetoothCharacteristic*>(
               &_BluetoothCharacteristic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(BluetoothCharacteristic* other);
  friend void swap(BluetoothCharacteristic& a, BluetoothCharacteristic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BluetoothCharacteristic* New() const final {
    return CreateMaybeMessage<BluetoothCharacteristic>(NULL);
  }

  BluetoothCharacteristic* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BluetoothCharacteristic>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BluetoothCharacteristic& from);
  void MergeFrom(const BluetoothCharacteristic& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BluetoothCharacteristic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BluetoothDescriptor descriptors = 5;
  int descriptors_size() const;
  void clear_descriptors();
  static const int kDescriptorsFieldNumber = 5;
  ::BluetoothDescriptor* mutable_descriptors(int index);
  ::google::protobuf::RepeatedPtrField< ::BluetoothDescriptor >*
      mutable_descriptors();
  const ::BluetoothDescriptor& descriptors(int index) const;
  ::BluetoothDescriptor* add_descriptors();
  const ::google::protobuf::RepeatedPtrField< ::BluetoothDescriptor >&
      descriptors() const;

  // string uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // string remote_id = 2;
  void clear_remote_id();
  static const int kRemoteIdFieldNumber = 2;
  const ::std::string& remote_id() const;
  void set_remote_id(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_id(::std::string&& value);
  #endif
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  ::std::string* mutable_remote_id();
  ::std::string* release_remote_id();
  void set_allocated_remote_id(::std::string* remote_id);

  // string serviceUuid = 3;
  void clear_serviceuuid();
  static const int kServiceUuidFieldNumber = 3;
  const ::std::string& serviceuuid() const;
  void set_serviceuuid(const ::std::string& value);
  #if LANG_CXX11
  void set_serviceuuid(::std::string&& value);
  #endif
  void set_serviceuuid(const char* value);
  void set_serviceuuid(const char* value, size_t size);
  ::std::string* mutable_serviceuuid();
  ::std::string* release_serviceuuid();
  void set_allocated_serviceuuid(::std::string* serviceuuid);

  // string secondaryServiceUuid = 4;
  void clear_secondaryserviceuuid();
  static const int kSecondaryServiceUuidFieldNumber = 4;
  const ::std::string& secondaryserviceuuid() const;
  void set_secondaryserviceuuid(const ::std::string& value);
  #if LANG_CXX11
  void set_secondaryserviceuuid(::std::string&& value);
  #endif
  void set_secondaryserviceuuid(const char* value);
  void set_secondaryserviceuuid(const char* value, size_t size);
  ::std::string* mutable_secondaryserviceuuid();
  ::std::string* release_secondaryserviceuuid();
  void set_allocated_secondaryserviceuuid(::std::string* secondaryserviceuuid);

  // bytes value = 7;
  void clear_value();
  static const int kValueFieldNumber = 7;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .CharacteristicProperties properties = 6;
  bool has_properties() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 6;
  private:
  const ::CharacteristicProperties& _internal_properties() const;
  public:
  const ::CharacteristicProperties& properties() const;
  ::CharacteristicProperties* release_properties();
  ::CharacteristicProperties* mutable_properties();
  void set_allocated_properties(::CharacteristicProperties* properties);

  // @@protoc_insertion_point(class_scope:BluetoothCharacteristic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::BluetoothDescriptor > descriptors_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr remote_id_;
  ::google::protobuf::internal::ArenaStringPtr serviceuuid_;
  ::google::protobuf::internal::ArenaStringPtr secondaryserviceuuid_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::CharacteristicProperties* properties_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BluetoothDescriptor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BluetoothDescriptor) */ {
 public:
  BluetoothDescriptor();
  virtual ~BluetoothDescriptor();

  BluetoothDescriptor(const BluetoothDescriptor& from);

  inline BluetoothDescriptor& operator=(const BluetoothDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BluetoothDescriptor(BluetoothDescriptor&& from) noexcept
    : BluetoothDescriptor() {
    *this = ::std::move(from);
  }

  inline BluetoothDescriptor& operator=(BluetoothDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BluetoothDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BluetoothDescriptor* internal_default_instance() {
    return reinterpret_cast<const BluetoothDescriptor*>(
               &_BluetoothDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(BluetoothDescriptor* other);
  friend void swap(BluetoothDescriptor& a, BluetoothDescriptor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BluetoothDescriptor* New() const final {
    return CreateMaybeMessage<BluetoothDescriptor>(NULL);
  }

  BluetoothDescriptor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BluetoothDescriptor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BluetoothDescriptor& from);
  void MergeFrom(const BluetoothDescriptor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BluetoothDescriptor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // string remote_id = 2;
  void clear_remote_id();
  static const int kRemoteIdFieldNumber = 2;
  const ::std::string& remote_id() const;
  void set_remote_id(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_id(::std::string&& value);
  #endif
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  ::std::string* mutable_remote_id();
  ::std::string* release_remote_id();
  void set_allocated_remote_id(::std::string* remote_id);

  // string serviceUuid = 3;
  void clear_serviceuuid();
  static const int kServiceUuidFieldNumber = 3;
  const ::std::string& serviceuuid() const;
  void set_serviceuuid(const ::std::string& value);
  #if LANG_CXX11
  void set_serviceuuid(::std::string&& value);
  #endif
  void set_serviceuuid(const char* value);
  void set_serviceuuid(const char* value, size_t size);
  ::std::string* mutable_serviceuuid();
  ::std::string* release_serviceuuid();
  void set_allocated_serviceuuid(::std::string* serviceuuid);

  // string characteristicUuid = 4;
  void clear_characteristicuuid();
  static const int kCharacteristicUuidFieldNumber = 4;
  const ::std::string& characteristicuuid() const;
  void set_characteristicuuid(const ::std::string& value);
  #if LANG_CXX11
  void set_characteristicuuid(::std::string&& value);
  #endif
  void set_characteristicuuid(const char* value);
  void set_characteristicuuid(const char* value, size_t size);
  ::std::string* mutable_characteristicuuid();
  ::std::string* release_characteristicuuid();
  void set_allocated_characteristicuuid(::std::string* characteristicuuid);

  // bytes value = 5;
  void clear_value();
  static const int kValueFieldNumber = 5;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:BluetoothDescriptor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr remote_id_;
  ::google::protobuf::internal::ArenaStringPtr serviceuuid_;
  ::google::protobuf::internal::ArenaStringPtr characteristicuuid_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CharacteristicProperties : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CharacteristicProperties) */ {
 public:
  CharacteristicProperties();
  virtual ~CharacteristicProperties();

  CharacteristicProperties(const CharacteristicProperties& from);

  inline CharacteristicProperties& operator=(const CharacteristicProperties& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CharacteristicProperties(CharacteristicProperties&& from) noexcept
    : CharacteristicProperties() {
    *this = ::std::move(from);
  }

  inline CharacteristicProperties& operator=(CharacteristicProperties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacteristicProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CharacteristicProperties* internal_default_instance() {
    return reinterpret_cast<const CharacteristicProperties*>(
               &_CharacteristicProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CharacteristicProperties* other);
  friend void swap(CharacteristicProperties& a, CharacteristicProperties& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CharacteristicProperties* New() const final {
    return CreateMaybeMessage<CharacteristicProperties>(NULL);
  }

  CharacteristicProperties* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CharacteristicProperties>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CharacteristicProperties& from);
  void MergeFrom(const CharacteristicProperties& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacteristicProperties* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool broadcast = 1;
  void clear_broadcast();
  static const int kBroadcastFieldNumber = 1;
  bool broadcast() const;
  void set_broadcast(bool value);

  // bool read = 2;
  void clear_read();
  static const int kReadFieldNumber = 2;
  bool read() const;
  void set_read(bool value);

  // bool write_without_response = 3;
  void clear_write_without_response();
  static const int kWriteWithoutResponseFieldNumber = 3;
  bool write_without_response() const;
  void set_write_without_response(bool value);

  // bool write = 4;
  void clear_write();
  static const int kWriteFieldNumber = 4;
  bool write() const;
  void set_write(bool value);

  // bool notify = 5;
  void clear_notify();
  static const int kNotifyFieldNumber = 5;
  bool notify() const;
  void set_notify(bool value);

  // bool indicate = 6;
  void clear_indicate();
  static const int kIndicateFieldNumber = 6;
  bool indicate() const;
  void set_indicate(bool value);

  // bool authenticated_signed_writes = 7;
  void clear_authenticated_signed_writes();
  static const int kAuthenticatedSignedWritesFieldNumber = 7;
  bool authenticated_signed_writes() const;
  void set_authenticated_signed_writes(bool value);

  // bool extended_properties = 8;
  void clear_extended_properties();
  static const int kExtendedPropertiesFieldNumber = 8;
  bool extended_properties() const;
  void set_extended_properties(bool value);

  // bool notify_encryption_required = 9;
  void clear_notify_encryption_required();
  static const int kNotifyEncryptionRequiredFieldNumber = 9;
  bool notify_encryption_required() const;
  void set_notify_encryption_required(bool value);

  // bool indicate_encryption_required = 10;
  void clear_indicate_encryption_required();
  static const int kIndicateEncryptionRequiredFieldNumber = 10;
  bool indicate_encryption_required() const;
  void set_indicate_encryption_required(bool value);

  // @@protoc_insertion_point(class_scope:CharacteristicProperties)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool broadcast_;
  bool read_;
  bool write_without_response_;
  bool write_;
  bool notify_;
  bool indicate_;
  bool authenticated_signed_writes_;
  bool extended_properties_;
  bool notify_encryption_required_;
  bool indicate_encryption_required_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DiscoverServicesResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DiscoverServicesResult) */ {
 public:
  DiscoverServicesResult();
  virtual ~DiscoverServicesResult();

  DiscoverServicesResult(const DiscoverServicesResult& from);

  inline DiscoverServicesResult& operator=(const DiscoverServicesResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiscoverServicesResult(DiscoverServicesResult&& from) noexcept
    : DiscoverServicesResult() {
    *this = ::std::move(from);
  }

  inline DiscoverServicesResult& operator=(DiscoverServicesResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiscoverServicesResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiscoverServicesResult* internal_default_instance() {
    return reinterpret_cast<const DiscoverServicesResult*>(
               &_DiscoverServicesResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(DiscoverServicesResult* other);
  friend void swap(DiscoverServicesResult& a, DiscoverServicesResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiscoverServicesResult* New() const final {
    return CreateMaybeMessage<DiscoverServicesResult>(NULL);
  }

  DiscoverServicesResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DiscoverServicesResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DiscoverServicesResult& from);
  void MergeFrom(const DiscoverServicesResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoverServicesResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BluetoothService services = 2;
  int services_size() const;
  void clear_services();
  static const int kServicesFieldNumber = 2;
  ::BluetoothService* mutable_services(int index);
  ::google::protobuf::RepeatedPtrField< ::BluetoothService >*
      mutable_services();
  const ::BluetoothService& services(int index) const;
  ::BluetoothService* add_services();
  const ::google::protobuf::RepeatedPtrField< ::BluetoothService >&
      services() const;

  // string remote_id = 1;
  void clear_remote_id();
  static const int kRemoteIdFieldNumber = 1;
  const ::std::string& remote_id() const;
  void set_remote_id(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_id(::std::string&& value);
  #endif
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  ::std::string* mutable_remote_id();
  ::std::string* release_remote_id();
  void set_allocated_remote_id(::std::string* remote_id);

  // @@protoc_insertion_point(class_scope:DiscoverServicesResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::BluetoothService > services_;
  ::google::protobuf::internal::ArenaStringPtr remote_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadCharacteristicRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReadCharacteristicRequest) */ {
 public:
  ReadCharacteristicRequest();
  virtual ~ReadCharacteristicRequest();

  ReadCharacteristicRequest(const ReadCharacteristicRequest& from);

  inline ReadCharacteristicRequest& operator=(const ReadCharacteristicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadCharacteristicRequest(ReadCharacteristicRequest&& from) noexcept
    : ReadCharacteristicRequest() {
    *this = ::std::move(from);
  }

  inline ReadCharacteristicRequest& operator=(ReadCharacteristicRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadCharacteristicRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadCharacteristicRequest* internal_default_instance() {
    return reinterpret_cast<const ReadCharacteristicRequest*>(
               &_ReadCharacteristicRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ReadCharacteristicRequest* other);
  friend void swap(ReadCharacteristicRequest& a, ReadCharacteristicRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadCharacteristicRequest* New() const final {
    return CreateMaybeMessage<ReadCharacteristicRequest>(NULL);
  }

  ReadCharacteristicRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadCharacteristicRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadCharacteristicRequest& from);
  void MergeFrom(const ReadCharacteristicRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadCharacteristicRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string remote_id = 1;
  void clear_remote_id();
  static const int kRemoteIdFieldNumber = 1;
  const ::std::string& remote_id() const;
  void set_remote_id(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_id(::std::string&& value);
  #endif
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  ::std::string* mutable_remote_id();
  ::std::string* release_remote_id();
  void set_allocated_remote_id(::std::string* remote_id);

  // string characteristic_uuid = 2;
  void clear_characteristic_uuid();
  static const int kCharacteristicUuidFieldNumber = 2;
  const ::std::string& characteristic_uuid() const;
  void set_characteristic_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_characteristic_uuid(::std::string&& value);
  #endif
  void set_characteristic_uuid(const char* value);
  void set_characteristic_uuid(const char* value, size_t size);
  ::std::string* mutable_characteristic_uuid();
  ::std::string* release_characteristic_uuid();
  void set_allocated_characteristic_uuid(::std::string* characteristic_uuid);

  // string service_uuid = 3;
  void clear_service_uuid();
  static const int kServiceUuidFieldNumber = 3;
  const ::std::string& service_uuid() const;
  void set_service_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_service_uuid(::std::string&& value);
  #endif
  void set_service_uuid(const char* value);
  void set_service_uuid(const char* value, size_t size);
  ::std::string* mutable_service_uuid();
  ::std::string* release_service_uuid();
  void set_allocated_service_uuid(::std::string* service_uuid);

  // string secondary_service_uuid = 4;
  void clear_secondary_service_uuid();
  static const int kSecondaryServiceUuidFieldNumber = 4;
  const ::std::string& secondary_service_uuid() const;
  void set_secondary_service_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_secondary_service_uuid(::std::string&& value);
  #endif
  void set_secondary_service_uuid(const char* value);
  void set_secondary_service_uuid(const char* value, size_t size);
  ::std::string* mutable_secondary_service_uuid();
  ::std::string* release_secondary_service_uuid();
  void set_allocated_secondary_service_uuid(::std::string* secondary_service_uuid);

  // @@protoc_insertion_point(class_scope:ReadCharacteristicRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr remote_id_;
  ::google::protobuf::internal::ArenaStringPtr characteristic_uuid_;
  ::google::protobuf::internal::ArenaStringPtr service_uuid_;
  ::google::protobuf::internal::ArenaStringPtr secondary_service_uuid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadCharacteristicResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReadCharacteristicResponse) */ {
 public:
  ReadCharacteristicResponse();
  virtual ~ReadCharacteristicResponse();

  ReadCharacteristicResponse(const ReadCharacteristicResponse& from);

  inline ReadCharacteristicResponse& operator=(const ReadCharacteristicResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadCharacteristicResponse(ReadCharacteristicResponse&& from) noexcept
    : ReadCharacteristicResponse() {
    *this = ::std::move(from);
  }

  inline ReadCharacteristicResponse& operator=(ReadCharacteristicResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadCharacteristicResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadCharacteristicResponse* internal_default_instance() {
    return reinterpret_cast<const ReadCharacteristicResponse*>(
               &_ReadCharacteristicResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(ReadCharacteristicResponse* other);
  friend void swap(ReadCharacteristicResponse& a, ReadCharacteristicResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadCharacteristicResponse* New() const final {
    return CreateMaybeMessage<ReadCharacteristicResponse>(NULL);
  }

  ReadCharacteristicResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadCharacteristicResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadCharacteristicResponse& from);
  void MergeFrom(const ReadCharacteristicResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadCharacteristicResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string remote_id = 1;
  void clear_remote_id();
  static const int kRemoteIdFieldNumber = 1;
  const ::std::string& remote_id() const;
  void set_remote_id(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_id(::std::string&& value);
  #endif
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  ::std::string* mutable_remote_id();
  ::std::string* release_remote_id();
  void set_allocated_remote_id(::std::string* remote_id);

  // .BluetoothCharacteristic characteristic = 2;
  bool has_characteristic() const;
  void clear_characteristic();
  static const int kCharacteristicFieldNumber = 2;
  private:
  const ::BluetoothCharacteristic& _internal_characteristic() const;
  public:
  const ::BluetoothCharacteristic& characteristic() const;
  ::BluetoothCharacteristic* release_characteristic();
  ::BluetoothCharacteristic* mutable_characteristic();
  void set_allocated_characteristic(::BluetoothCharacteristic* characteristic);

  // @@protoc_insertion_point(class_scope:ReadCharacteristicResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr remote_id_;
  ::BluetoothCharacteristic* characteristic_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadDescriptorRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReadDescriptorRequest) */ {
 public:
  ReadDescriptorRequest();
  virtual ~ReadDescriptorRequest();

  ReadDescriptorRequest(const ReadDescriptorRequest& from);

  inline ReadDescriptorRequest& operator=(const ReadDescriptorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadDescriptorRequest(ReadDescriptorRequest&& from) noexcept
    : ReadDescriptorRequest() {
    *this = ::std::move(from);
  }

  inline ReadDescriptorRequest& operator=(ReadDescriptorRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadDescriptorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadDescriptorRequest* internal_default_instance() {
    return reinterpret_cast<const ReadDescriptorRequest*>(
               &_ReadDescriptorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ReadDescriptorRequest* other);
  friend void swap(ReadDescriptorRequest& a, ReadDescriptorRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadDescriptorRequest* New() const final {
    return CreateMaybeMessage<ReadDescriptorRequest>(NULL);
  }

  ReadDescriptorRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadDescriptorRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadDescriptorRequest& from);
  void MergeFrom(const ReadDescriptorRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadDescriptorRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string remote_id = 1;
  void clear_remote_id();
  static const int kRemoteIdFieldNumber = 1;
  const ::std::string& remote_id() const;
  void set_remote_id(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_id(::std::string&& value);
  #endif
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  ::std::string* mutable_remote_id();
  ::std::string* release_remote_id();
  void set_allocated_remote_id(::std::string* remote_id);

  // string descriptor_uuid = 2;
  void clear_descriptor_uuid();
  static const int kDescriptorUuidFieldNumber = 2;
  const ::std::string& descriptor_uuid() const;
  void set_descriptor_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_descriptor_uuid(::std::string&& value);
  #endif
  void set_descriptor_uuid(const char* value);
  void set_descriptor_uuid(const char* value, size_t size);
  ::std::string* mutable_descriptor_uuid();
  ::std::string* release_descriptor_uuid();
  void set_allocated_descriptor_uuid(::std::string* descriptor_uuid);

  // string service_uuid = 3;
  void clear_service_uuid();
  static const int kServiceUuidFieldNumber = 3;
  const ::std::string& service_uuid() const;
  void set_service_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_service_uuid(::std::string&& value);
  #endif
  void set_service_uuid(const char* value);
  void set_service_uuid(const char* value, size_t size);
  ::std::string* mutable_service_uuid();
  ::std::string* release_service_uuid();
  void set_allocated_service_uuid(::std::string* service_uuid);

  // string secondary_service_uuid = 4;
  void clear_secondary_service_uuid();
  static const int kSecondaryServiceUuidFieldNumber = 4;
  const ::std::string& secondary_service_uuid() const;
  void set_secondary_service_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_secondary_service_uuid(::std::string&& value);
  #endif
  void set_secondary_service_uuid(const char* value);
  void set_secondary_service_uuid(const char* value, size_t size);
  ::std::string* mutable_secondary_service_uuid();
  ::std::string* release_secondary_service_uuid();
  void set_allocated_secondary_service_uuid(::std::string* secondary_service_uuid);

  // string characteristic_uuid = 5;
  void clear_characteristic_uuid();
  static const int kCharacteristicUuidFieldNumber = 5;
  const ::std::string& characteristic_uuid() const;
  void set_characteristic_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_characteristic_uuid(::std::string&& value);
  #endif
  void set_characteristic_uuid(const char* value);
  void set_characteristic_uuid(const char* value, size_t size);
  ::std::string* mutable_characteristic_uuid();
  ::std::string* release_characteristic_uuid();
  void set_allocated_characteristic_uuid(::std::string* characteristic_uuid);

  // @@protoc_insertion_point(class_scope:ReadDescriptorRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr remote_id_;
  ::google::protobuf::internal::ArenaStringPtr descriptor_uuid_;
  ::google::protobuf::internal::ArenaStringPtr service_uuid_;
  ::google::protobuf::internal::ArenaStringPtr secondary_service_uuid_;
  ::google::protobuf::internal::ArenaStringPtr characteristic_uuid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadDescriptorResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReadDescriptorResponse) */ {
 public:
  ReadDescriptorResponse();
  virtual ~ReadDescriptorResponse();

  ReadDescriptorResponse(const ReadDescriptorResponse& from);

  inline ReadDescriptorResponse& operator=(const ReadDescriptorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadDescriptorResponse(ReadDescriptorResponse&& from) noexcept
    : ReadDescriptorResponse() {
    *this = ::std::move(from);
  }

  inline ReadDescriptorResponse& operator=(ReadDescriptorResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadDescriptorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadDescriptorResponse* internal_default_instance() {
    return reinterpret_cast<const ReadDescriptorResponse*>(
               &_ReadDescriptorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(ReadDescriptorResponse* other);
  friend void swap(ReadDescriptorResponse& a, ReadDescriptorResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadDescriptorResponse* New() const final {
    return CreateMaybeMessage<ReadDescriptorResponse>(NULL);
  }

  ReadDescriptorResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadDescriptorResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadDescriptorResponse& from);
  void MergeFrom(const ReadDescriptorResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadDescriptorResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .ReadDescriptorRequest request = 1;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  private:
  const ::ReadDescriptorRequest& _internal_request() const;
  public:
  const ::ReadDescriptorRequest& request() const;
  ::ReadDescriptorRequest* release_request();
  ::ReadDescriptorRequest* mutable_request();
  void set_allocated_request(::ReadDescriptorRequest* request);

  // @@protoc_insertion_point(class_scope:ReadDescriptorResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::ReadDescriptorRequest* request_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WriteCharacteristicRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WriteCharacteristicRequest) */ {
 public:
  WriteCharacteristicRequest();
  virtual ~WriteCharacteristicRequest();

  WriteCharacteristicRequest(const WriteCharacteristicRequest& from);

  inline WriteCharacteristicRequest& operator=(const WriteCharacteristicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteCharacteristicRequest(WriteCharacteristicRequest&& from) noexcept
    : WriteCharacteristicRequest() {
    *this = ::std::move(from);
  }

  inline WriteCharacteristicRequest& operator=(WriteCharacteristicRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteCharacteristicRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteCharacteristicRequest* internal_default_instance() {
    return reinterpret_cast<const WriteCharacteristicRequest*>(
               &_WriteCharacteristicRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(WriteCharacteristicRequest* other);
  friend void swap(WriteCharacteristicRequest& a, WriteCharacteristicRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteCharacteristicRequest* New() const final {
    return CreateMaybeMessage<WriteCharacteristicRequest>(NULL);
  }

  WriteCharacteristicRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WriteCharacteristicRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WriteCharacteristicRequest& from);
  void MergeFrom(const WriteCharacteristicRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteCharacteristicRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WriteCharacteristicRequest_WriteType WriteType;
  static const WriteType WITH_RESPONSE =
    WriteCharacteristicRequest_WriteType_WITH_RESPONSE;
  static const WriteType WITHOUT_RESPONSE =
    WriteCharacteristicRequest_WriteType_WITHOUT_RESPONSE;
  static inline bool WriteType_IsValid(int value) {
    return WriteCharacteristicRequest_WriteType_IsValid(value);
  }
  static const WriteType WriteType_MIN =
    WriteCharacteristicRequest_WriteType_WriteType_MIN;
  static const WriteType WriteType_MAX =
    WriteCharacteristicRequest_WriteType_WriteType_MAX;
  static const int WriteType_ARRAYSIZE =
    WriteCharacteristicRequest_WriteType_WriteType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WriteType_descriptor() {
    return WriteCharacteristicRequest_WriteType_descriptor();
  }
  static inline const ::std::string& WriteType_Name(WriteType value) {
    return WriteCharacteristicRequest_WriteType_Name(value);
  }
  static inline bool WriteType_Parse(const ::std::string& name,
      WriteType* value) {
    return WriteCharacteristicRequest_WriteType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string remote_id = 1;
  void clear_remote_id();
  static const int kRemoteIdFieldNumber = 1;
  const ::std::string& remote_id() const;
  void set_remote_id(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_id(::std::string&& value);
  #endif
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  ::std::string* mutable_remote_id();
  ::std::string* release_remote_id();
  void set_allocated_remote_id(::std::string* remote_id);

  // string characteristic_uuid = 2;
  void clear_characteristic_uuid();
  static const int kCharacteristicUuidFieldNumber = 2;
  const ::std::string& characteristic_uuid() const;
  void set_characteristic_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_characteristic_uuid(::std::string&& value);
  #endif
  void set_characteristic_uuid(const char* value);
  void set_characteristic_uuid(const char* value, size_t size);
  ::std::string* mutable_characteristic_uuid();
  ::std::string* release_characteristic_uuid();
  void set_allocated_characteristic_uuid(::std::string* characteristic_uuid);

  // string service_uuid = 3;
  void clear_service_uuid();
  static const int kServiceUuidFieldNumber = 3;
  const ::std::string& service_uuid() const;
  void set_service_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_service_uuid(::std::string&& value);
  #endif
  void set_service_uuid(const char* value);
  void set_service_uuid(const char* value, size_t size);
  ::std::string* mutable_service_uuid();
  ::std::string* release_service_uuid();
  void set_allocated_service_uuid(::std::string* service_uuid);

  // string secondary_service_uuid = 4;
  void clear_secondary_service_uuid();
  static const int kSecondaryServiceUuidFieldNumber = 4;
  const ::std::string& secondary_service_uuid() const;
  void set_secondary_service_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_secondary_service_uuid(::std::string&& value);
  #endif
  void set_secondary_service_uuid(const char* value);
  void set_secondary_service_uuid(const char* value, size_t size);
  ::std::string* mutable_secondary_service_uuid();
  ::std::string* release_secondary_service_uuid();
  void set_allocated_secondary_service_uuid(::std::string* secondary_service_uuid);

  // bytes value = 6;
  void clear_value();
  static const int kValueFieldNumber = 6;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .WriteCharacteristicRequest.WriteType write_type = 5;
  void clear_write_type();
  static const int kWriteTypeFieldNumber = 5;
  ::WriteCharacteristicRequest_WriteType write_type() const;
  void set_write_type(::WriteCharacteristicRequest_WriteType value);

  // @@protoc_insertion_point(class_scope:WriteCharacteristicRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr remote_id_;
  ::google::protobuf::internal::ArenaStringPtr characteristic_uuid_;
  ::google::protobuf::internal::ArenaStringPtr service_uuid_;
  ::google::protobuf::internal::ArenaStringPtr secondary_service_uuid_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  int write_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WriteCharacteristicResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WriteCharacteristicResponse) */ {
 public:
  WriteCharacteristicResponse();
  virtual ~WriteCharacteristicResponse();

  WriteCharacteristicResponse(const WriteCharacteristicResponse& from);

  inline WriteCharacteristicResponse& operator=(const WriteCharacteristicResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteCharacteristicResponse(WriteCharacteristicResponse&& from) noexcept
    : WriteCharacteristicResponse() {
    *this = ::std::move(from);
  }

  inline WriteCharacteristicResponse& operator=(WriteCharacteristicResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteCharacteristicResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteCharacteristicResponse* internal_default_instance() {
    return reinterpret_cast<const WriteCharacteristicResponse*>(
               &_WriteCharacteristicResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(WriteCharacteristicResponse* other);
  friend void swap(WriteCharacteristicResponse& a, WriteCharacteristicResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteCharacteristicResponse* New() const final {
    return CreateMaybeMessage<WriteCharacteristicResponse>(NULL);
  }

  WriteCharacteristicResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WriteCharacteristicResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WriteCharacteristicResponse& from);
  void MergeFrom(const WriteCharacteristicResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteCharacteristicResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .WriteCharacteristicRequest request = 1;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  private:
  const ::WriteCharacteristicRequest& _internal_request() const;
  public:
  const ::WriteCharacteristicRequest& request() const;
  ::WriteCharacteristicRequest* release_request();
  ::WriteCharacteristicRequest* mutable_request();
  void set_allocated_request(::WriteCharacteristicRequest* request);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:WriteCharacteristicResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::WriteCharacteristicRequest* request_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WriteDescriptorRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WriteDescriptorRequest) */ {
 public:
  WriteDescriptorRequest();
  virtual ~WriteDescriptorRequest();

  WriteDescriptorRequest(const WriteDescriptorRequest& from);

  inline WriteDescriptorRequest& operator=(const WriteDescriptorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteDescriptorRequest(WriteDescriptorRequest&& from) noexcept
    : WriteDescriptorRequest() {
    *this = ::std::move(from);
  }

  inline WriteDescriptorRequest& operator=(WriteDescriptorRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteDescriptorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteDescriptorRequest* internal_default_instance() {
    return reinterpret_cast<const WriteDescriptorRequest*>(
               &_WriteDescriptorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(WriteDescriptorRequest* other);
  friend void swap(WriteDescriptorRequest& a, WriteDescriptorRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteDescriptorRequest* New() const final {
    return CreateMaybeMessage<WriteDescriptorRequest>(NULL);
  }

  WriteDescriptorRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WriteDescriptorRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WriteDescriptorRequest& from);
  void MergeFrom(const WriteDescriptorRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteDescriptorRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string remote_id = 1;
  void clear_remote_id();
  static const int kRemoteIdFieldNumber = 1;
  const ::std::string& remote_id() const;
  void set_remote_id(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_id(::std::string&& value);
  #endif
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  ::std::string* mutable_remote_id();
  ::std::string* release_remote_id();
  void set_allocated_remote_id(::std::string* remote_id);

  // string descriptor_uuid = 2;
  void clear_descriptor_uuid();
  static const int kDescriptorUuidFieldNumber = 2;
  const ::std::string& descriptor_uuid() const;
  void set_descriptor_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_descriptor_uuid(::std::string&& value);
  #endif
  void set_descriptor_uuid(const char* value);
  void set_descriptor_uuid(const char* value, size_t size);
  ::std::string* mutable_descriptor_uuid();
  ::std::string* release_descriptor_uuid();
  void set_allocated_descriptor_uuid(::std::string* descriptor_uuid);

  // string service_uuid = 3;
  void clear_service_uuid();
  static const int kServiceUuidFieldNumber = 3;
  const ::std::string& service_uuid() const;
  void set_service_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_service_uuid(::std::string&& value);
  #endif
  void set_service_uuid(const char* value);
  void set_service_uuid(const char* value, size_t size);
  ::std::string* mutable_service_uuid();
  ::std::string* release_service_uuid();
  void set_allocated_service_uuid(::std::string* service_uuid);

  // string secondary_service_uuid = 4;
  void clear_secondary_service_uuid();
  static const int kSecondaryServiceUuidFieldNumber = 4;
  const ::std::string& secondary_service_uuid() const;
  void set_secondary_service_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_secondary_service_uuid(::std::string&& value);
  #endif
  void set_secondary_service_uuid(const char* value);
  void set_secondary_service_uuid(const char* value, size_t size);
  ::std::string* mutable_secondary_service_uuid();
  ::std::string* release_secondary_service_uuid();
  void set_allocated_secondary_service_uuid(::std::string* secondary_service_uuid);

  // string characteristic_uuid = 5;
  void clear_characteristic_uuid();
  static const int kCharacteristicUuidFieldNumber = 5;
  const ::std::string& characteristic_uuid() const;
  void set_characteristic_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_characteristic_uuid(::std::string&& value);
  #endif
  void set_characteristic_uuid(const char* value);
  void set_characteristic_uuid(const char* value, size_t size);
  ::std::string* mutable_characteristic_uuid();
  ::std::string* release_characteristic_uuid();
  void set_allocated_characteristic_uuid(::std::string* characteristic_uuid);

  // bytes value = 6;
  void clear_value();
  static const int kValueFieldNumber = 6;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:WriteDescriptorRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr remote_id_;
  ::google::protobuf::internal::ArenaStringPtr descriptor_uuid_;
  ::google::protobuf::internal::ArenaStringPtr service_uuid_;
  ::google::protobuf::internal::ArenaStringPtr secondary_service_uuid_;
  ::google::protobuf::internal::ArenaStringPtr characteristic_uuid_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WriteDescriptorResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WriteDescriptorResponse) */ {
 public:
  WriteDescriptorResponse();
  virtual ~WriteDescriptorResponse();

  WriteDescriptorResponse(const WriteDescriptorResponse& from);

  inline WriteDescriptorResponse& operator=(const WriteDescriptorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteDescriptorResponse(WriteDescriptorResponse&& from) noexcept
    : WriteDescriptorResponse() {
    *this = ::std::move(from);
  }

  inline WriteDescriptorResponse& operator=(WriteDescriptorResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteDescriptorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteDescriptorResponse* internal_default_instance() {
    return reinterpret_cast<const WriteDescriptorResponse*>(
               &_WriteDescriptorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(WriteDescriptorResponse* other);
  friend void swap(WriteDescriptorResponse& a, WriteDescriptorResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteDescriptorResponse* New() const final {
    return CreateMaybeMessage<WriteDescriptorResponse>(NULL);
  }

  WriteDescriptorResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WriteDescriptorResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WriteDescriptorResponse& from);
  void MergeFrom(const WriteDescriptorResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteDescriptorResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .WriteDescriptorRequest request = 1;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  private:
  const ::WriteDescriptorRequest& _internal_request() const;
  public:
  const ::WriteDescriptorRequest& request() const;
  ::WriteDescriptorRequest* release_request();
  ::WriteDescriptorRequest* mutable_request();
  void set_allocated_request(::WriteDescriptorRequest* request);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:WriteDescriptorResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::WriteDescriptorRequest* request_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetNotificationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SetNotificationRequest) */ {
 public:
  SetNotificationRequest();
  virtual ~SetNotificationRequest();

  SetNotificationRequest(const SetNotificationRequest& from);

  inline SetNotificationRequest& operator=(const SetNotificationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetNotificationRequest(SetNotificationRequest&& from) noexcept
    : SetNotificationRequest() {
    *this = ::std::move(from);
  }

  inline SetNotificationRequest& operator=(SetNotificationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetNotificationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetNotificationRequest* internal_default_instance() {
    return reinterpret_cast<const SetNotificationRequest*>(
               &_SetNotificationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(SetNotificationRequest* other);
  friend void swap(SetNotificationRequest& a, SetNotificationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetNotificationRequest* New() const final {
    return CreateMaybeMessage<SetNotificationRequest>(NULL);
  }

  SetNotificationRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetNotificationRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetNotificationRequest& from);
  void MergeFrom(const SetNotificationRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetNotificationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string remote_id = 1;
  void clear_remote_id();
  static const int kRemoteIdFieldNumber = 1;
  const ::std::string& remote_id() const;
  void set_remote_id(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_id(::std::string&& value);
  #endif
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  ::std::string* mutable_remote_id();
  ::std::string* release_remote_id();
  void set_allocated_remote_id(::std::string* remote_id);

  // string service_uuid = 2;
  void clear_service_uuid();
  static const int kServiceUuidFieldNumber = 2;
  const ::std::string& service_uuid() const;
  void set_service_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_service_uuid(::std::string&& value);
  #endif
  void set_service_uuid(const char* value);
  void set_service_uuid(const char* value, size_t size);
  ::std::string* mutable_service_uuid();
  ::std::string* release_service_uuid();
  void set_allocated_service_uuid(::std::string* service_uuid);

  // string secondary_service_uuid = 3;
  void clear_secondary_service_uuid();
  static const int kSecondaryServiceUuidFieldNumber = 3;
  const ::std::string& secondary_service_uuid() const;
  void set_secondary_service_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_secondary_service_uuid(::std::string&& value);
  #endif
  void set_secondary_service_uuid(const char* value);
  void set_secondary_service_uuid(const char* value, size_t size);
  ::std::string* mutable_secondary_service_uuid();
  ::std::string* release_secondary_service_uuid();
  void set_allocated_secondary_service_uuid(::std::string* secondary_service_uuid);

  // string characteristic_uuid = 4;
  void clear_characteristic_uuid();
  static const int kCharacteristicUuidFieldNumber = 4;
  const ::std::string& characteristic_uuid() const;
  void set_characteristic_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_characteristic_uuid(::std::string&& value);
  #endif
  void set_characteristic_uuid(const char* value);
  void set_characteristic_uuid(const char* value, size_t size);
  ::std::string* mutable_characteristic_uuid();
  ::std::string* release_characteristic_uuid();
  void set_allocated_characteristic_uuid(::std::string* characteristic_uuid);

  // bool enable = 5;
  void clear_enable();
  static const int kEnableFieldNumber = 5;
  bool enable() const;
  void set_enable(bool value);

  // @@protoc_insertion_point(class_scope:SetNotificationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr remote_id_;
  ::google::protobuf::internal::ArenaStringPtr service_uuid_;
  ::google::protobuf::internal::ArenaStringPtr secondary_service_uuid_;
  ::google::protobuf::internal::ArenaStringPtr characteristic_uuid_;
  bool enable_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetNotificationResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SetNotificationResponse) */ {
 public:
  SetNotificationResponse();
  virtual ~SetNotificationResponse();

  SetNotificationResponse(const SetNotificationResponse& from);

  inline SetNotificationResponse& operator=(const SetNotificationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetNotificationResponse(SetNotificationResponse&& from) noexcept
    : SetNotificationResponse() {
    *this = ::std::move(from);
  }

  inline SetNotificationResponse& operator=(SetNotificationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetNotificationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetNotificationResponse* internal_default_instance() {
    return reinterpret_cast<const SetNotificationResponse*>(
               &_SetNotificationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(SetNotificationResponse* other);
  friend void swap(SetNotificationResponse& a, SetNotificationResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetNotificationResponse* New() const final {
    return CreateMaybeMessage<SetNotificationResponse>(NULL);
  }

  SetNotificationResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetNotificationResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetNotificationResponse& from);
  void MergeFrom(const SetNotificationResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetNotificationResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string remote_id = 1;
  void clear_remote_id();
  static const int kRemoteIdFieldNumber = 1;
  const ::std::string& remote_id() const;
  void set_remote_id(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_id(::std::string&& value);
  #endif
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  ::std::string* mutable_remote_id();
  ::std::string* release_remote_id();
  void set_allocated_remote_id(::std::string* remote_id);

  // .BluetoothCharacteristic characteristic = 2;
  bool has_characteristic() const;
  void clear_characteristic();
  static const int kCharacteristicFieldNumber = 2;
  private:
  const ::BluetoothCharacteristic& _internal_characteristic() const;
  public:
  const ::BluetoothCharacteristic& characteristic() const;
  ::BluetoothCharacteristic* release_characteristic();
  ::BluetoothCharacteristic* mutable_characteristic();
  void set_allocated_characteristic(::BluetoothCharacteristic* characteristic);

  // bool success = 3;
  void clear_success();
  static const int kSuccessFieldNumber = 3;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:SetNotificationResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr remote_id_;
  ::BluetoothCharacteristic* characteristic_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OnCharacteristicChanged : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OnCharacteristicChanged) */ {
 public:
  OnCharacteristicChanged();
  virtual ~OnCharacteristicChanged();

  OnCharacteristicChanged(const OnCharacteristicChanged& from);

  inline OnCharacteristicChanged& operator=(const OnCharacteristicChanged& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OnCharacteristicChanged(OnCharacteristicChanged&& from) noexcept
    : OnCharacteristicChanged() {
    *this = ::std::move(from);
  }

  inline OnCharacteristicChanged& operator=(OnCharacteristicChanged&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OnCharacteristicChanged& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnCharacteristicChanged* internal_default_instance() {
    return reinterpret_cast<const OnCharacteristicChanged*>(
               &_OnCharacteristicChanged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(OnCharacteristicChanged* other);
  friend void swap(OnCharacteristicChanged& a, OnCharacteristicChanged& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OnCharacteristicChanged* New() const final {
    return CreateMaybeMessage<OnCharacteristicChanged>(NULL);
  }

  OnCharacteristicChanged* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OnCharacteristicChanged>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OnCharacteristicChanged& from);
  void MergeFrom(const OnCharacteristicChanged& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnCharacteristicChanged* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string remote_id = 1;
  void clear_remote_id();
  static const int kRemoteIdFieldNumber = 1;
  const ::std::string& remote_id() const;
  void set_remote_id(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_id(::std::string&& value);
  #endif
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  ::std::string* mutable_remote_id();
  ::std::string* release_remote_id();
  void set_allocated_remote_id(::std::string* remote_id);

  // .BluetoothCharacteristic characteristic = 2;
  bool has_characteristic() const;
  void clear_characteristic();
  static const int kCharacteristicFieldNumber = 2;
  private:
  const ::BluetoothCharacteristic& _internal_characteristic() const;
  public:
  const ::BluetoothCharacteristic& characteristic() const;
  ::BluetoothCharacteristic* release_characteristic();
  ::BluetoothCharacteristic* mutable_characteristic();
  void set_allocated_characteristic(::BluetoothCharacteristic* characteristic);

  // @@protoc_insertion_point(class_scope:OnCharacteristicChanged)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr remote_id_;
  ::BluetoothCharacteristic* characteristic_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceStateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DeviceStateResponse) */ {
 public:
  DeviceStateResponse();
  virtual ~DeviceStateResponse();

  DeviceStateResponse(const DeviceStateResponse& from);

  inline DeviceStateResponse& operator=(const DeviceStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceStateResponse(DeviceStateResponse&& from) noexcept
    : DeviceStateResponse() {
    *this = ::std::move(from);
  }

  inline DeviceStateResponse& operator=(DeviceStateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceStateResponse* internal_default_instance() {
    return reinterpret_cast<const DeviceStateResponse*>(
               &_DeviceStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(DeviceStateResponse* other);
  friend void swap(DeviceStateResponse& a, DeviceStateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceStateResponse* New() const final {
    return CreateMaybeMessage<DeviceStateResponse>(NULL);
  }

  DeviceStateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceStateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceStateResponse& from);
  void MergeFrom(const DeviceStateResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceStateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DeviceStateResponse_BluetoothDeviceState BluetoothDeviceState;
  static const BluetoothDeviceState DISCONNECTED =
    DeviceStateResponse_BluetoothDeviceState_DISCONNECTED;
  static const BluetoothDeviceState CONNECTING =
    DeviceStateResponse_BluetoothDeviceState_CONNECTING;
  static const BluetoothDeviceState CONNECTED =
    DeviceStateResponse_BluetoothDeviceState_CONNECTED;
  static const BluetoothDeviceState DISCONNECTING =
    DeviceStateResponse_BluetoothDeviceState_DISCONNECTING;
  static inline bool BluetoothDeviceState_IsValid(int value) {
    return DeviceStateResponse_BluetoothDeviceState_IsValid(value);
  }
  static const BluetoothDeviceState BluetoothDeviceState_MIN =
    DeviceStateResponse_BluetoothDeviceState_BluetoothDeviceState_MIN;
  static const BluetoothDeviceState BluetoothDeviceState_MAX =
    DeviceStateResponse_BluetoothDeviceState_BluetoothDeviceState_MAX;
  static const int BluetoothDeviceState_ARRAYSIZE =
    DeviceStateResponse_BluetoothDeviceState_BluetoothDeviceState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BluetoothDeviceState_descriptor() {
    return DeviceStateResponse_BluetoothDeviceState_descriptor();
  }
  static inline const ::std::string& BluetoothDeviceState_Name(BluetoothDeviceState value) {
    return DeviceStateResponse_BluetoothDeviceState_Name(value);
  }
  static inline bool BluetoothDeviceState_Parse(const ::std::string& name,
      BluetoothDeviceState* value) {
    return DeviceStateResponse_BluetoothDeviceState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string remote_id = 1;
  void clear_remote_id();
  static const int kRemoteIdFieldNumber = 1;
  const ::std::string& remote_id() const;
  void set_remote_id(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_id(::std::string&& value);
  #endif
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  ::std::string* mutable_remote_id();
  ::std::string* release_remote_id();
  void set_allocated_remote_id(::std::string* remote_id);

  // .DeviceStateResponse.BluetoothDeviceState state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::DeviceStateResponse_BluetoothDeviceState state() const;
  void set_state(::DeviceStateResponse_BluetoothDeviceState value);

  // @@protoc_insertion_point(class_scope:DeviceStateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr remote_id_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConnectedDevicesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ConnectedDevicesResponse) */ {
 public:
  ConnectedDevicesResponse();
  virtual ~ConnectedDevicesResponse();

  ConnectedDevicesResponse(const ConnectedDevicesResponse& from);

  inline ConnectedDevicesResponse& operator=(const ConnectedDevicesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectedDevicesResponse(ConnectedDevicesResponse&& from) noexcept
    : ConnectedDevicesResponse() {
    *this = ::std::move(from);
  }

  inline ConnectedDevicesResponse& operator=(ConnectedDevicesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectedDevicesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectedDevicesResponse* internal_default_instance() {
    return reinterpret_cast<const ConnectedDevicesResponse*>(
               &_ConnectedDevicesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(ConnectedDevicesResponse* other);
  friend void swap(ConnectedDevicesResponse& a, ConnectedDevicesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectedDevicesResponse* New() const final {
    return CreateMaybeMessage<ConnectedDevicesResponse>(NULL);
  }

  ConnectedDevicesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConnectedDevicesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConnectedDevicesResponse& from);
  void MergeFrom(const ConnectedDevicesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectedDevicesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BluetoothDevice devices = 1;
  int devices_size() const;
  void clear_devices();
  static const int kDevicesFieldNumber = 1;
  ::BluetoothDevice* mutable_devices(int index);
  ::google::protobuf::RepeatedPtrField< ::BluetoothDevice >*
      mutable_devices();
  const ::BluetoothDevice& devices(int index) const;
  ::BluetoothDevice* add_devices();
  const ::google::protobuf::RepeatedPtrField< ::BluetoothDevice >&
      devices() const;

  // @@protoc_insertion_point(class_scope:ConnectedDevicesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::BluetoothDevice > devices_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MtuSizeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MtuSizeRequest) */ {
 public:
  MtuSizeRequest();
  virtual ~MtuSizeRequest();

  MtuSizeRequest(const MtuSizeRequest& from);

  inline MtuSizeRequest& operator=(const MtuSizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MtuSizeRequest(MtuSizeRequest&& from) noexcept
    : MtuSizeRequest() {
    *this = ::std::move(from);
  }

  inline MtuSizeRequest& operator=(MtuSizeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MtuSizeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MtuSizeRequest* internal_default_instance() {
    return reinterpret_cast<const MtuSizeRequest*>(
               &_MtuSizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(MtuSizeRequest* other);
  friend void swap(MtuSizeRequest& a, MtuSizeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MtuSizeRequest* New() const final {
    return CreateMaybeMessage<MtuSizeRequest>(NULL);
  }

  MtuSizeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MtuSizeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MtuSizeRequest& from);
  void MergeFrom(const MtuSizeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MtuSizeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string remote_id = 1;
  void clear_remote_id();
  static const int kRemoteIdFieldNumber = 1;
  const ::std::string& remote_id() const;
  void set_remote_id(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_id(::std::string&& value);
  #endif
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  ::std::string* mutable_remote_id();
  ::std::string* release_remote_id();
  void set_allocated_remote_id(::std::string* remote_id);

  // uint32 mtu = 2;
  void clear_mtu();
  static const int kMtuFieldNumber = 2;
  ::google::protobuf::uint32 mtu() const;
  void set_mtu(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MtuSizeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr remote_id_;
  ::google::protobuf::uint32 mtu_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MtuSizeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MtuSizeResponse) */ {
 public:
  MtuSizeResponse();
  virtual ~MtuSizeResponse();

  MtuSizeResponse(const MtuSizeResponse& from);

  inline MtuSizeResponse& operator=(const MtuSizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MtuSizeResponse(MtuSizeResponse&& from) noexcept
    : MtuSizeResponse() {
    *this = ::std::move(from);
  }

  inline MtuSizeResponse& operator=(MtuSizeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MtuSizeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MtuSizeResponse* internal_default_instance() {
    return reinterpret_cast<const MtuSizeResponse*>(
               &_MtuSizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(MtuSizeResponse* other);
  friend void swap(MtuSizeResponse& a, MtuSizeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MtuSizeResponse* New() const final {
    return CreateMaybeMessage<MtuSizeResponse>(NULL);
  }

  MtuSizeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MtuSizeResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MtuSizeResponse& from);
  void MergeFrom(const MtuSizeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MtuSizeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string remote_id = 1;
  void clear_remote_id();
  static const int kRemoteIdFieldNumber = 1;
  const ::std::string& remote_id() const;
  void set_remote_id(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_id(::std::string&& value);
  #endif
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  ::std::string* mutable_remote_id();
  ::std::string* release_remote_id();
  void set_allocated_remote_id(::std::string* remote_id);

  // uint32 mtu = 2;
  void clear_mtu();
  static const int kMtuFieldNumber = 2;
  ::google::protobuf::uint32 mtu() const;
  void set_mtu(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MtuSizeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr remote_id_;
  ::google::protobuf::uint32 mtu_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flutterblue_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Int32Value

// int32 value = 1;
inline void Int32Value::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 Int32Value::value() const {
  // @@protoc_insertion_point(field_get:Int32Value.value)
  return value_;
}
inline void Int32Value::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Int32Value.value)
}

// -------------------------------------------------------------------

// BluetoothState

// .BluetoothState.State state = 1;
inline void BluetoothState::clear_state() {
  state_ = 0;
}
inline ::BluetoothState_State BluetoothState::state() const {
  // @@protoc_insertion_point(field_get:BluetoothState.state)
  return static_cast< ::BluetoothState_State >(state_);
}
inline void BluetoothState::set_state(::BluetoothState_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:BluetoothState.state)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AdvertisementData

// string local_name = 1;
inline void AdvertisementData::clear_local_name() {
  local_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AdvertisementData::local_name() const {
  // @@protoc_insertion_point(field_get:AdvertisementData.local_name)
  return local_name_.GetNoArena();
}
inline void AdvertisementData::set_local_name(const ::std::string& value) {
  
  local_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AdvertisementData.local_name)
}
#if LANG_CXX11
inline void AdvertisementData::set_local_name(::std::string&& value) {
  
  local_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AdvertisementData.local_name)
}
#endif
inline void AdvertisementData::set_local_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  local_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AdvertisementData.local_name)
}
inline void AdvertisementData::set_local_name(const char* value, size_t size) {
  
  local_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AdvertisementData.local_name)
}
inline ::std::string* AdvertisementData::mutable_local_name() {
  
  // @@protoc_insertion_point(field_mutable:AdvertisementData.local_name)
  return local_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdvertisementData::release_local_name() {
  // @@protoc_insertion_point(field_release:AdvertisementData.local_name)
  
  return local_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdvertisementData::set_allocated_local_name(::std::string* local_name) {
  if (local_name != NULL) {
    
  } else {
    
  }
  local_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_name);
  // @@protoc_insertion_point(field_set_allocated:AdvertisementData.local_name)
}

// .Int32Value tx_power_level = 2;
inline bool AdvertisementData::has_tx_power_level() const {
  return this != internal_default_instance() && tx_power_level_ != NULL;
}
inline void AdvertisementData::clear_tx_power_level() {
  if (GetArenaNoVirtual() == NULL && tx_power_level_ != NULL) {
    delete tx_power_level_;
  }
  tx_power_level_ = NULL;
}
inline const ::Int32Value& AdvertisementData::_internal_tx_power_level() const {
  return *tx_power_level_;
}
inline const ::Int32Value& AdvertisementData::tx_power_level() const {
  const ::Int32Value* p = tx_power_level_;
  // @@protoc_insertion_point(field_get:AdvertisementData.tx_power_level)
  return p != NULL ? *p : *reinterpret_cast<const ::Int32Value*>(
      &::_Int32Value_default_instance_);
}
inline ::Int32Value* AdvertisementData::release_tx_power_level() {
  // @@protoc_insertion_point(field_release:AdvertisementData.tx_power_level)
  
  ::Int32Value* temp = tx_power_level_;
  tx_power_level_ = NULL;
  return temp;
}
inline ::Int32Value* AdvertisementData::mutable_tx_power_level() {
  
  if (tx_power_level_ == NULL) {
    auto* p = CreateMaybeMessage<::Int32Value>(GetArenaNoVirtual());
    tx_power_level_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AdvertisementData.tx_power_level)
  return tx_power_level_;
}
inline void AdvertisementData::set_allocated_tx_power_level(::Int32Value* tx_power_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tx_power_level_;
  }
  if (tx_power_level) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_power_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_power_level, submessage_arena);
    }
    
  } else {
    
  }
  tx_power_level_ = tx_power_level;
  // @@protoc_insertion_point(field_set_allocated:AdvertisementData.tx_power_level)
}

// bool connectable = 3;
inline void AdvertisementData::clear_connectable() {
  connectable_ = false;
}
inline bool AdvertisementData::connectable() const {
  // @@protoc_insertion_point(field_get:AdvertisementData.connectable)
  return connectable_;
}
inline void AdvertisementData::set_connectable(bool value) {
  
  connectable_ = value;
  // @@protoc_insertion_point(field_set:AdvertisementData.connectable)
}

// map<int32, bytes> manufacturer_data = 4;
inline int AdvertisementData::manufacturer_data_size() const {
  return manufacturer_data_.size();
}
inline void AdvertisementData::clear_manufacturer_data() {
  manufacturer_data_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >&
AdvertisementData::manufacturer_data() const {
  // @@protoc_insertion_point(field_map:AdvertisementData.manufacturer_data)
  return manufacturer_data_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >*
AdvertisementData::mutable_manufacturer_data() {
  // @@protoc_insertion_point(field_mutable_map:AdvertisementData.manufacturer_data)
  return manufacturer_data_.MutableMap();
}

// map<string, bytes> service_data = 5;
inline int AdvertisementData::service_data_size() const {
  return service_data_.size();
}
inline void AdvertisementData::clear_service_data() {
  service_data_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
AdvertisementData::service_data() const {
  // @@protoc_insertion_point(field_map:AdvertisementData.service_data)
  return service_data_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
AdvertisementData::mutable_service_data() {
  // @@protoc_insertion_point(field_mutable_map:AdvertisementData.service_data)
  return service_data_.MutableMap();
}

// repeated string service_uuids = 6;
inline int AdvertisementData::service_uuids_size() const {
  return service_uuids_.size();
}
inline void AdvertisementData::clear_service_uuids() {
  service_uuids_.Clear();
}
inline const ::std::string& AdvertisementData::service_uuids(int index) const {
  // @@protoc_insertion_point(field_get:AdvertisementData.service_uuids)
  return service_uuids_.Get(index);
}
inline ::std::string* AdvertisementData::mutable_service_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:AdvertisementData.service_uuids)
  return service_uuids_.Mutable(index);
}
inline void AdvertisementData::set_service_uuids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AdvertisementData.service_uuids)
  service_uuids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AdvertisementData::set_service_uuids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:AdvertisementData.service_uuids)
  service_uuids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AdvertisementData::set_service_uuids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  service_uuids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AdvertisementData.service_uuids)
}
inline void AdvertisementData::set_service_uuids(int index, const char* value, size_t size) {
  service_uuids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AdvertisementData.service_uuids)
}
inline ::std::string* AdvertisementData::add_service_uuids() {
  // @@protoc_insertion_point(field_add_mutable:AdvertisementData.service_uuids)
  return service_uuids_.Add();
}
inline void AdvertisementData::add_service_uuids(const ::std::string& value) {
  service_uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AdvertisementData.service_uuids)
}
#if LANG_CXX11
inline void AdvertisementData::add_service_uuids(::std::string&& value) {
  service_uuids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AdvertisementData.service_uuids)
}
#endif
inline void AdvertisementData::add_service_uuids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  service_uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AdvertisementData.service_uuids)
}
inline void AdvertisementData::add_service_uuids(const char* value, size_t size) {
  service_uuids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AdvertisementData.service_uuids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AdvertisementData::service_uuids() const {
  // @@protoc_insertion_point(field_list:AdvertisementData.service_uuids)
  return service_uuids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AdvertisementData::mutable_service_uuids() {
  // @@protoc_insertion_point(field_mutable_list:AdvertisementData.service_uuids)
  return &service_uuids_;
}

// -------------------------------------------------------------------

// ScanSettings

// int32 android_scan_mode = 1;
inline void ScanSettings::clear_android_scan_mode() {
  android_scan_mode_ = 0;
}
inline ::google::protobuf::int32 ScanSettings::android_scan_mode() const {
  // @@protoc_insertion_point(field_get:ScanSettings.android_scan_mode)
  return android_scan_mode_;
}
inline void ScanSettings::set_android_scan_mode(::google::protobuf::int32 value) {
  
  android_scan_mode_ = value;
  // @@protoc_insertion_point(field_set:ScanSettings.android_scan_mode)
}

// repeated string service_uuids = 2;
inline int ScanSettings::service_uuids_size() const {
  return service_uuids_.size();
}
inline void ScanSettings::clear_service_uuids() {
  service_uuids_.Clear();
}
inline const ::std::string& ScanSettings::service_uuids(int index) const {
  // @@protoc_insertion_point(field_get:ScanSettings.service_uuids)
  return service_uuids_.Get(index);
}
inline ::std::string* ScanSettings::mutable_service_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:ScanSettings.service_uuids)
  return service_uuids_.Mutable(index);
}
inline void ScanSettings::set_service_uuids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ScanSettings.service_uuids)
  service_uuids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ScanSettings::set_service_uuids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ScanSettings.service_uuids)
  service_uuids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ScanSettings::set_service_uuids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  service_uuids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ScanSettings.service_uuids)
}
inline void ScanSettings::set_service_uuids(int index, const char* value, size_t size) {
  service_uuids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ScanSettings.service_uuids)
}
inline ::std::string* ScanSettings::add_service_uuids() {
  // @@protoc_insertion_point(field_add_mutable:ScanSettings.service_uuids)
  return service_uuids_.Add();
}
inline void ScanSettings::add_service_uuids(const ::std::string& value) {
  service_uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ScanSettings.service_uuids)
}
#if LANG_CXX11
inline void ScanSettings::add_service_uuids(::std::string&& value) {
  service_uuids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ScanSettings.service_uuids)
}
#endif
inline void ScanSettings::add_service_uuids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  service_uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ScanSettings.service_uuids)
}
inline void ScanSettings::add_service_uuids(const char* value, size_t size) {
  service_uuids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ScanSettings.service_uuids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ScanSettings::service_uuids() const {
  // @@protoc_insertion_point(field_list:ScanSettings.service_uuids)
  return service_uuids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ScanSettings::mutable_service_uuids() {
  // @@protoc_insertion_point(field_mutable_list:ScanSettings.service_uuids)
  return &service_uuids_;
}

// bool allow_duplicates = 3;
inline void ScanSettings::clear_allow_duplicates() {
  allow_duplicates_ = false;
}
inline bool ScanSettings::allow_duplicates() const {
  // @@protoc_insertion_point(field_get:ScanSettings.allow_duplicates)
  return allow_duplicates_;
}
inline void ScanSettings::set_allow_duplicates(bool value) {
  
  allow_duplicates_ = value;
  // @@protoc_insertion_point(field_set:ScanSettings.allow_duplicates)
}

// -------------------------------------------------------------------

// ScanResult

// .BluetoothDevice device = 1;
inline bool ScanResult::has_device() const {
  return this != internal_default_instance() && device_ != NULL;
}
inline void ScanResult::clear_device() {
  if (GetArenaNoVirtual() == NULL && device_ != NULL) {
    delete device_;
  }
  device_ = NULL;
}
inline const ::BluetoothDevice& ScanResult::_internal_device() const {
  return *device_;
}
inline const ::BluetoothDevice& ScanResult::device() const {
  const ::BluetoothDevice* p = device_;
  // @@protoc_insertion_point(field_get:ScanResult.device)
  return p != NULL ? *p : *reinterpret_cast<const ::BluetoothDevice*>(
      &::_BluetoothDevice_default_instance_);
}
inline ::BluetoothDevice* ScanResult::release_device() {
  // @@protoc_insertion_point(field_release:ScanResult.device)
  
  ::BluetoothDevice* temp = device_;
  device_ = NULL;
  return temp;
}
inline ::BluetoothDevice* ScanResult::mutable_device() {
  
  if (device_ == NULL) {
    auto* p = CreateMaybeMessage<::BluetoothDevice>(GetArenaNoVirtual());
    device_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ScanResult.device)
  return device_;
}
inline void ScanResult::set_allocated_device(::BluetoothDevice* device) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete device_;
  }
  if (device) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:ScanResult.device)
}

// .AdvertisementData advertisement_data = 2;
inline bool ScanResult::has_advertisement_data() const {
  return this != internal_default_instance() && advertisement_data_ != NULL;
}
inline void ScanResult::clear_advertisement_data() {
  if (GetArenaNoVirtual() == NULL && advertisement_data_ != NULL) {
    delete advertisement_data_;
  }
  advertisement_data_ = NULL;
}
inline const ::AdvertisementData& ScanResult::_internal_advertisement_data() const {
  return *advertisement_data_;
}
inline const ::AdvertisementData& ScanResult::advertisement_data() const {
  const ::AdvertisementData* p = advertisement_data_;
  // @@protoc_insertion_point(field_get:ScanResult.advertisement_data)
  return p != NULL ? *p : *reinterpret_cast<const ::AdvertisementData*>(
      &::_AdvertisementData_default_instance_);
}
inline ::AdvertisementData* ScanResult::release_advertisement_data() {
  // @@protoc_insertion_point(field_release:ScanResult.advertisement_data)
  
  ::AdvertisementData* temp = advertisement_data_;
  advertisement_data_ = NULL;
  return temp;
}
inline ::AdvertisementData* ScanResult::mutable_advertisement_data() {
  
  if (advertisement_data_ == NULL) {
    auto* p = CreateMaybeMessage<::AdvertisementData>(GetArenaNoVirtual());
    advertisement_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ScanResult.advertisement_data)
  return advertisement_data_;
}
inline void ScanResult::set_allocated_advertisement_data(::AdvertisementData* advertisement_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete advertisement_data_;
  }
  if (advertisement_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      advertisement_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, advertisement_data, submessage_arena);
    }
    
  } else {
    
  }
  advertisement_data_ = advertisement_data;
  // @@protoc_insertion_point(field_set_allocated:ScanResult.advertisement_data)
}

// int32 rssi = 3;
inline void ScanResult::clear_rssi() {
  rssi_ = 0;
}
inline ::google::protobuf::int32 ScanResult::rssi() const {
  // @@protoc_insertion_point(field_get:ScanResult.rssi)
  return rssi_;
}
inline void ScanResult::set_rssi(::google::protobuf::int32 value) {
  
  rssi_ = value;
  // @@protoc_insertion_point(field_set:ScanResult.rssi)
}

// -------------------------------------------------------------------

// ConnectRequest

// string remote_id = 1;
inline void ConnectRequest::clear_remote_id() {
  remote_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectRequest::remote_id() const {
  // @@protoc_insertion_point(field_get:ConnectRequest.remote_id)
  return remote_id_.GetNoArena();
}
inline void ConnectRequest::set_remote_id(const ::std::string& value) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConnectRequest.remote_id)
}
#if LANG_CXX11
inline void ConnectRequest::set_remote_id(::std::string&& value) {
  
  remote_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConnectRequest.remote_id)
}
#endif
inline void ConnectRequest::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConnectRequest.remote_id)
}
inline void ConnectRequest::set_remote_id(const char* value, size_t size) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConnectRequest.remote_id)
}
inline ::std::string* ConnectRequest::mutable_remote_id() {
  
  // @@protoc_insertion_point(field_mutable:ConnectRequest.remote_id)
  return remote_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectRequest::release_remote_id() {
  // @@protoc_insertion_point(field_release:ConnectRequest.remote_id)
  
  return remote_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectRequest::set_allocated_remote_id(::std::string* remote_id) {
  if (remote_id != NULL) {
    
  } else {
    
  }
  remote_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_id);
  // @@protoc_insertion_point(field_set_allocated:ConnectRequest.remote_id)
}

// bool android_auto_connect = 2;
inline void ConnectRequest::clear_android_auto_connect() {
  android_auto_connect_ = false;
}
inline bool ConnectRequest::android_auto_connect() const {
  // @@protoc_insertion_point(field_get:ConnectRequest.android_auto_connect)
  return android_auto_connect_;
}
inline void ConnectRequest::set_android_auto_connect(bool value) {
  
  android_auto_connect_ = value;
  // @@protoc_insertion_point(field_set:ConnectRequest.android_auto_connect)
}

// -------------------------------------------------------------------

// BluetoothDevice

// string remote_id = 1;
inline void BluetoothDevice::clear_remote_id() {
  remote_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BluetoothDevice::remote_id() const {
  // @@protoc_insertion_point(field_get:BluetoothDevice.remote_id)
  return remote_id_.GetNoArena();
}
inline void BluetoothDevice::set_remote_id(const ::std::string& value) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BluetoothDevice.remote_id)
}
#if LANG_CXX11
inline void BluetoothDevice::set_remote_id(::std::string&& value) {
  
  remote_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BluetoothDevice.remote_id)
}
#endif
inline void BluetoothDevice::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BluetoothDevice.remote_id)
}
inline void BluetoothDevice::set_remote_id(const char* value, size_t size) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BluetoothDevice.remote_id)
}
inline ::std::string* BluetoothDevice::mutable_remote_id() {
  
  // @@protoc_insertion_point(field_mutable:BluetoothDevice.remote_id)
  return remote_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BluetoothDevice::release_remote_id() {
  // @@protoc_insertion_point(field_release:BluetoothDevice.remote_id)
  
  return remote_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BluetoothDevice::set_allocated_remote_id(::std::string* remote_id) {
  if (remote_id != NULL) {
    
  } else {
    
  }
  remote_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_id);
  // @@protoc_insertion_point(field_set_allocated:BluetoothDevice.remote_id)
}

// string name = 2;
inline void BluetoothDevice::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BluetoothDevice::name() const {
  // @@protoc_insertion_point(field_get:BluetoothDevice.name)
  return name_.GetNoArena();
}
inline void BluetoothDevice::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BluetoothDevice.name)
}
#if LANG_CXX11
inline void BluetoothDevice::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BluetoothDevice.name)
}
#endif
inline void BluetoothDevice::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BluetoothDevice.name)
}
inline void BluetoothDevice::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BluetoothDevice.name)
}
inline ::std::string* BluetoothDevice::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:BluetoothDevice.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BluetoothDevice::release_name() {
  // @@protoc_insertion_point(field_release:BluetoothDevice.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BluetoothDevice::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:BluetoothDevice.name)
}

// .BluetoothDevice.Type type = 3;
inline void BluetoothDevice::clear_type() {
  type_ = 0;
}
inline ::BluetoothDevice_Type BluetoothDevice::type() const {
  // @@protoc_insertion_point(field_get:BluetoothDevice.type)
  return static_cast< ::BluetoothDevice_Type >(type_);
}
inline void BluetoothDevice::set_type(::BluetoothDevice_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:BluetoothDevice.type)
}

// -------------------------------------------------------------------

// BluetoothService

// string uuid = 1;
inline void BluetoothService::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BluetoothService::uuid() const {
  // @@protoc_insertion_point(field_get:BluetoothService.uuid)
  return uuid_.GetNoArena();
}
inline void BluetoothService::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BluetoothService.uuid)
}
#if LANG_CXX11
inline void BluetoothService::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BluetoothService.uuid)
}
#endif
inline void BluetoothService::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BluetoothService.uuid)
}
inline void BluetoothService::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BluetoothService.uuid)
}
inline ::std::string* BluetoothService::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:BluetoothService.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BluetoothService::release_uuid() {
  // @@protoc_insertion_point(field_release:BluetoothService.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BluetoothService::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:BluetoothService.uuid)
}

// string remote_id = 2;
inline void BluetoothService::clear_remote_id() {
  remote_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BluetoothService::remote_id() const {
  // @@protoc_insertion_point(field_get:BluetoothService.remote_id)
  return remote_id_.GetNoArena();
}
inline void BluetoothService::set_remote_id(const ::std::string& value) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BluetoothService.remote_id)
}
#if LANG_CXX11
inline void BluetoothService::set_remote_id(::std::string&& value) {
  
  remote_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BluetoothService.remote_id)
}
#endif
inline void BluetoothService::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BluetoothService.remote_id)
}
inline void BluetoothService::set_remote_id(const char* value, size_t size) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BluetoothService.remote_id)
}
inline ::std::string* BluetoothService::mutable_remote_id() {
  
  // @@protoc_insertion_point(field_mutable:BluetoothService.remote_id)
  return remote_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BluetoothService::release_remote_id() {
  // @@protoc_insertion_point(field_release:BluetoothService.remote_id)
  
  return remote_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BluetoothService::set_allocated_remote_id(::std::string* remote_id) {
  if (remote_id != NULL) {
    
  } else {
    
  }
  remote_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_id);
  // @@protoc_insertion_point(field_set_allocated:BluetoothService.remote_id)
}

// bool is_primary = 3;
inline void BluetoothService::clear_is_primary() {
  is_primary_ = false;
}
inline bool BluetoothService::is_primary() const {
  // @@protoc_insertion_point(field_get:BluetoothService.is_primary)
  return is_primary_;
}
inline void BluetoothService::set_is_primary(bool value) {
  
  is_primary_ = value;
  // @@protoc_insertion_point(field_set:BluetoothService.is_primary)
}

// repeated .BluetoothCharacteristic characteristics = 4;
inline int BluetoothService::characteristics_size() const {
  return characteristics_.size();
}
inline void BluetoothService::clear_characteristics() {
  characteristics_.Clear();
}
inline ::BluetoothCharacteristic* BluetoothService::mutable_characteristics(int index) {
  // @@protoc_insertion_point(field_mutable:BluetoothService.characteristics)
  return characteristics_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::BluetoothCharacteristic >*
BluetoothService::mutable_characteristics() {
  // @@protoc_insertion_point(field_mutable_list:BluetoothService.characteristics)
  return &characteristics_;
}
inline const ::BluetoothCharacteristic& BluetoothService::characteristics(int index) const {
  // @@protoc_insertion_point(field_get:BluetoothService.characteristics)
  return characteristics_.Get(index);
}
inline ::BluetoothCharacteristic* BluetoothService::add_characteristics() {
  // @@protoc_insertion_point(field_add:BluetoothService.characteristics)
  return characteristics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BluetoothCharacteristic >&
BluetoothService::characteristics() const {
  // @@protoc_insertion_point(field_list:BluetoothService.characteristics)
  return characteristics_;
}

// repeated .BluetoothService included_services = 5;
inline int BluetoothService::included_services_size() const {
  return included_services_.size();
}
inline void BluetoothService::clear_included_services() {
  included_services_.Clear();
}
inline ::BluetoothService* BluetoothService::mutable_included_services(int index) {
  // @@protoc_insertion_point(field_mutable:BluetoothService.included_services)
  return included_services_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::BluetoothService >*
BluetoothService::mutable_included_services() {
  // @@protoc_insertion_point(field_mutable_list:BluetoothService.included_services)
  return &included_services_;
}
inline const ::BluetoothService& BluetoothService::included_services(int index) const {
  // @@protoc_insertion_point(field_get:BluetoothService.included_services)
  return included_services_.Get(index);
}
inline ::BluetoothService* BluetoothService::add_included_services() {
  // @@protoc_insertion_point(field_add:BluetoothService.included_services)
  return included_services_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BluetoothService >&
BluetoothService::included_services() const {
  // @@protoc_insertion_point(field_list:BluetoothService.included_services)
  return included_services_;
}

// -------------------------------------------------------------------

// BluetoothCharacteristic

// string uuid = 1;
inline void BluetoothCharacteristic::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BluetoothCharacteristic::uuid() const {
  // @@protoc_insertion_point(field_get:BluetoothCharacteristic.uuid)
  return uuid_.GetNoArena();
}
inline void BluetoothCharacteristic::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BluetoothCharacteristic.uuid)
}
#if LANG_CXX11
inline void BluetoothCharacteristic::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BluetoothCharacteristic.uuid)
}
#endif
inline void BluetoothCharacteristic::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BluetoothCharacteristic.uuid)
}
inline void BluetoothCharacteristic::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BluetoothCharacteristic.uuid)
}
inline ::std::string* BluetoothCharacteristic::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:BluetoothCharacteristic.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BluetoothCharacteristic::release_uuid() {
  // @@protoc_insertion_point(field_release:BluetoothCharacteristic.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BluetoothCharacteristic::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:BluetoothCharacteristic.uuid)
}

// string remote_id = 2;
inline void BluetoothCharacteristic::clear_remote_id() {
  remote_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BluetoothCharacteristic::remote_id() const {
  // @@protoc_insertion_point(field_get:BluetoothCharacteristic.remote_id)
  return remote_id_.GetNoArena();
}
inline void BluetoothCharacteristic::set_remote_id(const ::std::string& value) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BluetoothCharacteristic.remote_id)
}
#if LANG_CXX11
inline void BluetoothCharacteristic::set_remote_id(::std::string&& value) {
  
  remote_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BluetoothCharacteristic.remote_id)
}
#endif
inline void BluetoothCharacteristic::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BluetoothCharacteristic.remote_id)
}
inline void BluetoothCharacteristic::set_remote_id(const char* value, size_t size) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BluetoothCharacteristic.remote_id)
}
inline ::std::string* BluetoothCharacteristic::mutable_remote_id() {
  
  // @@protoc_insertion_point(field_mutable:BluetoothCharacteristic.remote_id)
  return remote_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BluetoothCharacteristic::release_remote_id() {
  // @@protoc_insertion_point(field_release:BluetoothCharacteristic.remote_id)
  
  return remote_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BluetoothCharacteristic::set_allocated_remote_id(::std::string* remote_id) {
  if (remote_id != NULL) {
    
  } else {
    
  }
  remote_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_id);
  // @@protoc_insertion_point(field_set_allocated:BluetoothCharacteristic.remote_id)
}

// string serviceUuid = 3;
inline void BluetoothCharacteristic::clear_serviceuuid() {
  serviceuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BluetoothCharacteristic::serviceuuid() const {
  // @@protoc_insertion_point(field_get:BluetoothCharacteristic.serviceUuid)
  return serviceuuid_.GetNoArena();
}
inline void BluetoothCharacteristic::set_serviceuuid(const ::std::string& value) {
  
  serviceuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BluetoothCharacteristic.serviceUuid)
}
#if LANG_CXX11
inline void BluetoothCharacteristic::set_serviceuuid(::std::string&& value) {
  
  serviceuuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BluetoothCharacteristic.serviceUuid)
}
#endif
inline void BluetoothCharacteristic::set_serviceuuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serviceuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BluetoothCharacteristic.serviceUuid)
}
inline void BluetoothCharacteristic::set_serviceuuid(const char* value, size_t size) {
  
  serviceuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BluetoothCharacteristic.serviceUuid)
}
inline ::std::string* BluetoothCharacteristic::mutable_serviceuuid() {
  
  // @@protoc_insertion_point(field_mutable:BluetoothCharacteristic.serviceUuid)
  return serviceuuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BluetoothCharacteristic::release_serviceuuid() {
  // @@protoc_insertion_point(field_release:BluetoothCharacteristic.serviceUuid)
  
  return serviceuuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BluetoothCharacteristic::set_allocated_serviceuuid(::std::string* serviceuuid) {
  if (serviceuuid != NULL) {
    
  } else {
    
  }
  serviceuuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serviceuuid);
  // @@protoc_insertion_point(field_set_allocated:BluetoothCharacteristic.serviceUuid)
}

// string secondaryServiceUuid = 4;
inline void BluetoothCharacteristic::clear_secondaryserviceuuid() {
  secondaryserviceuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BluetoothCharacteristic::secondaryserviceuuid() const {
  // @@protoc_insertion_point(field_get:BluetoothCharacteristic.secondaryServiceUuid)
  return secondaryserviceuuid_.GetNoArena();
}
inline void BluetoothCharacteristic::set_secondaryserviceuuid(const ::std::string& value) {
  
  secondaryserviceuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BluetoothCharacteristic.secondaryServiceUuid)
}
#if LANG_CXX11
inline void BluetoothCharacteristic::set_secondaryserviceuuid(::std::string&& value) {
  
  secondaryserviceuuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BluetoothCharacteristic.secondaryServiceUuid)
}
#endif
inline void BluetoothCharacteristic::set_secondaryserviceuuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  secondaryserviceuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BluetoothCharacteristic.secondaryServiceUuid)
}
inline void BluetoothCharacteristic::set_secondaryserviceuuid(const char* value, size_t size) {
  
  secondaryserviceuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BluetoothCharacteristic.secondaryServiceUuid)
}
inline ::std::string* BluetoothCharacteristic::mutable_secondaryserviceuuid() {
  
  // @@protoc_insertion_point(field_mutable:BluetoothCharacteristic.secondaryServiceUuid)
  return secondaryserviceuuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BluetoothCharacteristic::release_secondaryserviceuuid() {
  // @@protoc_insertion_point(field_release:BluetoothCharacteristic.secondaryServiceUuid)
  
  return secondaryserviceuuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BluetoothCharacteristic::set_allocated_secondaryserviceuuid(::std::string* secondaryserviceuuid) {
  if (secondaryserviceuuid != NULL) {
    
  } else {
    
  }
  secondaryserviceuuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secondaryserviceuuid);
  // @@protoc_insertion_point(field_set_allocated:BluetoothCharacteristic.secondaryServiceUuid)
}

// repeated .BluetoothDescriptor descriptors = 5;
inline int BluetoothCharacteristic::descriptors_size() const {
  return descriptors_.size();
}
inline void BluetoothCharacteristic::clear_descriptors() {
  descriptors_.Clear();
}
inline ::BluetoothDescriptor* BluetoothCharacteristic::mutable_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:BluetoothCharacteristic.descriptors)
  return descriptors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::BluetoothDescriptor >*
BluetoothCharacteristic::mutable_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:BluetoothCharacteristic.descriptors)
  return &descriptors_;
}
inline const ::BluetoothDescriptor& BluetoothCharacteristic::descriptors(int index) const {
  // @@protoc_insertion_point(field_get:BluetoothCharacteristic.descriptors)
  return descriptors_.Get(index);
}
inline ::BluetoothDescriptor* BluetoothCharacteristic::add_descriptors() {
  // @@protoc_insertion_point(field_add:BluetoothCharacteristic.descriptors)
  return descriptors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BluetoothDescriptor >&
BluetoothCharacteristic::descriptors() const {
  // @@protoc_insertion_point(field_list:BluetoothCharacteristic.descriptors)
  return descriptors_;
}

// .CharacteristicProperties properties = 6;
inline bool BluetoothCharacteristic::has_properties() const {
  return this != internal_default_instance() && properties_ != NULL;
}
inline void BluetoothCharacteristic::clear_properties() {
  if (GetArenaNoVirtual() == NULL && properties_ != NULL) {
    delete properties_;
  }
  properties_ = NULL;
}
inline const ::CharacteristicProperties& BluetoothCharacteristic::_internal_properties() const {
  return *properties_;
}
inline const ::CharacteristicProperties& BluetoothCharacteristic::properties() const {
  const ::CharacteristicProperties* p = properties_;
  // @@protoc_insertion_point(field_get:BluetoothCharacteristic.properties)
  return p != NULL ? *p : *reinterpret_cast<const ::CharacteristicProperties*>(
      &::_CharacteristicProperties_default_instance_);
}
inline ::CharacteristicProperties* BluetoothCharacteristic::release_properties() {
  // @@protoc_insertion_point(field_release:BluetoothCharacteristic.properties)
  
  ::CharacteristicProperties* temp = properties_;
  properties_ = NULL;
  return temp;
}
inline ::CharacteristicProperties* BluetoothCharacteristic::mutable_properties() {
  
  if (properties_ == NULL) {
    auto* p = CreateMaybeMessage<::CharacteristicProperties>(GetArenaNoVirtual());
    properties_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BluetoothCharacteristic.properties)
  return properties_;
}
inline void BluetoothCharacteristic::set_allocated_properties(::CharacteristicProperties* properties) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete properties_;
  }
  if (properties) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      properties = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, properties, submessage_arena);
    }
    
  } else {
    
  }
  properties_ = properties;
  // @@protoc_insertion_point(field_set_allocated:BluetoothCharacteristic.properties)
}

// bytes value = 7;
inline void BluetoothCharacteristic::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BluetoothCharacteristic::value() const {
  // @@protoc_insertion_point(field_get:BluetoothCharacteristic.value)
  return value_.GetNoArena();
}
inline void BluetoothCharacteristic::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BluetoothCharacteristic.value)
}
#if LANG_CXX11
inline void BluetoothCharacteristic::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BluetoothCharacteristic.value)
}
#endif
inline void BluetoothCharacteristic::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BluetoothCharacteristic.value)
}
inline void BluetoothCharacteristic::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BluetoothCharacteristic.value)
}
inline ::std::string* BluetoothCharacteristic::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:BluetoothCharacteristic.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BluetoothCharacteristic::release_value() {
  // @@protoc_insertion_point(field_release:BluetoothCharacteristic.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BluetoothCharacteristic::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:BluetoothCharacteristic.value)
}

// -------------------------------------------------------------------

// BluetoothDescriptor

// string uuid = 1;
inline void BluetoothDescriptor::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BluetoothDescriptor::uuid() const {
  // @@protoc_insertion_point(field_get:BluetoothDescriptor.uuid)
  return uuid_.GetNoArena();
}
inline void BluetoothDescriptor::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BluetoothDescriptor.uuid)
}
#if LANG_CXX11
inline void BluetoothDescriptor::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BluetoothDescriptor.uuid)
}
#endif
inline void BluetoothDescriptor::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BluetoothDescriptor.uuid)
}
inline void BluetoothDescriptor::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BluetoothDescriptor.uuid)
}
inline ::std::string* BluetoothDescriptor::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:BluetoothDescriptor.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BluetoothDescriptor::release_uuid() {
  // @@protoc_insertion_point(field_release:BluetoothDescriptor.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BluetoothDescriptor::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:BluetoothDescriptor.uuid)
}

// string remote_id = 2;
inline void BluetoothDescriptor::clear_remote_id() {
  remote_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BluetoothDescriptor::remote_id() const {
  // @@protoc_insertion_point(field_get:BluetoothDescriptor.remote_id)
  return remote_id_.GetNoArena();
}
inline void BluetoothDescriptor::set_remote_id(const ::std::string& value) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BluetoothDescriptor.remote_id)
}
#if LANG_CXX11
inline void BluetoothDescriptor::set_remote_id(::std::string&& value) {
  
  remote_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BluetoothDescriptor.remote_id)
}
#endif
inline void BluetoothDescriptor::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BluetoothDescriptor.remote_id)
}
inline void BluetoothDescriptor::set_remote_id(const char* value, size_t size) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BluetoothDescriptor.remote_id)
}
inline ::std::string* BluetoothDescriptor::mutable_remote_id() {
  
  // @@protoc_insertion_point(field_mutable:BluetoothDescriptor.remote_id)
  return remote_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BluetoothDescriptor::release_remote_id() {
  // @@protoc_insertion_point(field_release:BluetoothDescriptor.remote_id)
  
  return remote_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BluetoothDescriptor::set_allocated_remote_id(::std::string* remote_id) {
  if (remote_id != NULL) {
    
  } else {
    
  }
  remote_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_id);
  // @@protoc_insertion_point(field_set_allocated:BluetoothDescriptor.remote_id)
}

// string serviceUuid = 3;
inline void BluetoothDescriptor::clear_serviceuuid() {
  serviceuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BluetoothDescriptor::serviceuuid() const {
  // @@protoc_insertion_point(field_get:BluetoothDescriptor.serviceUuid)
  return serviceuuid_.GetNoArena();
}
inline void BluetoothDescriptor::set_serviceuuid(const ::std::string& value) {
  
  serviceuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BluetoothDescriptor.serviceUuid)
}
#if LANG_CXX11
inline void BluetoothDescriptor::set_serviceuuid(::std::string&& value) {
  
  serviceuuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BluetoothDescriptor.serviceUuid)
}
#endif
inline void BluetoothDescriptor::set_serviceuuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serviceuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BluetoothDescriptor.serviceUuid)
}
inline void BluetoothDescriptor::set_serviceuuid(const char* value, size_t size) {
  
  serviceuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BluetoothDescriptor.serviceUuid)
}
inline ::std::string* BluetoothDescriptor::mutable_serviceuuid() {
  
  // @@protoc_insertion_point(field_mutable:BluetoothDescriptor.serviceUuid)
  return serviceuuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BluetoothDescriptor::release_serviceuuid() {
  // @@protoc_insertion_point(field_release:BluetoothDescriptor.serviceUuid)
  
  return serviceuuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BluetoothDescriptor::set_allocated_serviceuuid(::std::string* serviceuuid) {
  if (serviceuuid != NULL) {
    
  } else {
    
  }
  serviceuuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serviceuuid);
  // @@protoc_insertion_point(field_set_allocated:BluetoothDescriptor.serviceUuid)
}

// string characteristicUuid = 4;
inline void BluetoothDescriptor::clear_characteristicuuid() {
  characteristicuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BluetoothDescriptor::characteristicuuid() const {
  // @@protoc_insertion_point(field_get:BluetoothDescriptor.characteristicUuid)
  return characteristicuuid_.GetNoArena();
}
inline void BluetoothDescriptor::set_characteristicuuid(const ::std::string& value) {
  
  characteristicuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BluetoothDescriptor.characteristicUuid)
}
#if LANG_CXX11
inline void BluetoothDescriptor::set_characteristicuuid(::std::string&& value) {
  
  characteristicuuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BluetoothDescriptor.characteristicUuid)
}
#endif
inline void BluetoothDescriptor::set_characteristicuuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  characteristicuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BluetoothDescriptor.characteristicUuid)
}
inline void BluetoothDescriptor::set_characteristicuuid(const char* value, size_t size) {
  
  characteristicuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BluetoothDescriptor.characteristicUuid)
}
inline ::std::string* BluetoothDescriptor::mutable_characteristicuuid() {
  
  // @@protoc_insertion_point(field_mutable:BluetoothDescriptor.characteristicUuid)
  return characteristicuuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BluetoothDescriptor::release_characteristicuuid() {
  // @@protoc_insertion_point(field_release:BluetoothDescriptor.characteristicUuid)
  
  return characteristicuuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BluetoothDescriptor::set_allocated_characteristicuuid(::std::string* characteristicuuid) {
  if (characteristicuuid != NULL) {
    
  } else {
    
  }
  characteristicuuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), characteristicuuid);
  // @@protoc_insertion_point(field_set_allocated:BluetoothDescriptor.characteristicUuid)
}

// bytes value = 5;
inline void BluetoothDescriptor::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BluetoothDescriptor::value() const {
  // @@protoc_insertion_point(field_get:BluetoothDescriptor.value)
  return value_.GetNoArena();
}
inline void BluetoothDescriptor::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BluetoothDescriptor.value)
}
#if LANG_CXX11
inline void BluetoothDescriptor::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BluetoothDescriptor.value)
}
#endif
inline void BluetoothDescriptor::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BluetoothDescriptor.value)
}
inline void BluetoothDescriptor::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BluetoothDescriptor.value)
}
inline ::std::string* BluetoothDescriptor::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:BluetoothDescriptor.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BluetoothDescriptor::release_value() {
  // @@protoc_insertion_point(field_release:BluetoothDescriptor.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BluetoothDescriptor::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:BluetoothDescriptor.value)
}

// -------------------------------------------------------------------

// CharacteristicProperties

// bool broadcast = 1;
inline void CharacteristicProperties::clear_broadcast() {
  broadcast_ = false;
}
inline bool CharacteristicProperties::broadcast() const {
  // @@protoc_insertion_point(field_get:CharacteristicProperties.broadcast)
  return broadcast_;
}
inline void CharacteristicProperties::set_broadcast(bool value) {
  
  broadcast_ = value;
  // @@protoc_insertion_point(field_set:CharacteristicProperties.broadcast)
}

// bool read = 2;
inline void CharacteristicProperties::clear_read() {
  read_ = false;
}
inline bool CharacteristicProperties::read() const {
  // @@protoc_insertion_point(field_get:CharacteristicProperties.read)
  return read_;
}
inline void CharacteristicProperties::set_read(bool value) {
  
  read_ = value;
  // @@protoc_insertion_point(field_set:CharacteristicProperties.read)
}

// bool write_without_response = 3;
inline void CharacteristicProperties::clear_write_without_response() {
  write_without_response_ = false;
}
inline bool CharacteristicProperties::write_without_response() const {
  // @@protoc_insertion_point(field_get:CharacteristicProperties.write_without_response)
  return write_without_response_;
}
inline void CharacteristicProperties::set_write_without_response(bool value) {
  
  write_without_response_ = value;
  // @@protoc_insertion_point(field_set:CharacteristicProperties.write_without_response)
}

// bool write = 4;
inline void CharacteristicProperties::clear_write() {
  write_ = false;
}
inline bool CharacteristicProperties::write() const {
  // @@protoc_insertion_point(field_get:CharacteristicProperties.write)
  return write_;
}
inline void CharacteristicProperties::set_write(bool value) {
  
  write_ = value;
  // @@protoc_insertion_point(field_set:CharacteristicProperties.write)
}

// bool notify = 5;
inline void CharacteristicProperties::clear_notify() {
  notify_ = false;
}
inline bool CharacteristicProperties::notify() const {
  // @@protoc_insertion_point(field_get:CharacteristicProperties.notify)
  return notify_;
}
inline void CharacteristicProperties::set_notify(bool value) {
  
  notify_ = value;
  // @@protoc_insertion_point(field_set:CharacteristicProperties.notify)
}

// bool indicate = 6;
inline void CharacteristicProperties::clear_indicate() {
  indicate_ = false;
}
inline bool CharacteristicProperties::indicate() const {
  // @@protoc_insertion_point(field_get:CharacteristicProperties.indicate)
  return indicate_;
}
inline void CharacteristicProperties::set_indicate(bool value) {
  
  indicate_ = value;
  // @@protoc_insertion_point(field_set:CharacteristicProperties.indicate)
}

// bool authenticated_signed_writes = 7;
inline void CharacteristicProperties::clear_authenticated_signed_writes() {
  authenticated_signed_writes_ = false;
}
inline bool CharacteristicProperties::authenticated_signed_writes() const {
  // @@protoc_insertion_point(field_get:CharacteristicProperties.authenticated_signed_writes)
  return authenticated_signed_writes_;
}
inline void CharacteristicProperties::set_authenticated_signed_writes(bool value) {
  
  authenticated_signed_writes_ = value;
  // @@protoc_insertion_point(field_set:CharacteristicProperties.authenticated_signed_writes)
}

// bool extended_properties = 8;
inline void CharacteristicProperties::clear_extended_properties() {
  extended_properties_ = false;
}
inline bool CharacteristicProperties::extended_properties() const {
  // @@protoc_insertion_point(field_get:CharacteristicProperties.extended_properties)
  return extended_properties_;
}
inline void CharacteristicProperties::set_extended_properties(bool value) {
  
  extended_properties_ = value;
  // @@protoc_insertion_point(field_set:CharacteristicProperties.extended_properties)
}

// bool notify_encryption_required = 9;
inline void CharacteristicProperties::clear_notify_encryption_required() {
  notify_encryption_required_ = false;
}
inline bool CharacteristicProperties::notify_encryption_required() const {
  // @@protoc_insertion_point(field_get:CharacteristicProperties.notify_encryption_required)
  return notify_encryption_required_;
}
inline void CharacteristicProperties::set_notify_encryption_required(bool value) {
  
  notify_encryption_required_ = value;
  // @@protoc_insertion_point(field_set:CharacteristicProperties.notify_encryption_required)
}

// bool indicate_encryption_required = 10;
inline void CharacteristicProperties::clear_indicate_encryption_required() {
  indicate_encryption_required_ = false;
}
inline bool CharacteristicProperties::indicate_encryption_required() const {
  // @@protoc_insertion_point(field_get:CharacteristicProperties.indicate_encryption_required)
  return indicate_encryption_required_;
}
inline void CharacteristicProperties::set_indicate_encryption_required(bool value) {
  
  indicate_encryption_required_ = value;
  // @@protoc_insertion_point(field_set:CharacteristicProperties.indicate_encryption_required)
}

// -------------------------------------------------------------------

// DiscoverServicesResult

// string remote_id = 1;
inline void DiscoverServicesResult::clear_remote_id() {
  remote_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DiscoverServicesResult::remote_id() const {
  // @@protoc_insertion_point(field_get:DiscoverServicesResult.remote_id)
  return remote_id_.GetNoArena();
}
inline void DiscoverServicesResult::set_remote_id(const ::std::string& value) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DiscoverServicesResult.remote_id)
}
#if LANG_CXX11
inline void DiscoverServicesResult::set_remote_id(::std::string&& value) {
  
  remote_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DiscoverServicesResult.remote_id)
}
#endif
inline void DiscoverServicesResult::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DiscoverServicesResult.remote_id)
}
inline void DiscoverServicesResult::set_remote_id(const char* value, size_t size) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DiscoverServicesResult.remote_id)
}
inline ::std::string* DiscoverServicesResult::mutable_remote_id() {
  
  // @@protoc_insertion_point(field_mutable:DiscoverServicesResult.remote_id)
  return remote_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DiscoverServicesResult::release_remote_id() {
  // @@protoc_insertion_point(field_release:DiscoverServicesResult.remote_id)
  
  return remote_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DiscoverServicesResult::set_allocated_remote_id(::std::string* remote_id) {
  if (remote_id != NULL) {
    
  } else {
    
  }
  remote_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_id);
  // @@protoc_insertion_point(field_set_allocated:DiscoverServicesResult.remote_id)
}

// repeated .BluetoothService services = 2;
inline int DiscoverServicesResult::services_size() const {
  return services_.size();
}
inline void DiscoverServicesResult::clear_services() {
  services_.Clear();
}
inline ::BluetoothService* DiscoverServicesResult::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:DiscoverServicesResult.services)
  return services_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::BluetoothService >*
DiscoverServicesResult::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:DiscoverServicesResult.services)
  return &services_;
}
inline const ::BluetoothService& DiscoverServicesResult::services(int index) const {
  // @@protoc_insertion_point(field_get:DiscoverServicesResult.services)
  return services_.Get(index);
}
inline ::BluetoothService* DiscoverServicesResult::add_services() {
  // @@protoc_insertion_point(field_add:DiscoverServicesResult.services)
  return services_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BluetoothService >&
DiscoverServicesResult::services() const {
  // @@protoc_insertion_point(field_list:DiscoverServicesResult.services)
  return services_;
}

// -------------------------------------------------------------------

// ReadCharacteristicRequest

// string remote_id = 1;
inline void ReadCharacteristicRequest::clear_remote_id() {
  remote_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadCharacteristicRequest::remote_id() const {
  // @@protoc_insertion_point(field_get:ReadCharacteristicRequest.remote_id)
  return remote_id_.GetNoArena();
}
inline void ReadCharacteristicRequest::set_remote_id(const ::std::string& value) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReadCharacteristicRequest.remote_id)
}
#if LANG_CXX11
inline void ReadCharacteristicRequest::set_remote_id(::std::string&& value) {
  
  remote_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReadCharacteristicRequest.remote_id)
}
#endif
inline void ReadCharacteristicRequest::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReadCharacteristicRequest.remote_id)
}
inline void ReadCharacteristicRequest::set_remote_id(const char* value, size_t size) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReadCharacteristicRequest.remote_id)
}
inline ::std::string* ReadCharacteristicRequest::mutable_remote_id() {
  
  // @@protoc_insertion_point(field_mutable:ReadCharacteristicRequest.remote_id)
  return remote_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadCharacteristicRequest::release_remote_id() {
  // @@protoc_insertion_point(field_release:ReadCharacteristicRequest.remote_id)
  
  return remote_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadCharacteristicRequest::set_allocated_remote_id(::std::string* remote_id) {
  if (remote_id != NULL) {
    
  } else {
    
  }
  remote_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_id);
  // @@protoc_insertion_point(field_set_allocated:ReadCharacteristicRequest.remote_id)
}

// string characteristic_uuid = 2;
inline void ReadCharacteristicRequest::clear_characteristic_uuid() {
  characteristic_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadCharacteristicRequest::characteristic_uuid() const {
  // @@protoc_insertion_point(field_get:ReadCharacteristicRequest.characteristic_uuid)
  return characteristic_uuid_.GetNoArena();
}
inline void ReadCharacteristicRequest::set_characteristic_uuid(const ::std::string& value) {
  
  characteristic_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReadCharacteristicRequest.characteristic_uuid)
}
#if LANG_CXX11
inline void ReadCharacteristicRequest::set_characteristic_uuid(::std::string&& value) {
  
  characteristic_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReadCharacteristicRequest.characteristic_uuid)
}
#endif
inline void ReadCharacteristicRequest::set_characteristic_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  characteristic_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReadCharacteristicRequest.characteristic_uuid)
}
inline void ReadCharacteristicRequest::set_characteristic_uuid(const char* value, size_t size) {
  
  characteristic_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReadCharacteristicRequest.characteristic_uuid)
}
inline ::std::string* ReadCharacteristicRequest::mutable_characteristic_uuid() {
  
  // @@protoc_insertion_point(field_mutable:ReadCharacteristicRequest.characteristic_uuid)
  return characteristic_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadCharacteristicRequest::release_characteristic_uuid() {
  // @@protoc_insertion_point(field_release:ReadCharacteristicRequest.characteristic_uuid)
  
  return characteristic_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadCharacteristicRequest::set_allocated_characteristic_uuid(::std::string* characteristic_uuid) {
  if (characteristic_uuid != NULL) {
    
  } else {
    
  }
  characteristic_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), characteristic_uuid);
  // @@protoc_insertion_point(field_set_allocated:ReadCharacteristicRequest.characteristic_uuid)
}

// string service_uuid = 3;
inline void ReadCharacteristicRequest::clear_service_uuid() {
  service_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadCharacteristicRequest::service_uuid() const {
  // @@protoc_insertion_point(field_get:ReadCharacteristicRequest.service_uuid)
  return service_uuid_.GetNoArena();
}
inline void ReadCharacteristicRequest::set_service_uuid(const ::std::string& value) {
  
  service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReadCharacteristicRequest.service_uuid)
}
#if LANG_CXX11
inline void ReadCharacteristicRequest::set_service_uuid(::std::string&& value) {
  
  service_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReadCharacteristicRequest.service_uuid)
}
#endif
inline void ReadCharacteristicRequest::set_service_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReadCharacteristicRequest.service_uuid)
}
inline void ReadCharacteristicRequest::set_service_uuid(const char* value, size_t size) {
  
  service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReadCharacteristicRequest.service_uuid)
}
inline ::std::string* ReadCharacteristicRequest::mutable_service_uuid() {
  
  // @@protoc_insertion_point(field_mutable:ReadCharacteristicRequest.service_uuid)
  return service_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadCharacteristicRequest::release_service_uuid() {
  // @@protoc_insertion_point(field_release:ReadCharacteristicRequest.service_uuid)
  
  return service_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadCharacteristicRequest::set_allocated_service_uuid(::std::string* service_uuid) {
  if (service_uuid != NULL) {
    
  } else {
    
  }
  service_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_uuid);
  // @@protoc_insertion_point(field_set_allocated:ReadCharacteristicRequest.service_uuid)
}

// string secondary_service_uuid = 4;
inline void ReadCharacteristicRequest::clear_secondary_service_uuid() {
  secondary_service_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadCharacteristicRequest::secondary_service_uuid() const {
  // @@protoc_insertion_point(field_get:ReadCharacteristicRequest.secondary_service_uuid)
  return secondary_service_uuid_.GetNoArena();
}
inline void ReadCharacteristicRequest::set_secondary_service_uuid(const ::std::string& value) {
  
  secondary_service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReadCharacteristicRequest.secondary_service_uuid)
}
#if LANG_CXX11
inline void ReadCharacteristicRequest::set_secondary_service_uuid(::std::string&& value) {
  
  secondary_service_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReadCharacteristicRequest.secondary_service_uuid)
}
#endif
inline void ReadCharacteristicRequest::set_secondary_service_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  secondary_service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReadCharacteristicRequest.secondary_service_uuid)
}
inline void ReadCharacteristicRequest::set_secondary_service_uuid(const char* value, size_t size) {
  
  secondary_service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReadCharacteristicRequest.secondary_service_uuid)
}
inline ::std::string* ReadCharacteristicRequest::mutable_secondary_service_uuid() {
  
  // @@protoc_insertion_point(field_mutable:ReadCharacteristicRequest.secondary_service_uuid)
  return secondary_service_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadCharacteristicRequest::release_secondary_service_uuid() {
  // @@protoc_insertion_point(field_release:ReadCharacteristicRequest.secondary_service_uuid)
  
  return secondary_service_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadCharacteristicRequest::set_allocated_secondary_service_uuid(::std::string* secondary_service_uuid) {
  if (secondary_service_uuid != NULL) {
    
  } else {
    
  }
  secondary_service_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secondary_service_uuid);
  // @@protoc_insertion_point(field_set_allocated:ReadCharacteristicRequest.secondary_service_uuid)
}

// -------------------------------------------------------------------

// ReadCharacteristicResponse

// string remote_id = 1;
inline void ReadCharacteristicResponse::clear_remote_id() {
  remote_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadCharacteristicResponse::remote_id() const {
  // @@protoc_insertion_point(field_get:ReadCharacteristicResponse.remote_id)
  return remote_id_.GetNoArena();
}
inline void ReadCharacteristicResponse::set_remote_id(const ::std::string& value) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReadCharacteristicResponse.remote_id)
}
#if LANG_CXX11
inline void ReadCharacteristicResponse::set_remote_id(::std::string&& value) {
  
  remote_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReadCharacteristicResponse.remote_id)
}
#endif
inline void ReadCharacteristicResponse::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReadCharacteristicResponse.remote_id)
}
inline void ReadCharacteristicResponse::set_remote_id(const char* value, size_t size) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReadCharacteristicResponse.remote_id)
}
inline ::std::string* ReadCharacteristicResponse::mutable_remote_id() {
  
  // @@protoc_insertion_point(field_mutable:ReadCharacteristicResponse.remote_id)
  return remote_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadCharacteristicResponse::release_remote_id() {
  // @@protoc_insertion_point(field_release:ReadCharacteristicResponse.remote_id)
  
  return remote_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadCharacteristicResponse::set_allocated_remote_id(::std::string* remote_id) {
  if (remote_id != NULL) {
    
  } else {
    
  }
  remote_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_id);
  // @@protoc_insertion_point(field_set_allocated:ReadCharacteristicResponse.remote_id)
}

// .BluetoothCharacteristic characteristic = 2;
inline bool ReadCharacteristicResponse::has_characteristic() const {
  return this != internal_default_instance() && characteristic_ != NULL;
}
inline void ReadCharacteristicResponse::clear_characteristic() {
  if (GetArenaNoVirtual() == NULL && characteristic_ != NULL) {
    delete characteristic_;
  }
  characteristic_ = NULL;
}
inline const ::BluetoothCharacteristic& ReadCharacteristicResponse::_internal_characteristic() const {
  return *characteristic_;
}
inline const ::BluetoothCharacteristic& ReadCharacteristicResponse::characteristic() const {
  const ::BluetoothCharacteristic* p = characteristic_;
  // @@protoc_insertion_point(field_get:ReadCharacteristicResponse.characteristic)
  return p != NULL ? *p : *reinterpret_cast<const ::BluetoothCharacteristic*>(
      &::_BluetoothCharacteristic_default_instance_);
}
inline ::BluetoothCharacteristic* ReadCharacteristicResponse::release_characteristic() {
  // @@protoc_insertion_point(field_release:ReadCharacteristicResponse.characteristic)
  
  ::BluetoothCharacteristic* temp = characteristic_;
  characteristic_ = NULL;
  return temp;
}
inline ::BluetoothCharacteristic* ReadCharacteristicResponse::mutable_characteristic() {
  
  if (characteristic_ == NULL) {
    auto* p = CreateMaybeMessage<::BluetoothCharacteristic>(GetArenaNoVirtual());
    characteristic_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ReadCharacteristicResponse.characteristic)
  return characteristic_;
}
inline void ReadCharacteristicResponse::set_allocated_characteristic(::BluetoothCharacteristic* characteristic) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete characteristic_;
  }
  if (characteristic) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      characteristic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, characteristic, submessage_arena);
    }
    
  } else {
    
  }
  characteristic_ = characteristic;
  // @@protoc_insertion_point(field_set_allocated:ReadCharacteristicResponse.characteristic)
}

// -------------------------------------------------------------------

// ReadDescriptorRequest

// string remote_id = 1;
inline void ReadDescriptorRequest::clear_remote_id() {
  remote_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadDescriptorRequest::remote_id() const {
  // @@protoc_insertion_point(field_get:ReadDescriptorRequest.remote_id)
  return remote_id_.GetNoArena();
}
inline void ReadDescriptorRequest::set_remote_id(const ::std::string& value) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReadDescriptorRequest.remote_id)
}
#if LANG_CXX11
inline void ReadDescriptorRequest::set_remote_id(::std::string&& value) {
  
  remote_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReadDescriptorRequest.remote_id)
}
#endif
inline void ReadDescriptorRequest::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReadDescriptorRequest.remote_id)
}
inline void ReadDescriptorRequest::set_remote_id(const char* value, size_t size) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReadDescriptorRequest.remote_id)
}
inline ::std::string* ReadDescriptorRequest::mutable_remote_id() {
  
  // @@protoc_insertion_point(field_mutable:ReadDescriptorRequest.remote_id)
  return remote_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadDescriptorRequest::release_remote_id() {
  // @@protoc_insertion_point(field_release:ReadDescriptorRequest.remote_id)
  
  return remote_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadDescriptorRequest::set_allocated_remote_id(::std::string* remote_id) {
  if (remote_id != NULL) {
    
  } else {
    
  }
  remote_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_id);
  // @@protoc_insertion_point(field_set_allocated:ReadDescriptorRequest.remote_id)
}

// string descriptor_uuid = 2;
inline void ReadDescriptorRequest::clear_descriptor_uuid() {
  descriptor_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadDescriptorRequest::descriptor_uuid() const {
  // @@protoc_insertion_point(field_get:ReadDescriptorRequest.descriptor_uuid)
  return descriptor_uuid_.GetNoArena();
}
inline void ReadDescriptorRequest::set_descriptor_uuid(const ::std::string& value) {
  
  descriptor_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReadDescriptorRequest.descriptor_uuid)
}
#if LANG_CXX11
inline void ReadDescriptorRequest::set_descriptor_uuid(::std::string&& value) {
  
  descriptor_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReadDescriptorRequest.descriptor_uuid)
}
#endif
inline void ReadDescriptorRequest::set_descriptor_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  descriptor_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReadDescriptorRequest.descriptor_uuid)
}
inline void ReadDescriptorRequest::set_descriptor_uuid(const char* value, size_t size) {
  
  descriptor_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReadDescriptorRequest.descriptor_uuid)
}
inline ::std::string* ReadDescriptorRequest::mutable_descriptor_uuid() {
  
  // @@protoc_insertion_point(field_mutable:ReadDescriptorRequest.descriptor_uuid)
  return descriptor_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadDescriptorRequest::release_descriptor_uuid() {
  // @@protoc_insertion_point(field_release:ReadDescriptorRequest.descriptor_uuid)
  
  return descriptor_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadDescriptorRequest::set_allocated_descriptor_uuid(::std::string* descriptor_uuid) {
  if (descriptor_uuid != NULL) {
    
  } else {
    
  }
  descriptor_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), descriptor_uuid);
  // @@protoc_insertion_point(field_set_allocated:ReadDescriptorRequest.descriptor_uuid)
}

// string service_uuid = 3;
inline void ReadDescriptorRequest::clear_service_uuid() {
  service_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadDescriptorRequest::service_uuid() const {
  // @@protoc_insertion_point(field_get:ReadDescriptorRequest.service_uuid)
  return service_uuid_.GetNoArena();
}
inline void ReadDescriptorRequest::set_service_uuid(const ::std::string& value) {
  
  service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReadDescriptorRequest.service_uuid)
}
#if LANG_CXX11
inline void ReadDescriptorRequest::set_service_uuid(::std::string&& value) {
  
  service_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReadDescriptorRequest.service_uuid)
}
#endif
inline void ReadDescriptorRequest::set_service_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReadDescriptorRequest.service_uuid)
}
inline void ReadDescriptorRequest::set_service_uuid(const char* value, size_t size) {
  
  service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReadDescriptorRequest.service_uuid)
}
inline ::std::string* ReadDescriptorRequest::mutable_service_uuid() {
  
  // @@protoc_insertion_point(field_mutable:ReadDescriptorRequest.service_uuid)
  return service_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadDescriptorRequest::release_service_uuid() {
  // @@protoc_insertion_point(field_release:ReadDescriptorRequest.service_uuid)
  
  return service_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadDescriptorRequest::set_allocated_service_uuid(::std::string* service_uuid) {
  if (service_uuid != NULL) {
    
  } else {
    
  }
  service_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_uuid);
  // @@protoc_insertion_point(field_set_allocated:ReadDescriptorRequest.service_uuid)
}

// string secondary_service_uuid = 4;
inline void ReadDescriptorRequest::clear_secondary_service_uuid() {
  secondary_service_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadDescriptorRequest::secondary_service_uuid() const {
  // @@protoc_insertion_point(field_get:ReadDescriptorRequest.secondary_service_uuid)
  return secondary_service_uuid_.GetNoArena();
}
inline void ReadDescriptorRequest::set_secondary_service_uuid(const ::std::string& value) {
  
  secondary_service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReadDescriptorRequest.secondary_service_uuid)
}
#if LANG_CXX11
inline void ReadDescriptorRequest::set_secondary_service_uuid(::std::string&& value) {
  
  secondary_service_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReadDescriptorRequest.secondary_service_uuid)
}
#endif
inline void ReadDescriptorRequest::set_secondary_service_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  secondary_service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReadDescriptorRequest.secondary_service_uuid)
}
inline void ReadDescriptorRequest::set_secondary_service_uuid(const char* value, size_t size) {
  
  secondary_service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReadDescriptorRequest.secondary_service_uuid)
}
inline ::std::string* ReadDescriptorRequest::mutable_secondary_service_uuid() {
  
  // @@protoc_insertion_point(field_mutable:ReadDescriptorRequest.secondary_service_uuid)
  return secondary_service_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadDescriptorRequest::release_secondary_service_uuid() {
  // @@protoc_insertion_point(field_release:ReadDescriptorRequest.secondary_service_uuid)
  
  return secondary_service_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadDescriptorRequest::set_allocated_secondary_service_uuid(::std::string* secondary_service_uuid) {
  if (secondary_service_uuid != NULL) {
    
  } else {
    
  }
  secondary_service_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secondary_service_uuid);
  // @@protoc_insertion_point(field_set_allocated:ReadDescriptorRequest.secondary_service_uuid)
}

// string characteristic_uuid = 5;
inline void ReadDescriptorRequest::clear_characteristic_uuid() {
  characteristic_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadDescriptorRequest::characteristic_uuid() const {
  // @@protoc_insertion_point(field_get:ReadDescriptorRequest.characteristic_uuid)
  return characteristic_uuid_.GetNoArena();
}
inline void ReadDescriptorRequest::set_characteristic_uuid(const ::std::string& value) {
  
  characteristic_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReadDescriptorRequest.characteristic_uuid)
}
#if LANG_CXX11
inline void ReadDescriptorRequest::set_characteristic_uuid(::std::string&& value) {
  
  characteristic_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReadDescriptorRequest.characteristic_uuid)
}
#endif
inline void ReadDescriptorRequest::set_characteristic_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  characteristic_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReadDescriptorRequest.characteristic_uuid)
}
inline void ReadDescriptorRequest::set_characteristic_uuid(const char* value, size_t size) {
  
  characteristic_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReadDescriptorRequest.characteristic_uuid)
}
inline ::std::string* ReadDescriptorRequest::mutable_characteristic_uuid() {
  
  // @@protoc_insertion_point(field_mutable:ReadDescriptorRequest.characteristic_uuid)
  return characteristic_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadDescriptorRequest::release_characteristic_uuid() {
  // @@protoc_insertion_point(field_release:ReadDescriptorRequest.characteristic_uuid)
  
  return characteristic_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadDescriptorRequest::set_allocated_characteristic_uuid(::std::string* characteristic_uuid) {
  if (characteristic_uuid != NULL) {
    
  } else {
    
  }
  characteristic_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), characteristic_uuid);
  // @@protoc_insertion_point(field_set_allocated:ReadDescriptorRequest.characteristic_uuid)
}

// -------------------------------------------------------------------

// ReadDescriptorResponse

// .ReadDescriptorRequest request = 1;
inline bool ReadDescriptorResponse::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
inline void ReadDescriptorResponse::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) {
    delete request_;
  }
  request_ = NULL;
}
inline const ::ReadDescriptorRequest& ReadDescriptorResponse::_internal_request() const {
  return *request_;
}
inline const ::ReadDescriptorRequest& ReadDescriptorResponse::request() const {
  const ::ReadDescriptorRequest* p = request_;
  // @@protoc_insertion_point(field_get:ReadDescriptorResponse.request)
  return p != NULL ? *p : *reinterpret_cast<const ::ReadDescriptorRequest*>(
      &::_ReadDescriptorRequest_default_instance_);
}
inline ::ReadDescriptorRequest* ReadDescriptorResponse::release_request() {
  // @@protoc_insertion_point(field_release:ReadDescriptorResponse.request)
  
  ::ReadDescriptorRequest* temp = request_;
  request_ = NULL;
  return temp;
}
inline ::ReadDescriptorRequest* ReadDescriptorResponse::mutable_request() {
  
  if (request_ == NULL) {
    auto* p = CreateMaybeMessage<::ReadDescriptorRequest>(GetArenaNoVirtual());
    request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ReadDescriptorResponse.request)
  return request_;
}
inline void ReadDescriptorResponse::set_allocated_request(::ReadDescriptorRequest* request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete request_;
  }
  if (request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:ReadDescriptorResponse.request)
}

// bytes value = 2;
inline void ReadDescriptorResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadDescriptorResponse::value() const {
  // @@protoc_insertion_point(field_get:ReadDescriptorResponse.value)
  return value_.GetNoArena();
}
inline void ReadDescriptorResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReadDescriptorResponse.value)
}
#if LANG_CXX11
inline void ReadDescriptorResponse::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReadDescriptorResponse.value)
}
#endif
inline void ReadDescriptorResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReadDescriptorResponse.value)
}
inline void ReadDescriptorResponse::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReadDescriptorResponse.value)
}
inline ::std::string* ReadDescriptorResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:ReadDescriptorResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadDescriptorResponse::release_value() {
  // @@protoc_insertion_point(field_release:ReadDescriptorResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadDescriptorResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:ReadDescriptorResponse.value)
}

// -------------------------------------------------------------------

// WriteCharacteristicRequest

// string remote_id = 1;
inline void WriteCharacteristicRequest::clear_remote_id() {
  remote_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteCharacteristicRequest::remote_id() const {
  // @@protoc_insertion_point(field_get:WriteCharacteristicRequest.remote_id)
  return remote_id_.GetNoArena();
}
inline void WriteCharacteristicRequest::set_remote_id(const ::std::string& value) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WriteCharacteristicRequest.remote_id)
}
#if LANG_CXX11
inline void WriteCharacteristicRequest::set_remote_id(::std::string&& value) {
  
  remote_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WriteCharacteristicRequest.remote_id)
}
#endif
inline void WriteCharacteristicRequest::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WriteCharacteristicRequest.remote_id)
}
inline void WriteCharacteristicRequest::set_remote_id(const char* value, size_t size) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WriteCharacteristicRequest.remote_id)
}
inline ::std::string* WriteCharacteristicRequest::mutable_remote_id() {
  
  // @@protoc_insertion_point(field_mutable:WriteCharacteristicRequest.remote_id)
  return remote_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteCharacteristicRequest::release_remote_id() {
  // @@protoc_insertion_point(field_release:WriteCharacteristicRequest.remote_id)
  
  return remote_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteCharacteristicRequest::set_allocated_remote_id(::std::string* remote_id) {
  if (remote_id != NULL) {
    
  } else {
    
  }
  remote_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_id);
  // @@protoc_insertion_point(field_set_allocated:WriteCharacteristicRequest.remote_id)
}

// string characteristic_uuid = 2;
inline void WriteCharacteristicRequest::clear_characteristic_uuid() {
  characteristic_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteCharacteristicRequest::characteristic_uuid() const {
  // @@protoc_insertion_point(field_get:WriteCharacteristicRequest.characteristic_uuid)
  return characteristic_uuid_.GetNoArena();
}
inline void WriteCharacteristicRequest::set_characteristic_uuid(const ::std::string& value) {
  
  characteristic_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WriteCharacteristicRequest.characteristic_uuid)
}
#if LANG_CXX11
inline void WriteCharacteristicRequest::set_characteristic_uuid(::std::string&& value) {
  
  characteristic_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WriteCharacteristicRequest.characteristic_uuid)
}
#endif
inline void WriteCharacteristicRequest::set_characteristic_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  characteristic_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WriteCharacteristicRequest.characteristic_uuid)
}
inline void WriteCharacteristicRequest::set_characteristic_uuid(const char* value, size_t size) {
  
  characteristic_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WriteCharacteristicRequest.characteristic_uuid)
}
inline ::std::string* WriteCharacteristicRequest::mutable_characteristic_uuid() {
  
  // @@protoc_insertion_point(field_mutable:WriteCharacteristicRequest.characteristic_uuid)
  return characteristic_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteCharacteristicRequest::release_characteristic_uuid() {
  // @@protoc_insertion_point(field_release:WriteCharacteristicRequest.characteristic_uuid)
  
  return characteristic_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteCharacteristicRequest::set_allocated_characteristic_uuid(::std::string* characteristic_uuid) {
  if (characteristic_uuid != NULL) {
    
  } else {
    
  }
  characteristic_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), characteristic_uuid);
  // @@protoc_insertion_point(field_set_allocated:WriteCharacteristicRequest.characteristic_uuid)
}

// string service_uuid = 3;
inline void WriteCharacteristicRequest::clear_service_uuid() {
  service_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteCharacteristicRequest::service_uuid() const {
  // @@protoc_insertion_point(field_get:WriteCharacteristicRequest.service_uuid)
  return service_uuid_.GetNoArena();
}
inline void WriteCharacteristicRequest::set_service_uuid(const ::std::string& value) {
  
  service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WriteCharacteristicRequest.service_uuid)
}
#if LANG_CXX11
inline void WriteCharacteristicRequest::set_service_uuid(::std::string&& value) {
  
  service_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WriteCharacteristicRequest.service_uuid)
}
#endif
inline void WriteCharacteristicRequest::set_service_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WriteCharacteristicRequest.service_uuid)
}
inline void WriteCharacteristicRequest::set_service_uuid(const char* value, size_t size) {
  
  service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WriteCharacteristicRequest.service_uuid)
}
inline ::std::string* WriteCharacteristicRequest::mutable_service_uuid() {
  
  // @@protoc_insertion_point(field_mutable:WriteCharacteristicRequest.service_uuid)
  return service_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteCharacteristicRequest::release_service_uuid() {
  // @@protoc_insertion_point(field_release:WriteCharacteristicRequest.service_uuid)
  
  return service_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteCharacteristicRequest::set_allocated_service_uuid(::std::string* service_uuid) {
  if (service_uuid != NULL) {
    
  } else {
    
  }
  service_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_uuid);
  // @@protoc_insertion_point(field_set_allocated:WriteCharacteristicRequest.service_uuid)
}

// string secondary_service_uuid = 4;
inline void WriteCharacteristicRequest::clear_secondary_service_uuid() {
  secondary_service_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteCharacteristicRequest::secondary_service_uuid() const {
  // @@protoc_insertion_point(field_get:WriteCharacteristicRequest.secondary_service_uuid)
  return secondary_service_uuid_.GetNoArena();
}
inline void WriteCharacteristicRequest::set_secondary_service_uuid(const ::std::string& value) {
  
  secondary_service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WriteCharacteristicRequest.secondary_service_uuid)
}
#if LANG_CXX11
inline void WriteCharacteristicRequest::set_secondary_service_uuid(::std::string&& value) {
  
  secondary_service_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WriteCharacteristicRequest.secondary_service_uuid)
}
#endif
inline void WriteCharacteristicRequest::set_secondary_service_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  secondary_service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WriteCharacteristicRequest.secondary_service_uuid)
}
inline void WriteCharacteristicRequest::set_secondary_service_uuid(const char* value, size_t size) {
  
  secondary_service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WriteCharacteristicRequest.secondary_service_uuid)
}
inline ::std::string* WriteCharacteristicRequest::mutable_secondary_service_uuid() {
  
  // @@protoc_insertion_point(field_mutable:WriteCharacteristicRequest.secondary_service_uuid)
  return secondary_service_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteCharacteristicRequest::release_secondary_service_uuid() {
  // @@protoc_insertion_point(field_release:WriteCharacteristicRequest.secondary_service_uuid)
  
  return secondary_service_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteCharacteristicRequest::set_allocated_secondary_service_uuid(::std::string* secondary_service_uuid) {
  if (secondary_service_uuid != NULL) {
    
  } else {
    
  }
  secondary_service_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secondary_service_uuid);
  // @@protoc_insertion_point(field_set_allocated:WriteCharacteristicRequest.secondary_service_uuid)
}

// .WriteCharacteristicRequest.WriteType write_type = 5;
inline void WriteCharacteristicRequest::clear_write_type() {
  write_type_ = 0;
}
inline ::WriteCharacteristicRequest_WriteType WriteCharacteristicRequest::write_type() const {
  // @@protoc_insertion_point(field_get:WriteCharacteristicRequest.write_type)
  return static_cast< ::WriteCharacteristicRequest_WriteType >(write_type_);
}
inline void WriteCharacteristicRequest::set_write_type(::WriteCharacteristicRequest_WriteType value) {
  
  write_type_ = value;
  // @@protoc_insertion_point(field_set:WriteCharacteristicRequest.write_type)
}

// bytes value = 6;
inline void WriteCharacteristicRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteCharacteristicRequest::value() const {
  // @@protoc_insertion_point(field_get:WriteCharacteristicRequest.value)
  return value_.GetNoArena();
}
inline void WriteCharacteristicRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WriteCharacteristicRequest.value)
}
#if LANG_CXX11
inline void WriteCharacteristicRequest::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WriteCharacteristicRequest.value)
}
#endif
inline void WriteCharacteristicRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WriteCharacteristicRequest.value)
}
inline void WriteCharacteristicRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WriteCharacteristicRequest.value)
}
inline ::std::string* WriteCharacteristicRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:WriteCharacteristicRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteCharacteristicRequest::release_value() {
  // @@protoc_insertion_point(field_release:WriteCharacteristicRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteCharacteristicRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:WriteCharacteristicRequest.value)
}

// -------------------------------------------------------------------

// WriteCharacteristicResponse

// .WriteCharacteristicRequest request = 1;
inline bool WriteCharacteristicResponse::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
inline void WriteCharacteristicResponse::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) {
    delete request_;
  }
  request_ = NULL;
}
inline const ::WriteCharacteristicRequest& WriteCharacteristicResponse::_internal_request() const {
  return *request_;
}
inline const ::WriteCharacteristicRequest& WriteCharacteristicResponse::request() const {
  const ::WriteCharacteristicRequest* p = request_;
  // @@protoc_insertion_point(field_get:WriteCharacteristicResponse.request)
  return p != NULL ? *p : *reinterpret_cast<const ::WriteCharacteristicRequest*>(
      &::_WriteCharacteristicRequest_default_instance_);
}
inline ::WriteCharacteristicRequest* WriteCharacteristicResponse::release_request() {
  // @@protoc_insertion_point(field_release:WriteCharacteristicResponse.request)
  
  ::WriteCharacteristicRequest* temp = request_;
  request_ = NULL;
  return temp;
}
inline ::WriteCharacteristicRequest* WriteCharacteristicResponse::mutable_request() {
  
  if (request_ == NULL) {
    auto* p = CreateMaybeMessage<::WriteCharacteristicRequest>(GetArenaNoVirtual());
    request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:WriteCharacteristicResponse.request)
  return request_;
}
inline void WriteCharacteristicResponse::set_allocated_request(::WriteCharacteristicRequest* request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete request_;
  }
  if (request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:WriteCharacteristicResponse.request)
}

// bool success = 2;
inline void WriteCharacteristicResponse::clear_success() {
  success_ = false;
}
inline bool WriteCharacteristicResponse::success() const {
  // @@protoc_insertion_point(field_get:WriteCharacteristicResponse.success)
  return success_;
}
inline void WriteCharacteristicResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:WriteCharacteristicResponse.success)
}

// -------------------------------------------------------------------

// WriteDescriptorRequest

// string remote_id = 1;
inline void WriteDescriptorRequest::clear_remote_id() {
  remote_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteDescriptorRequest::remote_id() const {
  // @@protoc_insertion_point(field_get:WriteDescriptorRequest.remote_id)
  return remote_id_.GetNoArena();
}
inline void WriteDescriptorRequest::set_remote_id(const ::std::string& value) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WriteDescriptorRequest.remote_id)
}
#if LANG_CXX11
inline void WriteDescriptorRequest::set_remote_id(::std::string&& value) {
  
  remote_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WriteDescriptorRequest.remote_id)
}
#endif
inline void WriteDescriptorRequest::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WriteDescriptorRequest.remote_id)
}
inline void WriteDescriptorRequest::set_remote_id(const char* value, size_t size) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WriteDescriptorRequest.remote_id)
}
inline ::std::string* WriteDescriptorRequest::mutable_remote_id() {
  
  // @@protoc_insertion_point(field_mutable:WriteDescriptorRequest.remote_id)
  return remote_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteDescriptorRequest::release_remote_id() {
  // @@protoc_insertion_point(field_release:WriteDescriptorRequest.remote_id)
  
  return remote_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteDescriptorRequest::set_allocated_remote_id(::std::string* remote_id) {
  if (remote_id != NULL) {
    
  } else {
    
  }
  remote_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_id);
  // @@protoc_insertion_point(field_set_allocated:WriteDescriptorRequest.remote_id)
}

// string descriptor_uuid = 2;
inline void WriteDescriptorRequest::clear_descriptor_uuid() {
  descriptor_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteDescriptorRequest::descriptor_uuid() const {
  // @@protoc_insertion_point(field_get:WriteDescriptorRequest.descriptor_uuid)
  return descriptor_uuid_.GetNoArena();
}
inline void WriteDescriptorRequest::set_descriptor_uuid(const ::std::string& value) {
  
  descriptor_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WriteDescriptorRequest.descriptor_uuid)
}
#if LANG_CXX11
inline void WriteDescriptorRequest::set_descriptor_uuid(::std::string&& value) {
  
  descriptor_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WriteDescriptorRequest.descriptor_uuid)
}
#endif
inline void WriteDescriptorRequest::set_descriptor_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  descriptor_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WriteDescriptorRequest.descriptor_uuid)
}
inline void WriteDescriptorRequest::set_descriptor_uuid(const char* value, size_t size) {
  
  descriptor_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WriteDescriptorRequest.descriptor_uuid)
}
inline ::std::string* WriteDescriptorRequest::mutable_descriptor_uuid() {
  
  // @@protoc_insertion_point(field_mutable:WriteDescriptorRequest.descriptor_uuid)
  return descriptor_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteDescriptorRequest::release_descriptor_uuid() {
  // @@protoc_insertion_point(field_release:WriteDescriptorRequest.descriptor_uuid)
  
  return descriptor_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteDescriptorRequest::set_allocated_descriptor_uuid(::std::string* descriptor_uuid) {
  if (descriptor_uuid != NULL) {
    
  } else {
    
  }
  descriptor_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), descriptor_uuid);
  // @@protoc_insertion_point(field_set_allocated:WriteDescriptorRequest.descriptor_uuid)
}

// string service_uuid = 3;
inline void WriteDescriptorRequest::clear_service_uuid() {
  service_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteDescriptorRequest::service_uuid() const {
  // @@protoc_insertion_point(field_get:WriteDescriptorRequest.service_uuid)
  return service_uuid_.GetNoArena();
}
inline void WriteDescriptorRequest::set_service_uuid(const ::std::string& value) {
  
  service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WriteDescriptorRequest.service_uuid)
}
#if LANG_CXX11
inline void WriteDescriptorRequest::set_service_uuid(::std::string&& value) {
  
  service_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WriteDescriptorRequest.service_uuid)
}
#endif
inline void WriteDescriptorRequest::set_service_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WriteDescriptorRequest.service_uuid)
}
inline void WriteDescriptorRequest::set_service_uuid(const char* value, size_t size) {
  
  service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WriteDescriptorRequest.service_uuid)
}
inline ::std::string* WriteDescriptorRequest::mutable_service_uuid() {
  
  // @@protoc_insertion_point(field_mutable:WriteDescriptorRequest.service_uuid)
  return service_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteDescriptorRequest::release_service_uuid() {
  // @@protoc_insertion_point(field_release:WriteDescriptorRequest.service_uuid)
  
  return service_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteDescriptorRequest::set_allocated_service_uuid(::std::string* service_uuid) {
  if (service_uuid != NULL) {
    
  } else {
    
  }
  service_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_uuid);
  // @@protoc_insertion_point(field_set_allocated:WriteDescriptorRequest.service_uuid)
}

// string secondary_service_uuid = 4;
inline void WriteDescriptorRequest::clear_secondary_service_uuid() {
  secondary_service_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteDescriptorRequest::secondary_service_uuid() const {
  // @@protoc_insertion_point(field_get:WriteDescriptorRequest.secondary_service_uuid)
  return secondary_service_uuid_.GetNoArena();
}
inline void WriteDescriptorRequest::set_secondary_service_uuid(const ::std::string& value) {
  
  secondary_service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WriteDescriptorRequest.secondary_service_uuid)
}
#if LANG_CXX11
inline void WriteDescriptorRequest::set_secondary_service_uuid(::std::string&& value) {
  
  secondary_service_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WriteDescriptorRequest.secondary_service_uuid)
}
#endif
inline void WriteDescriptorRequest::set_secondary_service_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  secondary_service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WriteDescriptorRequest.secondary_service_uuid)
}
inline void WriteDescriptorRequest::set_secondary_service_uuid(const char* value, size_t size) {
  
  secondary_service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WriteDescriptorRequest.secondary_service_uuid)
}
inline ::std::string* WriteDescriptorRequest::mutable_secondary_service_uuid() {
  
  // @@protoc_insertion_point(field_mutable:WriteDescriptorRequest.secondary_service_uuid)
  return secondary_service_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteDescriptorRequest::release_secondary_service_uuid() {
  // @@protoc_insertion_point(field_release:WriteDescriptorRequest.secondary_service_uuid)
  
  return secondary_service_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteDescriptorRequest::set_allocated_secondary_service_uuid(::std::string* secondary_service_uuid) {
  if (secondary_service_uuid != NULL) {
    
  } else {
    
  }
  secondary_service_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secondary_service_uuid);
  // @@protoc_insertion_point(field_set_allocated:WriteDescriptorRequest.secondary_service_uuid)
}

// string characteristic_uuid = 5;
inline void WriteDescriptorRequest::clear_characteristic_uuid() {
  characteristic_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteDescriptorRequest::characteristic_uuid() const {
  // @@protoc_insertion_point(field_get:WriteDescriptorRequest.characteristic_uuid)
  return characteristic_uuid_.GetNoArena();
}
inline void WriteDescriptorRequest::set_characteristic_uuid(const ::std::string& value) {
  
  characteristic_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WriteDescriptorRequest.characteristic_uuid)
}
#if LANG_CXX11
inline void WriteDescriptorRequest::set_characteristic_uuid(::std::string&& value) {
  
  characteristic_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WriteDescriptorRequest.characteristic_uuid)
}
#endif
inline void WriteDescriptorRequest::set_characteristic_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  characteristic_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WriteDescriptorRequest.characteristic_uuid)
}
inline void WriteDescriptorRequest::set_characteristic_uuid(const char* value, size_t size) {
  
  characteristic_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WriteDescriptorRequest.characteristic_uuid)
}
inline ::std::string* WriteDescriptorRequest::mutable_characteristic_uuid() {
  
  // @@protoc_insertion_point(field_mutable:WriteDescriptorRequest.characteristic_uuid)
  return characteristic_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteDescriptorRequest::release_characteristic_uuid() {
  // @@protoc_insertion_point(field_release:WriteDescriptorRequest.characteristic_uuid)
  
  return characteristic_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteDescriptorRequest::set_allocated_characteristic_uuid(::std::string* characteristic_uuid) {
  if (characteristic_uuid != NULL) {
    
  } else {
    
  }
  characteristic_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), characteristic_uuid);
  // @@protoc_insertion_point(field_set_allocated:WriteDescriptorRequest.characteristic_uuid)
}

// bytes value = 6;
inline void WriteDescriptorRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteDescriptorRequest::value() const {
  // @@protoc_insertion_point(field_get:WriteDescriptorRequest.value)
  return value_.GetNoArena();
}
inline void WriteDescriptorRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WriteDescriptorRequest.value)
}
#if LANG_CXX11
inline void WriteDescriptorRequest::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WriteDescriptorRequest.value)
}
#endif
inline void WriteDescriptorRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WriteDescriptorRequest.value)
}
inline void WriteDescriptorRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WriteDescriptorRequest.value)
}
inline ::std::string* WriteDescriptorRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:WriteDescriptorRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteDescriptorRequest::release_value() {
  // @@protoc_insertion_point(field_release:WriteDescriptorRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteDescriptorRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:WriteDescriptorRequest.value)
}

// -------------------------------------------------------------------

// WriteDescriptorResponse

// .WriteDescriptorRequest request = 1;
inline bool WriteDescriptorResponse::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
inline void WriteDescriptorResponse::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) {
    delete request_;
  }
  request_ = NULL;
}
inline const ::WriteDescriptorRequest& WriteDescriptorResponse::_internal_request() const {
  return *request_;
}
inline const ::WriteDescriptorRequest& WriteDescriptorResponse::request() const {
  const ::WriteDescriptorRequest* p = request_;
  // @@protoc_insertion_point(field_get:WriteDescriptorResponse.request)
  return p != NULL ? *p : *reinterpret_cast<const ::WriteDescriptorRequest*>(
      &::_WriteDescriptorRequest_default_instance_);
}
inline ::WriteDescriptorRequest* WriteDescriptorResponse::release_request() {
  // @@protoc_insertion_point(field_release:WriteDescriptorResponse.request)
  
  ::WriteDescriptorRequest* temp = request_;
  request_ = NULL;
  return temp;
}
inline ::WriteDescriptorRequest* WriteDescriptorResponse::mutable_request() {
  
  if (request_ == NULL) {
    auto* p = CreateMaybeMessage<::WriteDescriptorRequest>(GetArenaNoVirtual());
    request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:WriteDescriptorResponse.request)
  return request_;
}
inline void WriteDescriptorResponse::set_allocated_request(::WriteDescriptorRequest* request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete request_;
  }
  if (request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:WriteDescriptorResponse.request)
}

// bool success = 2;
inline void WriteDescriptorResponse::clear_success() {
  success_ = false;
}
inline bool WriteDescriptorResponse::success() const {
  // @@protoc_insertion_point(field_get:WriteDescriptorResponse.success)
  return success_;
}
inline void WriteDescriptorResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:WriteDescriptorResponse.success)
}

// -------------------------------------------------------------------

// SetNotificationRequest

// string remote_id = 1;
inline void SetNotificationRequest::clear_remote_id() {
  remote_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNotificationRequest::remote_id() const {
  // @@protoc_insertion_point(field_get:SetNotificationRequest.remote_id)
  return remote_id_.GetNoArena();
}
inline void SetNotificationRequest::set_remote_id(const ::std::string& value) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SetNotificationRequest.remote_id)
}
#if LANG_CXX11
inline void SetNotificationRequest::set_remote_id(::std::string&& value) {
  
  remote_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SetNotificationRequest.remote_id)
}
#endif
inline void SetNotificationRequest::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SetNotificationRequest.remote_id)
}
inline void SetNotificationRequest::set_remote_id(const char* value, size_t size) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SetNotificationRequest.remote_id)
}
inline ::std::string* SetNotificationRequest::mutable_remote_id() {
  
  // @@protoc_insertion_point(field_mutable:SetNotificationRequest.remote_id)
  return remote_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNotificationRequest::release_remote_id() {
  // @@protoc_insertion_point(field_release:SetNotificationRequest.remote_id)
  
  return remote_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNotificationRequest::set_allocated_remote_id(::std::string* remote_id) {
  if (remote_id != NULL) {
    
  } else {
    
  }
  remote_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_id);
  // @@protoc_insertion_point(field_set_allocated:SetNotificationRequest.remote_id)
}

// string service_uuid = 2;
inline void SetNotificationRequest::clear_service_uuid() {
  service_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNotificationRequest::service_uuid() const {
  // @@protoc_insertion_point(field_get:SetNotificationRequest.service_uuid)
  return service_uuid_.GetNoArena();
}
inline void SetNotificationRequest::set_service_uuid(const ::std::string& value) {
  
  service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SetNotificationRequest.service_uuid)
}
#if LANG_CXX11
inline void SetNotificationRequest::set_service_uuid(::std::string&& value) {
  
  service_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SetNotificationRequest.service_uuid)
}
#endif
inline void SetNotificationRequest::set_service_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SetNotificationRequest.service_uuid)
}
inline void SetNotificationRequest::set_service_uuid(const char* value, size_t size) {
  
  service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SetNotificationRequest.service_uuid)
}
inline ::std::string* SetNotificationRequest::mutable_service_uuid() {
  
  // @@protoc_insertion_point(field_mutable:SetNotificationRequest.service_uuid)
  return service_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNotificationRequest::release_service_uuid() {
  // @@protoc_insertion_point(field_release:SetNotificationRequest.service_uuid)
  
  return service_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNotificationRequest::set_allocated_service_uuid(::std::string* service_uuid) {
  if (service_uuid != NULL) {
    
  } else {
    
  }
  service_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_uuid);
  // @@protoc_insertion_point(field_set_allocated:SetNotificationRequest.service_uuid)
}

// string secondary_service_uuid = 3;
inline void SetNotificationRequest::clear_secondary_service_uuid() {
  secondary_service_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNotificationRequest::secondary_service_uuid() const {
  // @@protoc_insertion_point(field_get:SetNotificationRequest.secondary_service_uuid)
  return secondary_service_uuid_.GetNoArena();
}
inline void SetNotificationRequest::set_secondary_service_uuid(const ::std::string& value) {
  
  secondary_service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SetNotificationRequest.secondary_service_uuid)
}
#if LANG_CXX11
inline void SetNotificationRequest::set_secondary_service_uuid(::std::string&& value) {
  
  secondary_service_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SetNotificationRequest.secondary_service_uuid)
}
#endif
inline void SetNotificationRequest::set_secondary_service_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  secondary_service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SetNotificationRequest.secondary_service_uuid)
}
inline void SetNotificationRequest::set_secondary_service_uuid(const char* value, size_t size) {
  
  secondary_service_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SetNotificationRequest.secondary_service_uuid)
}
inline ::std::string* SetNotificationRequest::mutable_secondary_service_uuid() {
  
  // @@protoc_insertion_point(field_mutable:SetNotificationRequest.secondary_service_uuid)
  return secondary_service_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNotificationRequest::release_secondary_service_uuid() {
  // @@protoc_insertion_point(field_release:SetNotificationRequest.secondary_service_uuid)
  
  return secondary_service_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNotificationRequest::set_allocated_secondary_service_uuid(::std::string* secondary_service_uuid) {
  if (secondary_service_uuid != NULL) {
    
  } else {
    
  }
  secondary_service_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secondary_service_uuid);
  // @@protoc_insertion_point(field_set_allocated:SetNotificationRequest.secondary_service_uuid)
}

// string characteristic_uuid = 4;
inline void SetNotificationRequest::clear_characteristic_uuid() {
  characteristic_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNotificationRequest::characteristic_uuid() const {
  // @@protoc_insertion_point(field_get:SetNotificationRequest.characteristic_uuid)
  return characteristic_uuid_.GetNoArena();
}
inline void SetNotificationRequest::set_characteristic_uuid(const ::std::string& value) {
  
  characteristic_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SetNotificationRequest.characteristic_uuid)
}
#if LANG_CXX11
inline void SetNotificationRequest::set_characteristic_uuid(::std::string&& value) {
  
  characteristic_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SetNotificationRequest.characteristic_uuid)
}
#endif
inline void SetNotificationRequest::set_characteristic_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  characteristic_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SetNotificationRequest.characteristic_uuid)
}
inline void SetNotificationRequest::set_characteristic_uuid(const char* value, size_t size) {
  
  characteristic_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SetNotificationRequest.characteristic_uuid)
}
inline ::std::string* SetNotificationRequest::mutable_characteristic_uuid() {
  
  // @@protoc_insertion_point(field_mutable:SetNotificationRequest.characteristic_uuid)
  return characteristic_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNotificationRequest::release_characteristic_uuid() {
  // @@protoc_insertion_point(field_release:SetNotificationRequest.characteristic_uuid)
  
  return characteristic_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNotificationRequest::set_allocated_characteristic_uuid(::std::string* characteristic_uuid) {
  if (characteristic_uuid != NULL) {
    
  } else {
    
  }
  characteristic_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), characteristic_uuid);
  // @@protoc_insertion_point(field_set_allocated:SetNotificationRequest.characteristic_uuid)
}

// bool enable = 5;
inline void SetNotificationRequest::clear_enable() {
  enable_ = false;
}
inline bool SetNotificationRequest::enable() const {
  // @@protoc_insertion_point(field_get:SetNotificationRequest.enable)
  return enable_;
}
inline void SetNotificationRequest::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:SetNotificationRequest.enable)
}

// -------------------------------------------------------------------

// SetNotificationResponse

// string remote_id = 1;
inline void SetNotificationResponse::clear_remote_id() {
  remote_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNotificationResponse::remote_id() const {
  // @@protoc_insertion_point(field_get:SetNotificationResponse.remote_id)
  return remote_id_.GetNoArena();
}
inline void SetNotificationResponse::set_remote_id(const ::std::string& value) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SetNotificationResponse.remote_id)
}
#if LANG_CXX11
inline void SetNotificationResponse::set_remote_id(::std::string&& value) {
  
  remote_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SetNotificationResponse.remote_id)
}
#endif
inline void SetNotificationResponse::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SetNotificationResponse.remote_id)
}
inline void SetNotificationResponse::set_remote_id(const char* value, size_t size) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SetNotificationResponse.remote_id)
}
inline ::std::string* SetNotificationResponse::mutable_remote_id() {
  
  // @@protoc_insertion_point(field_mutable:SetNotificationResponse.remote_id)
  return remote_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNotificationResponse::release_remote_id() {
  // @@protoc_insertion_point(field_release:SetNotificationResponse.remote_id)
  
  return remote_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNotificationResponse::set_allocated_remote_id(::std::string* remote_id) {
  if (remote_id != NULL) {
    
  } else {
    
  }
  remote_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_id);
  // @@protoc_insertion_point(field_set_allocated:SetNotificationResponse.remote_id)
}

// .BluetoothCharacteristic characteristic = 2;
inline bool SetNotificationResponse::has_characteristic() const {
  return this != internal_default_instance() && characteristic_ != NULL;
}
inline void SetNotificationResponse::clear_characteristic() {
  if (GetArenaNoVirtual() == NULL && characteristic_ != NULL) {
    delete characteristic_;
  }
  characteristic_ = NULL;
}
inline const ::BluetoothCharacteristic& SetNotificationResponse::_internal_characteristic() const {
  return *characteristic_;
}
inline const ::BluetoothCharacteristic& SetNotificationResponse::characteristic() const {
  const ::BluetoothCharacteristic* p = characteristic_;
  // @@protoc_insertion_point(field_get:SetNotificationResponse.characteristic)
  return p != NULL ? *p : *reinterpret_cast<const ::BluetoothCharacteristic*>(
      &::_BluetoothCharacteristic_default_instance_);
}
inline ::BluetoothCharacteristic* SetNotificationResponse::release_characteristic() {
  // @@protoc_insertion_point(field_release:SetNotificationResponse.characteristic)
  
  ::BluetoothCharacteristic* temp = characteristic_;
  characteristic_ = NULL;
  return temp;
}
inline ::BluetoothCharacteristic* SetNotificationResponse::mutable_characteristic() {
  
  if (characteristic_ == NULL) {
    auto* p = CreateMaybeMessage<::BluetoothCharacteristic>(GetArenaNoVirtual());
    characteristic_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SetNotificationResponse.characteristic)
  return characteristic_;
}
inline void SetNotificationResponse::set_allocated_characteristic(::BluetoothCharacteristic* characteristic) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete characteristic_;
  }
  if (characteristic) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      characteristic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, characteristic, submessage_arena);
    }
    
  } else {
    
  }
  characteristic_ = characteristic;
  // @@protoc_insertion_point(field_set_allocated:SetNotificationResponse.characteristic)
}

// bool success = 3;
inline void SetNotificationResponse::clear_success() {
  success_ = false;
}
inline bool SetNotificationResponse::success() const {
  // @@protoc_insertion_point(field_get:SetNotificationResponse.success)
  return success_;
}
inline void SetNotificationResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:SetNotificationResponse.success)
}

// -------------------------------------------------------------------

// OnCharacteristicChanged

// string remote_id = 1;
inline void OnCharacteristicChanged::clear_remote_id() {
  remote_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OnCharacteristicChanged::remote_id() const {
  // @@protoc_insertion_point(field_get:OnCharacteristicChanged.remote_id)
  return remote_id_.GetNoArena();
}
inline void OnCharacteristicChanged::set_remote_id(const ::std::string& value) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OnCharacteristicChanged.remote_id)
}
#if LANG_CXX11
inline void OnCharacteristicChanged::set_remote_id(::std::string&& value) {
  
  remote_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OnCharacteristicChanged.remote_id)
}
#endif
inline void OnCharacteristicChanged::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OnCharacteristicChanged.remote_id)
}
inline void OnCharacteristicChanged::set_remote_id(const char* value, size_t size) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OnCharacteristicChanged.remote_id)
}
inline ::std::string* OnCharacteristicChanged::mutable_remote_id() {
  
  // @@protoc_insertion_point(field_mutable:OnCharacteristicChanged.remote_id)
  return remote_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OnCharacteristicChanged::release_remote_id() {
  // @@protoc_insertion_point(field_release:OnCharacteristicChanged.remote_id)
  
  return remote_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OnCharacteristicChanged::set_allocated_remote_id(::std::string* remote_id) {
  if (remote_id != NULL) {
    
  } else {
    
  }
  remote_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_id);
  // @@protoc_insertion_point(field_set_allocated:OnCharacteristicChanged.remote_id)
}

// .BluetoothCharacteristic characteristic = 2;
inline bool OnCharacteristicChanged::has_characteristic() const {
  return this != internal_default_instance() && characteristic_ != NULL;
}
inline void OnCharacteristicChanged::clear_characteristic() {
  if (GetArenaNoVirtual() == NULL && characteristic_ != NULL) {
    delete characteristic_;
  }
  characteristic_ = NULL;
}
inline const ::BluetoothCharacteristic& OnCharacteristicChanged::_internal_characteristic() const {
  return *characteristic_;
}
inline const ::BluetoothCharacteristic& OnCharacteristicChanged::characteristic() const {
  const ::BluetoothCharacteristic* p = characteristic_;
  // @@protoc_insertion_point(field_get:OnCharacteristicChanged.characteristic)
  return p != NULL ? *p : *reinterpret_cast<const ::BluetoothCharacteristic*>(
      &::_BluetoothCharacteristic_default_instance_);
}
inline ::BluetoothCharacteristic* OnCharacteristicChanged::release_characteristic() {
  // @@protoc_insertion_point(field_release:OnCharacteristicChanged.characteristic)
  
  ::BluetoothCharacteristic* temp = characteristic_;
  characteristic_ = NULL;
  return temp;
}
inline ::BluetoothCharacteristic* OnCharacteristicChanged::mutable_characteristic() {
  
  if (characteristic_ == NULL) {
    auto* p = CreateMaybeMessage<::BluetoothCharacteristic>(GetArenaNoVirtual());
    characteristic_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OnCharacteristicChanged.characteristic)
  return characteristic_;
}
inline void OnCharacteristicChanged::set_allocated_characteristic(::BluetoothCharacteristic* characteristic) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete characteristic_;
  }
  if (characteristic) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      characteristic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, characteristic, submessage_arena);
    }
    
  } else {
    
  }
  characteristic_ = characteristic;
  // @@protoc_insertion_point(field_set_allocated:OnCharacteristicChanged.characteristic)
}

// -------------------------------------------------------------------

// DeviceStateResponse

// string remote_id = 1;
inline void DeviceStateResponse::clear_remote_id() {
  remote_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceStateResponse::remote_id() const {
  // @@protoc_insertion_point(field_get:DeviceStateResponse.remote_id)
  return remote_id_.GetNoArena();
}
inline void DeviceStateResponse::set_remote_id(const ::std::string& value) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceStateResponse.remote_id)
}
#if LANG_CXX11
inline void DeviceStateResponse::set_remote_id(::std::string&& value) {
  
  remote_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceStateResponse.remote_id)
}
#endif
inline void DeviceStateResponse::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceStateResponse.remote_id)
}
inline void DeviceStateResponse::set_remote_id(const char* value, size_t size) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceStateResponse.remote_id)
}
inline ::std::string* DeviceStateResponse::mutable_remote_id() {
  
  // @@protoc_insertion_point(field_mutable:DeviceStateResponse.remote_id)
  return remote_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceStateResponse::release_remote_id() {
  // @@protoc_insertion_point(field_release:DeviceStateResponse.remote_id)
  
  return remote_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceStateResponse::set_allocated_remote_id(::std::string* remote_id) {
  if (remote_id != NULL) {
    
  } else {
    
  }
  remote_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_id);
  // @@protoc_insertion_point(field_set_allocated:DeviceStateResponse.remote_id)
}

// .DeviceStateResponse.BluetoothDeviceState state = 2;
inline void DeviceStateResponse::clear_state() {
  state_ = 0;
}
inline ::DeviceStateResponse_BluetoothDeviceState DeviceStateResponse::state() const {
  // @@protoc_insertion_point(field_get:DeviceStateResponse.state)
  return static_cast< ::DeviceStateResponse_BluetoothDeviceState >(state_);
}
inline void DeviceStateResponse::set_state(::DeviceStateResponse_BluetoothDeviceState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:DeviceStateResponse.state)
}

// -------------------------------------------------------------------

// ConnectedDevicesResponse

// repeated .BluetoothDevice devices = 1;
inline int ConnectedDevicesResponse::devices_size() const {
  return devices_.size();
}
inline void ConnectedDevicesResponse::clear_devices() {
  devices_.Clear();
}
inline ::BluetoothDevice* ConnectedDevicesResponse::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:ConnectedDevicesResponse.devices)
  return devices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::BluetoothDevice >*
ConnectedDevicesResponse::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:ConnectedDevicesResponse.devices)
  return &devices_;
}
inline const ::BluetoothDevice& ConnectedDevicesResponse::devices(int index) const {
  // @@protoc_insertion_point(field_get:ConnectedDevicesResponse.devices)
  return devices_.Get(index);
}
inline ::BluetoothDevice* ConnectedDevicesResponse::add_devices() {
  // @@protoc_insertion_point(field_add:ConnectedDevicesResponse.devices)
  return devices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BluetoothDevice >&
ConnectedDevicesResponse::devices() const {
  // @@protoc_insertion_point(field_list:ConnectedDevicesResponse.devices)
  return devices_;
}

// -------------------------------------------------------------------

// MtuSizeRequest

// string remote_id = 1;
inline void MtuSizeRequest::clear_remote_id() {
  remote_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MtuSizeRequest::remote_id() const {
  // @@protoc_insertion_point(field_get:MtuSizeRequest.remote_id)
  return remote_id_.GetNoArena();
}
inline void MtuSizeRequest::set_remote_id(const ::std::string& value) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MtuSizeRequest.remote_id)
}
#if LANG_CXX11
inline void MtuSizeRequest::set_remote_id(::std::string&& value) {
  
  remote_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MtuSizeRequest.remote_id)
}
#endif
inline void MtuSizeRequest::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MtuSizeRequest.remote_id)
}
inline void MtuSizeRequest::set_remote_id(const char* value, size_t size) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MtuSizeRequest.remote_id)
}
inline ::std::string* MtuSizeRequest::mutable_remote_id() {
  
  // @@protoc_insertion_point(field_mutable:MtuSizeRequest.remote_id)
  return remote_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MtuSizeRequest::release_remote_id() {
  // @@protoc_insertion_point(field_release:MtuSizeRequest.remote_id)
  
  return remote_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MtuSizeRequest::set_allocated_remote_id(::std::string* remote_id) {
  if (remote_id != NULL) {
    
  } else {
    
  }
  remote_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_id);
  // @@protoc_insertion_point(field_set_allocated:MtuSizeRequest.remote_id)
}

// uint32 mtu = 2;
inline void MtuSizeRequest::clear_mtu() {
  mtu_ = 0u;
}
inline ::google::protobuf::uint32 MtuSizeRequest::mtu() const {
  // @@protoc_insertion_point(field_get:MtuSizeRequest.mtu)
  return mtu_;
}
inline void MtuSizeRequest::set_mtu(::google::protobuf::uint32 value) {
  
  mtu_ = value;
  // @@protoc_insertion_point(field_set:MtuSizeRequest.mtu)
}

// -------------------------------------------------------------------

// MtuSizeResponse

// string remote_id = 1;
inline void MtuSizeResponse::clear_remote_id() {
  remote_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MtuSizeResponse::remote_id() const {
  // @@protoc_insertion_point(field_get:MtuSizeResponse.remote_id)
  return remote_id_.GetNoArena();
}
inline void MtuSizeResponse::set_remote_id(const ::std::string& value) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MtuSizeResponse.remote_id)
}
#if LANG_CXX11
inline void MtuSizeResponse::set_remote_id(::std::string&& value) {
  
  remote_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MtuSizeResponse.remote_id)
}
#endif
inline void MtuSizeResponse::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MtuSizeResponse.remote_id)
}
inline void MtuSizeResponse::set_remote_id(const char* value, size_t size) {
  
  remote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MtuSizeResponse.remote_id)
}
inline ::std::string* MtuSizeResponse::mutable_remote_id() {
  
  // @@protoc_insertion_point(field_mutable:MtuSizeResponse.remote_id)
  return remote_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MtuSizeResponse::release_remote_id() {
  // @@protoc_insertion_point(field_release:MtuSizeResponse.remote_id)
  
  return remote_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MtuSizeResponse::set_allocated_remote_id(::std::string* remote_id) {
  if (remote_id != NULL) {
    
  } else {
    
  }
  remote_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_id);
  // @@protoc_insertion_point(field_set_allocated:MtuSizeResponse.remote_id)
}

// uint32 mtu = 2;
inline void MtuSizeResponse::clear_mtu() {
  mtu_ = 0u;
}
inline ::google::protobuf::uint32 MtuSizeResponse::mtu() const {
  // @@protoc_insertion_point(field_get:MtuSizeResponse.mtu)
  return mtu_;
}
inline void MtuSizeResponse::set_mtu(::google::protobuf::uint32 value) {
  
  mtu_ = value;
  // @@protoc_insertion_point(field_set:MtuSizeResponse.mtu)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::BluetoothState_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BluetoothState_State>() {
  return ::BluetoothState_State_descriptor();
}
template <> struct is_proto_enum< ::BluetoothDevice_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BluetoothDevice_Type>() {
  return ::BluetoothDevice_Type_descriptor();
}
template <> struct is_proto_enum< ::WriteCharacteristicRequest_WriteType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::WriteCharacteristicRequest_WriteType>() {
  return ::WriteCharacteristicRequest_WriteType_descriptor();
}
template <> struct is_proto_enum< ::DeviceStateResponse_BluetoothDeviceState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DeviceStateResponse_BluetoothDeviceState>() {
  return ::DeviceStateResponse_BluetoothDeviceState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_flutterblue_2eproto
